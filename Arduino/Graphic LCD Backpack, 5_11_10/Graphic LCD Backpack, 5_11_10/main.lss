
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00002af4  00002b88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002af4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b3  00800124  00800124  00002bac  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00002bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000282  00000000  00000000  00002bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001825  00000000  00000000  00002e6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039e  00000000  00000000  00004693  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001fe0  00000000  00000000  00004a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00006a14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039b  00000000  00000000  00006c64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018f9  00000000  00000000  00006fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000088f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 22 01 	jmp	0x244	; 0x244 <__ctors_end>
       4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       8:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
       c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      10:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      14:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      18:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      1c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      20:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      24:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      28:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      2c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      30:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      34:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      38:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_14>
      3c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      40:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      44:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      48:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_18>
      4c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      50:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      54:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      58:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      5c:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      60:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>
      64:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__bad_interrupt>

00000068 <text_array>:
      68:	00 00 00 00 00 00 f6 f6 00 00 00 e0 00 e0 00 28     ...............(
      78:	fe 28 fe 28 00 64 d6 54 08 c2 cc 10 26 c6 4c b2     .(.(.d.T....&.L.
      88:	92 6c 0a 00 00 e0 00 00 00 38 44 82 00 00 82 44     .l.......8D....D
      98:	38 00 88 50 f8 50 88 08 08 3e 08 08 00 00 05 06     8..P.P...>......
      a8:	00 08 08 08 08 08 00 00 06 06 00 02 0c 10 60 80     ..............`.
      b8:	7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a 92 62 44     |...|.B...B...bD
      c8:	82 92 92 6c 10 30 50 fe 10 e4 a2 a2 a2 9c 3c 52     ...l.0P.......<R
      d8:	92 92 0c 80 86 98 e0 80 6c 92 92 92 6c 60 92 92     ........l...l`..
      e8:	94 78 00 00 36 36 00 00 00 35 36 00 10 28 44 82     .x..66...56..(D.
      f8:	00 28 28 28 28 28 00 82 44 28 10 40 80 8a 90 60     .(((((..D(.@...`
     108:	7c 82 ba ba 62 3e 48 88 48 3e fe 92 92 92 6c 7c     |...b>H.H>....l|
     118:	82 82 82 44 fe 82 82 82 7c fe 92 92 92 82 fe 90     ...D....|.......
     128:	90 90 80 7c 82 82 8a 4e fe 10 10 10 fe 82 82 fe     ...|...N........
     138:	82 82 84 82 fc 80 80 fe 10 28 44 82 fe 02 02 02     .........(D.....
     148:	02 fe 40 20 40 fe fe 60 10 0c fe 7c 82 82 82 7c     ..@ @..`...|...|
     158:	fe 90 90 90 60 7c 82 82 86 7e fe 90 98 94 62 64     ....`|...~....bd
     168:	92 92 92 4c 80 80 fe 80 80 fc 02 02 02 fc f8 04     ...L............
     178:	02 04 f8 fc 02 0c 02 fc c6 28 10 28 c6 c0 20 1e     .........(.(.. .
     188:	20 c0 86 8a 92 a2 c2 00 00 fe 82 00 00 00 00 00      ...............
     198:	00 80 60 10 0c 02 20 40 80 40 20 01 01 01 01 01     ..`... @.@ .....
     1a8:	80 40 20 00 00 04 2a 2a 2a 1e fe 12 22 22 1c 1c     .@ ...***...""..
     1b8:	22 22 22 14 1c 22 22 12 fe 1c 2a 2a 2a 18 10 7e     """..""...***..~
     1c8:	90 80 40 18 25 25 25 1e fe 10 10 10 0e 00 12 5e     ..@.%%%........^
     1d8:	02 00 02 01 01 11 5e fe 08 08 14 22 00 82 fe 02     ......^...."....
     1e8:	00 3e 20 1c 20 1e 3e 20 20 20 1e 1c 22 22 22 1c     .> . .>   ..""".
     1f8:	3f 24 24 24 18 18 24 24 3f 01 3e 10 20 20 10 12     ?$$$..$$?.>.  ..
     208:	2a 2a 2a 04 00 10 3c 12 04 3c 02 02 02 3e 30 0c     ***...<..<...>0.
     218:	02 0c 30 38 06 18 06 38 22 14 08 14 22 38 05 05     ..08...8"..."8..
     228:	05 3e 22 26 2a 32 22 00 10 6c 82 82 04 02 ff 02     .>"&*2"..l......
     238:	04 82 82 6c 10 00 08 10 18 08 10 00                 ...l........

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	d4 e0       	ldi	r29, 0x04	; 4
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	cd bf       	out	0x3d, r28	; 61

00000250 <__do_copy_data>:
     250:	11 e0       	ldi	r17, 0x01	; 1
     252:	a0 e0       	ldi	r26, 0x00	; 0
     254:	b1 e0       	ldi	r27, 0x01	; 1
     256:	e4 ef       	ldi	r30, 0xF4	; 244
     258:	fa e2       	ldi	r31, 0x2A	; 42
     25a:	02 c0       	rjmp	.+4      	; 0x260 <.do_copy_data_start>

0000025c <.do_copy_data_loop>:
     25c:	05 90       	lpm	r0, Z+
     25e:	0d 92       	st	X+, r0

00000260 <.do_copy_data_start>:
     260:	a4 32       	cpi	r26, 0x24	; 36
     262:	b1 07       	cpc	r27, r17
     264:	d9 f7       	brne	.-10     	; 0x25c <.do_copy_data_loop>

00000266 <__do_clear_bss>:
     266:	12 e0       	ldi	r17, 0x02	; 2
     268:	a4 e2       	ldi	r26, 0x24	; 36
     26a:	b1 e0       	ldi	r27, 0x01	; 1
     26c:	01 c0       	rjmp	.+2      	; 0x270 <.do_clear_bss_start>

0000026e <.do_clear_bss_loop>:
     26e:	1d 92       	st	X+, r1

00000270 <.do_clear_bss_start>:
     270:	a7 3d       	cpi	r26, 0xD7	; 215
     272:	b1 07       	cpc	r27, r17
     274:	e1 f7       	brne	.-8      	; 0x26e <.do_clear_bss_loop>
     276:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <main>
     27a:	0c 94 78 15 	jmp	0x2af0	; 0x2af0 <_exit>

0000027e <__bad_interrupt>:
     27e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000282 <__vector_18>:
                              0x08,0x10,0x18,0x08,0x10};/*~*/
							  
							  

ISR (SIG_USART_RECV)//USART Receive Interrupt
{
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	0f 92       	push	r0
     28a:	11 24       	eor	r1, r1
     28c:	2f 93       	push	r18
     28e:	8f 93       	push	r24
     290:	9f 93       	push	r25
     292:	ef 93       	push	r30
     294:	ff 93       	push	r31
	cli();//Disable Interrupts
     296:	f8 94       	cli
	RX_array[RX_in] = UDR0;
     298:	e0 91 28 01 	lds	r30, 0x0128
     29c:	f0 91 29 01 	lds	r31, 0x0129
     2a0:	80 91 c6 00 	lds	r24, 0x00C6
     2a4:	e9 5c       	subi	r30, 0xC9	; 201
     2a6:	fe 4f       	sbci	r31, 0xFE	; 254
     2a8:	80 83       	st	Z, r24
	//
	// Basically, if it see's a pipe, it knows a new command is starting.
	// Since no command is more than 8 bytes long, if we're within 8 bytes
	// of the buffer tail, and a new command is starting, just wrap to the
	// start first "in case".
	if (RX_in >= 409 && RX_array[RX_in] == 124) {		
     2aa:	80 91 28 01 	lds	r24, 0x0128
     2ae:	90 91 29 01 	lds	r25, 0x0129
     2b2:	89 59       	subi	r24, 0x99	; 153
     2b4:	91 40       	sbci	r25, 0x01	; 1
     2b6:	48 f0       	brcs	.+18     	; 0x2ca <__vector_18+0x48>
     2b8:	e0 91 28 01 	lds	r30, 0x0128
     2bc:	f0 91 29 01 	lds	r31, 0x0129
     2c0:	e9 5c       	subi	r30, 0xC9	; 201
     2c2:	fe 4f       	sbci	r31, 0xFE	; 254
     2c4:	80 81       	ld	r24, Z
     2c6:	8c 37       	cpi	r24, 0x7C	; 124
     2c8:	f9 f0       	breq	.+62     	; 0x308 <__vector_18+0x86>
		RX_array[0] = RX_array[RX_in];
		RX_in = 0;
	}
	
	RX_in++;
     2ca:	80 91 28 01 	lds	r24, 0x0128
     2ce:	90 91 29 01 	lds	r25, 0x0129
     2d2:	01 96       	adiw	r24, 0x01	; 1
     2d4:	90 93 29 01 	sts	0x0129, r25
     2d8:	80 93 28 01 	sts	0x0128, r24
	
	if (RX_in >= 416) RX_in = 0;
     2dc:	80 91 28 01 	lds	r24, 0x0128
     2e0:	90 91 29 01 	lds	r25, 0x0129
     2e4:	80 5a       	subi	r24, 0xA0	; 160
     2e6:	91 40       	sbci	r25, 0x01	; 1
     2e8:	20 f0       	brcs	.+8      	; 0x2f2 <__vector_18+0x70>
     2ea:	10 92 29 01 	sts	0x0129, r1
     2ee:	10 92 28 01 	sts	0x0128, r1
	
	sei();//Enable Interrupts
     2f2:	78 94       	sei
	
}
     2f4:	ff 91       	pop	r31
     2f6:	ef 91       	pop	r30
     2f8:	9f 91       	pop	r25
     2fa:	8f 91       	pop	r24
     2fc:	2f 91       	pop	r18
     2fe:	0f 90       	pop	r0
     300:	0f be       	out	0x3f, r0	; 63
     302:	0f 90       	pop	r0
     304:	1f 90       	pop	r1
     306:	18 95       	reti
	// Basically, if it see's a pipe, it knows a new command is starting.
	// Since no command is more than 8 bytes long, if we're within 8 bytes
	// of the buffer tail, and a new command is starting, just wrap to the
	// start first "in case".
	if (RX_in >= 409 && RX_array[RX_in] == 124) {		
		RX_array[0] = RX_array[RX_in];
     308:	e0 91 28 01 	lds	r30, 0x0128
     30c:	f0 91 29 01 	lds	r31, 0x0129
     310:	e9 5c       	subi	r30, 0xC9	; 201
     312:	fe 4f       	sbci	r31, 0xFE	; 254
     314:	80 81       	ld	r24, Z
     316:	80 93 37 01 	sts	0x0137, r24
		RX_in = 0;
     31a:	10 92 29 01 	sts	0x0129, r1
     31e:	10 92 28 01 	sts	0x0128, r1
     322:	d3 cf       	rjmp	.-90     	; 0x2ca <__vector_18+0x48>

00000324 <__vector_14>:
	sei();//Enable Interrupts
	
}

ISR (TIMER0_COMPA_vect)
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	8f 93       	push	r24
     330:	9f 93       	push	r25
	unsigned char y;
	
	//cli();//Disable Interrupts
	
	TCCR0B = 0;
     332:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;//disable timer ints
     334:	10 92 6e 00 	sts	0x006E, r1
	
	TIFR0 = 0x02;//clear the interrupt
     338:	82 e0       	ldi	r24, 0x02	; 2
     33a:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 0;
     33c:	16 bc       	out	0x26, r1	; 38
	
	//PORTB |= (1<<BL_EN);//off
	
	
	y = PINB;
	if (y & (1<<BL_EN))//on
     33e:	1a 99       	sbic	0x03, 2	; 3
     340:	11 c0       	rjmp	.+34     	; 0x364 <__vector_14+0x40>
		OCR0A = BL_dutycycle;
	}
	
	else//off
	{
		PORTB |= (1<<BL_EN);
     342:	2a 9a       	sbi	0x05, 2	; 5
		OCR0A = 100 - BL_dutycycle;
     344:	84 e6       	ldi	r24, 0x64	; 100
     346:	90 91 03 01 	lds	r25, 0x0103
     34a:	89 1b       	sub	r24, r25
     34c:	87 bd       	out	0x27, r24	; 39
	}
	
	//PORTB |= (1<<BL_EN);
	
	TIMSK0 = 0x02;//enable OCR0A
     34e:	82 e0       	ldi	r24, 0x02	; 2
     350:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = 0x02;
     354:	85 bd       	out	0x25, r24	; 37
	//sei();//Enable Interrupts
}
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	0f 90       	pop	r0
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	0f 90       	pop	r0
     360:	1f 90       	pop	r1
     362:	18 95       	reti
	
	
	y = PINB;
	if (y & (1<<BL_EN))//on
	{
		PORTB &= (~(1<<BL_EN));
     364:	2a 98       	cbi	0x05, 2	; 5
		OCR0A = BL_dutycycle;
     366:	80 91 03 01 	lds	r24, 0x0103
     36a:	87 bd       	out	0x27, r24	; 39
     36c:	f0 cf       	rjmp	.-32     	; 0x34e <__vector_14+0x2a>

0000036e <ioinit>:
void ioinit (void)
{
	
    //1 = output, 0 = input
   
	DDRB = 0b00000011; //PB0 and PB1 are outs
     36e:	83 e0       	ldi	r24, 0x03	; 3
     370:	84 b9       	out	0x04, r24	; 4
	DDRD = 0b11111100; //PD2-PD7 are also outs.  Ports B and D are the data bus.
     372:	8c ef       	ldi	r24, 0xFC	; 252
     374:	8a b9       	out	0x0a, r24	; 10
	
	PORTB |= (1<<BL_EN);//Backlight off
     376:	2a 9a       	sbi	0x05, 2	; 5
	DDRB |= (1<<BL_EN);//set PB2 as output
     378:	22 9a       	sbi	0x04, 2	; 4
	
	if (display == 0)
     37a:	80 91 27 01 	lds	r24, 0x0127
     37e:	88 23       	and	r24, r24
     380:	61 f0       	breq	.+24     	; 0x39a <ioinit+0x2c>
	{
		DDRC = ((1<<EN) | (1<<RS) | (1<<R_W) | (1<<RESET) | (1<<CS1) | (1<<CS2));
		PORTC = ((1<<EN) | (1<<RS) | (1<<R_W) | (1<<RESET) | (1<<CS1) | (1<<CS2));
	}
	
	else if (display == 1)
     382:	81 30       	cpi	r24, 0x01	; 1
     384:	71 f0       	breq	.+28     	; 0x3a2 <ioinit+0x34>
		PORTC = ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
		DDRC = ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
	}
	
	//Init timer 2
    TCCR2B = (1<<CS21); //Set Prescaler to 8. CS21=1
     386:	82 e0       	ldi	r24, 0x02	; 2
     388:	80 93 b1 00 	sts	0x00B1, r24

	//Set up Timer 0
	TCCR0A = 0x02;//CTC mode
     38c:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = 0x02;
	TIMSK0 = 0x02;//enable OCR0A
     38e:	80 93 6e 00 	sts	0x006E, r24
	//OCR0B = 255 - BL_dutycycle;
	
	//OCR0A = 255 - (100 - BL_dutycycle);
	OCR0A = BL_dutycycle;
     392:	80 91 03 01 	lds	r24, 0x0103
     396:	87 bd       	out	0x27, r24	; 39

}
     398:	08 95       	ret
	PORTB |= (1<<BL_EN);//Backlight off
	DDRB |= (1<<BL_EN);//set PB2 as output
	
	if (display == 0)
	{
		DDRC = ((1<<EN) | (1<<RS) | (1<<R_W) | (1<<RESET) | (1<<CS1) | (1<<CS2));
     39a:	8f e3       	ldi	r24, 0x3F	; 63
     39c:	87 b9       	out	0x07, r24	; 7
		PORTC = ((1<<EN) | (1<<RS) | (1<<R_W) | (1<<RESET) | (1<<CS1) | (1<<CS2));
     39e:	88 b9       	out	0x08, r24	; 8
     3a0:	f2 cf       	rjmp	.-28     	; 0x386 <ioinit+0x18>
	}
	
	else if (display == 1)
	{
		PORTC = ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
     3a2:	8f e3       	ldi	r24, 0x3F	; 63
     3a4:	88 b9       	out	0x08, r24	; 8
		DDRC = ((1<<WR) | (1<<RD) | (1<<CE) | (1<<CD) | (1<<HALT) | (1<<RST));
     3a6:	87 b9       	out	0x07, r24	; 7
     3a8:	ee cf       	rjmp	.-36     	; 0x386 <ioinit+0x18>

000003aa <delay_us>:
//General short delays
void delay_us(uint8_t x)
{
	char temp;
	
	if (x == 0) temp = 1;
     3aa:	88 23       	and	r24, r24
     3ac:	71 f4       	brne	.+28     	; 0x3ca <delay_us+0x20>
     3ae:	9f ef       	ldi	r25, 0xFF	; 255
	else temp = x;
	
	TIFR2 |= 0x01;//Clear any interrupt flags on Timer2
     3b0:	b8 9a       	sbi	0x17, 0	; 23
    
    TCNT2 = 256 - temp; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
     3b2:	90 93 b2 00 	sts	0x00B2, r25

	while(!(TIFR2 & 0x01));
     3b6:	b8 9b       	sbis	0x17, 0	; 23
     3b8:	fe cf       	rjmp	.-4      	; 0x3b6 <delay_us+0xc>
	
	if (x == 0) return;//this is for display timing	
     3ba:	88 23       	and	r24, r24
     3bc:	29 f0       	breq	.+10     	; 0x3c8 <delay_us+0x1e>
	
	//The prescaler doesn't allow for a setting of 16, just 8 or 32. So, we do this twice.
	TIFR2 |= 0x01;
     3be:	b8 9a       	sbi	0x17, 0	; 23
    
    TCNT2 = 256 - temp; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
     3c0:	90 93 b2 00 	sts	0x00B2, r25

	while(!(TIFR2 & 0x01));
     3c4:	b8 9b       	sbis	0x17, 0	; 23
     3c6:	fe cf       	rjmp	.-4      	; 0x3c4 <delay_us+0x1a>
     3c8:	08 95       	ret
//General short delays
void delay_us(uint8_t x)
{
	char temp;
	
	if (x == 0) temp = 1;
     3ca:	98 2f       	mov	r25, r24
     3cc:	91 95       	neg	r25
     3ce:	f0 cf       	rjmp	.-32     	; 0x3b0 <delay_us+0x6>

000003d0 <delay_ms>:

}

//General short delays
void delay_ms(uint16_t x)
{
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
	for (; x > 0 ; x--)
     3d6:	00 97       	sbiw	r24, 0x00	; 0
     3d8:	71 f0       	breq	.+28     	; 0x3f6 <delay_ms+0x26>
    {
        delay_us(250);
     3da:	8a ef       	ldi	r24, 0xFA	; 250
     3dc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
        delay_us(250);
     3e0:	8a ef       	ldi	r24, 0xFA	; 250
     3e2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
        delay_us(250);
     3e6:	8a ef       	ldi	r24, 0xFA	; 250
     3e8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
        delay_us(250);
     3ec:	8a ef       	ldi	r24, 0xFA	; 250
     3ee:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for (; x > 0 ; x--)
     3f2:	21 97       	sbiw	r28, 0x01	; 1
     3f4:	91 f7       	brne	.-28     	; 0x3da <delay_ms+0xa>
        delay_us(250);
        delay_us(250);
        delay_us(250);
    }
	
}
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     3fc:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     400:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     404:	82 e0       	ldi	r24, 0x02	; 2
     406:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
     40a:	88 e9       	ldi	r24, 0x98	; 152
     40c:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     410:	86 e0       	ldi	r24, 0x06	; 6
     412:	80 93 c2 00 	sts	0x00C2, r24
	sei();
     416:	78 94       	sei
}
     418:	08 95       	ret

0000041a <put_char>:

void put_char(char byte)
{
     41a:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     41c:	80 91 c0 00 	lds	r24, 0x00C0
     420:	85 ff       	sbrs	r24, 5
     422:	fc cf       	rjmp	.-8      	; 0x41c <put_char+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     424:	90 93 c6 00 	sts	0x00C6, r25
}
     428:	08 95       	ret

0000042a <delay>:

//delay for display timing
void delay(void)
{
     42a:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     42c:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     42e:	8f 5f       	subi	r24, 0xFF	; 255
     430:	8e 31       	cpi	r24, 0x1E	; 30
     432:	e1 f7       	brne	.-8      	; 0x42c <delay+0x2>
	asm volatile ("nop");
	asm volatile ("nop");
	asm volatile ("nop");
	*/
	
}
     434:	08 95       	ret

00000436 <set_data>:
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
     436:	95 b1       	in	r25, 0x05	; 5
     438:	9c 7f       	andi	r25, 0xFC	; 252
     43a:	95 b9       	out	0x05, r25	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
     43c:	9b b1       	in	r25, 0x0b	; 11
     43e:	93 70       	andi	r25, 0x03	; 3
     440:	9b b9       	out	0x0b, r25	; 11
	
	PORTB |= (data & 0x03);
     442:	25 b1       	in	r18, 0x05	; 5
     444:	98 2f       	mov	r25, r24
     446:	93 70       	andi	r25, 0x03	; 3
     448:	92 2b       	or	r25, r18
     44a:	95 b9       	out	0x05, r25	; 5
	PORTD |= (data & 0xFC);
     44c:	9b b1       	in	r25, 0x0b	; 11
     44e:	8c 7f       	andi	r24, 0xFC	; 252
     450:	98 2b       	or	r25, r24
     452:	9b b9       	out	0x0b, r25	; 11

}
     454:	08 95       	ret

00000456 <set_x>:
	
	//a = x_spot;
	//if (a == 0) a = 63;
	//else a--;
	
	if (x_spot == 0) x_spot = 63;
     456:	88 23       	and	r24, r24
     458:	59 f5       	brne	.+86     	; 0x4b0 <set_x+0x5a>
     45a:	93 e0       	ldi	r25, 0x03	; 3
     45c:	2c e7       	ldi	r18, 0x7C	; 124
	else x_spot--;
	
	PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
     45e:	88 b1       	in	r24, 0x08	; 8
     460:	88 7f       	andi	r24, 0xF8	; 248
     462:	88 b9       	out	0x08, r24	; 8
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
     464:	85 b1       	in	r24, 0x05	; 5
     466:	8c 7f       	andi	r24, 0xFC	; 252
     468:	85 b9       	out	0x05, r24	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
     46a:	8b b1       	in	r24, 0x0b	; 11
     46c:	83 70       	andi	r24, 0x03	; 3
     46e:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (data & 0x03);
     470:	85 b1       	in	r24, 0x05	; 5
     472:	98 2b       	or	r25, r24
     474:	95 b9       	out	0x05, r25	; 5
	PORTD |= (data & 0xFC);
     476:	8b b1       	in	r24, 0x0b	; 11
     478:	28 2b       	or	r18, r24
     47a:	2b b9       	out	0x0b, r18	; 11
     47c:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     47e:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	8e 31       	cpi	r24, 0x1E	; 30
     484:	e1 f7       	brne	.-8      	; 0x47e <set_x+0x28>
	
	PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
			
	set_data(0x40 | x_spot);
	delay();
	PORTC |= (1 << EN);//up
     486:	40 9a       	sbi	0x08, 0	; 8
     488:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     48a:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     48c:	8f 5f       	subi	r24, 0xFF	; 255
     48e:	8e 31       	cpi	r24, 0x1E	; 30
     490:	e1 f7       	brne	.-8      	; 0x48a <set_x+0x34>
			
	set_data(0x40 | x_spot);
	delay();
	PORTC |= (1 << EN);//up
	delay();
	PORTC &= ~(1 << EN);//down
     492:	40 98       	cbi	0x08, 0	; 8
     494:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     496:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     498:	8f 5f       	subi	r24, 0xFF	; 255
     49a:	8e 31       	cpi	r24, 0x1E	; 30
     49c:	e1 f7       	brne	.-8      	; 0x496 <set_x+0x40>
	delay();
	PORTC |= (1 << EN);//up
	delay();
	PORTC &= ~(1 << EN);//down
	delay();
	PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
     49e:	88 b1       	in	r24, 0x08	; 8
     4a0:	87 60       	ori	r24, 0x07	; 7
     4a2:	88 b9       	out	0x08, r24	; 8
     4a4:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     4a6:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     4a8:	8f 5f       	subi	r24, 0xFF	; 255
     4aa:	8e 31       	cpi	r24, 0x1E	; 30
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <set_x+0x50>
	PORTC &= ~(1 << EN);//down
	delay();
	PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
	delay();
	
}
     4ae:	08 95       	ret
	
	//a = x_spot;
	//if (a == 0) a = 63;
	//else a--;
	
	if (x_spot == 0) x_spot = 63;
     4b0:	81 50       	subi	r24, 0x01	; 1
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	98 2f       	mov	r25, r24
     4b6:	93 70       	andi	r25, 0x03	; 3
     4b8:	28 2f       	mov	r18, r24
     4ba:	2c 7f       	andi	r18, 0xFC	; 252
     4bc:	d0 cf       	rjmp	.-96     	; 0x45e <set_x+0x8>

000004be <set_page>:


void set_page(char page)
{
	//set control lines
	PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
     4be:	98 b1       	in	r25, 0x08	; 8
     4c0:	98 7f       	andi	r25, 0xF8	; 248
     4c2:	98 b9       	out	0x08, r25	; 8
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
     4c4:	95 b1       	in	r25, 0x05	; 5
     4c6:	9c 7f       	andi	r25, 0xFC	; 252
     4c8:	95 b9       	out	0x05, r25	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
     4ca:	9b b1       	in	r25, 0x0b	; 11
     4cc:	93 70       	andi	r25, 0x03	; 3
     4ce:	9b b9       	out	0x0b, r25	; 11
	
	PORTB |= (data & 0x03);
     4d0:	25 b1       	in	r18, 0x05	; 5
     4d2:	88 6b       	ori	r24, 0xB8	; 184
     4d4:	98 2f       	mov	r25, r24
     4d6:	93 70       	andi	r25, 0x03	; 3
     4d8:	92 2b       	or	r25, r18
     4da:	95 b9       	out	0x05, r25	; 5
	PORTD |= (data & 0xFC);
     4dc:	9b b1       	in	r25, 0x0b	; 11
     4de:	8c 7f       	andi	r24, 0xFC	; 252
     4e0:	89 2b       	or	r24, r25
     4e2:	8b b9       	out	0x0b, r24	; 11
     4e4:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     4e6:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     4e8:	8f 5f       	subi	r24, 0xFF	; 255
     4ea:	8e 31       	cpi	r24, 0x1E	; 30
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <set_page+0x28>
	//set control lines
	PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
	
	set_data(0xB8 | page);
	delay();
	PORTC |= (1 << EN);//up
     4ee:	40 9a       	sbi	0x08, 0	; 8
     4f0:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     4f2:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     4f4:	8f 5f       	subi	r24, 0xFF	; 255
     4f6:	8e 31       	cpi	r24, 0x1E	; 30
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <set_page+0x34>
	
	set_data(0xB8 | page);
	delay();
	PORTC |= (1 << EN);//up
	delay();
	PORTC &= ~(1 << EN);//down
     4fa:	40 98       	cbi	0x08, 0	; 8
     4fc:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     4fe:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     500:	8f 5f       	subi	r24, 0xFF	; 255
     502:	8e 31       	cpi	r24, 0x1E	; 30
     504:	e1 f7       	brne	.-8      	; 0x4fe <set_page+0x40>
	delay();
	PORTC |= (1 << EN);//up
	delay();
	PORTC &= ~(1 << EN);//down
	delay();
	PORTC |= ((1 << EN) | (1 << R_W) |(1 << RS));//all high
     506:	88 b1       	in	r24, 0x08	; 8
     508:	87 60       	ori	r24, 0x07	; 7
     50a:	88 b9       	out	0x08, r24	; 8
     50c:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     50e:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     510:	8f 5f       	subi	r24, 0xFF	; 255
     512:	8e 31       	cpi	r24, 0x1E	; 30
     514:	e1 f7       	brne	.-8      	; 0x50e <__stack+0xf>
	PORTC &= ~(1 << EN);//down
	delay();
	PORTC |= ((1 << EN) | (1 << R_W) |(1 << RS));//all high
	
	delay();
}
     516:	08 95       	ret

00000518 <write_byte>:


void write_byte(char byte, char side)
{	
	PORTC |= (1 << RS);//make sure this thing is high
     518:	41 9a       	sbi	0x08, 1	; 8
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
     51a:	95 b1       	in	r25, 0x05	; 5
     51c:	9c 7f       	andi	r25, 0xFC	; 252
     51e:	95 b9       	out	0x05, r25	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
     520:	9b b1       	in	r25, 0x0b	; 11
     522:	93 70       	andi	r25, 0x03	; 3
     524:	9b b9       	out	0x0b, r25	; 11
	
	PORTB |= (data & 0x03);
     526:	25 b1       	in	r18, 0x05	; 5
     528:	98 2f       	mov	r25, r24
     52a:	93 70       	andi	r25, 0x03	; 3
     52c:	92 2b       	or	r25, r18
     52e:	95 b9       	out	0x05, r25	; 5
	PORTD |= (data & 0xFC);
     530:	9b b1       	in	r25, 0x0b	; 11
     532:	8c 7f       	andi	r24, 0xFC	; 252
     534:	98 2b       	or	r25, r24
     536:	9b b9       	out	0x0b, r25	; 11
     538:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     53a:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     53c:	8f 5f       	subi	r24, 0xFF	; 255
     53e:	8e 31       	cpi	r24, 0x1E	; 30
     540:	e1 f7       	brne	.-8      	; 0x53a <write_byte+0x22>
	set_data(byte);
	
	delay();
	//y address increments after every write
	//write data, CS1, left half of screen
	if (side == 1) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
     542:	61 30       	cpi	r22, 0x01	; 1
     544:	d9 f0       	breq	.+54     	; 0x57c <write_byte+0x64>
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS2));//down
     546:	62 30       	cpi	r22, 0x02	; 2
     548:	a9 f0       	breq	.+42     	; 0x574 <write_byte+0x5c>
     54a:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     54c:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     54e:	8f 5f       	subi	r24, 0xFF	; 255
     550:	8e 31       	cpi	r24, 0x1E	; 30
     552:	e1 f7       	brne	.-8      	; 0x54c <write_byte+0x34>
	//y address increments after every write
	//write data, CS1, left half of screen
	if (side == 1) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS2));//down
	delay();
	PORTC |= (1 << EN);//up
     554:	40 9a       	sbi	0x08, 0	; 8
     556:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     558:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	8e 31       	cpi	r24, 0x1E	; 30
     55e:	e1 f7       	brne	.-8      	; 0x558 <write_byte+0x40>
	if (side == 1) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS2));//down
	delay();
	PORTC |= (1 << EN);//up
	delay();
	PORTC &= ~(1 << EN);//down
     560:	40 98       	cbi	0x08, 0	; 8
     562:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     564:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	8e 31       	cpi	r24, 0x1E	; 30
     56a:	e1 f7       	brne	.-8      	; 0x564 <write_byte+0x4c>
	delay();
	PORTC |= (1 << EN);//up
	delay();
	PORTC &= ~(1 << EN);//down
	delay();
	PORTC |= ((1 << EN) | (1 << R_W) | (1 << CS1) | (1 << CS2));//all high
     56c:	88 b1       	in	r24, 0x08	; 8
     56e:	85 63       	ori	r24, 0x35	; 53
     570:	88 b9       	out	0x08, r24	; 8
	
	
}
     572:	08 95       	ret
	
	delay();
	//y address increments after every write
	//write data, CS1, left half of screen
	if (side == 1) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS2));//down
     574:	88 b1       	in	r24, 0x08	; 8
     576:	8a 7d       	andi	r24, 0xDA	; 218
     578:	88 b9       	out	0x08, r24	; 8
     57a:	e7 cf       	rjmp	.-50     	; 0x54a <write_byte+0x32>
	set_data(byte);
	
	delay();
	//y address increments after every write
	//write data, CS1, left half of screen
	if (side == 1) PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
     57c:	88 b1       	in	r24, 0x08	; 8
     57e:	8a 7e       	andi	r24, 0xEA	; 234
     580:	88 b9       	out	0x08, r24	; 8
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	e3 cf       	rjmp	.-58     	; 0x54c <write_byte+0x34>

00000586 <display_on>:
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
     586:	85 b1       	in	r24, 0x05	; 5
     588:	8c 7f       	andi	r24, 0xFC	; 252
     58a:	85 b9       	out	0x05, r24	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
     58c:	8b b1       	in	r24, 0x0b	; 11
     58e:	83 70       	andi	r24, 0x03	; 3
     590:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (data & 0x03);
     592:	85 b1       	in	r24, 0x05	; 5
     594:	83 60       	ori	r24, 0x03	; 3
     596:	85 b9       	out	0x05, r24	; 5
	PORTD |= (data & 0xFC);
     598:	8b b1       	in	r24, 0x0b	; 11
     59a:	8c 63       	ori	r24, 0x3C	; 60
     59c:	8b b9       	out	0x0b, r24	; 11

//display on
void display_on(void)
{
	set_data(0x3F);
	PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
     59e:	88 b1       	in	r24, 0x08	; 8
     5a0:	88 7f       	andi	r24, 0xF8	; 248
     5a2:	88 b9       	out	0x08, r24	; 8
     5a4:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     5a6:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	8e 31       	cpi	r24, 0x1E	; 30
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <display_on+0x20>
void display_on(void)
{
	set_data(0x3F);
	PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
	delay();
	PORTC |= (1 << EN);//up
     5ae:	40 9a       	sbi	0x08, 0	; 8
     5b0:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     5b2:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     5b4:	8f 5f       	subi	r24, 0xFF	; 255
     5b6:	8e 31       	cpi	r24, 0x1E	; 30
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <display_on+0x2c>
	set_data(0x3F);
	PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
	delay();
	PORTC |= (1 << EN);//up
	delay();
	PORTC &= ~(1 << EN);//down
     5ba:	40 98       	cbi	0x08, 0	; 8
	PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
     5bc:	88 b1       	in	r24, 0x08	; 8
     5be:	87 60       	ori	r24, 0x07	; 7
     5c0:	88 b9       	out	0x08, r24	; 8
	
}
     5c2:	08 95       	ret

000005c4 <read_byte>:
}



char read_byte(char byte, char side)
{
     5c4:	1f 93       	push	r17
     5c6:	16 2f       	mov	r17, r22
	char data1 = 0, data2 = 0;
	
	if (byte == 0) byte = 63;
     5c8:	88 23       	and	r24, r24
     5ca:	09 f0       	breq	.+2      	; 0x5ce <read_byte+0xa>
     5cc:	77 c0       	rjmp	.+238    	; 0x6bc <read_byte+0xf8>
     5ce:	8f e3       	ldi	r24, 0x3F	; 63
	else byte--;
	
	set_x(byte);
     5d0:	0e 94 2b 02 	call	0x456	; 0x456 <set_x>
	
	PORTC |= ((1 << RESET) | (1 << EN) | (1 << R_W) | (1 << CS1) | (1 << CS2) | (1 << RS));//all high, just to make sure
     5d4:	88 b1       	in	r24, 0x08	; 8
     5d6:	8f 63       	ori	r24, 0x3F	; 63
     5d8:	88 b9       	out	0x08, r24	; 8
	
	DDRB &= 0xFC;//PB0 and PB1 as inputs
     5da:	84 b1       	in	r24, 0x04	; 4
     5dc:	8c 7f       	andi	r24, 0xFC	; 252
     5de:	84 b9       	out	0x04, r24	; 4
	DDRD = 0;
     5e0:	1a b8       	out	0x0a, r1	; 10
     5e2:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     5e4:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	8e 31       	cpi	r24, 0x1E	; 30
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <read_byte+0x20>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
	{
		asm volatile ("nop");
     5ee:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	8e 31       	cpi	r24, 0x1E	; 30
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <read_byte+0x2a>
	//PORTD = 0;
	
	delay();
	delay();
	
	if (side == 1) PORTC &= ~((1 << EN) | (1 << CS1));//down
     5f6:	11 30       	cpi	r17, 0x01	; 1
     5f8:	09 f4       	brne	.+2      	; 0x5fc <read_byte+0x38>
     5fa:	6f c0       	rjmp	.+222    	; 0x6da <read_byte+0x116>
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << CS2));//down
     5fc:	12 30       	cpi	r17, 0x02	; 2
     5fe:	09 f4       	brne	.+2      	; 0x602 <read_byte+0x3e>
     600:	63 c0       	rjmp	.+198    	; 0x6c8 <read_byte+0x104>
     602:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     604:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     606:	8f 5f       	subi	r24, 0xFF	; 255
     608:	8e 31       	cpi	r24, 0x1E	; 30
     60a:	e1 f7       	brne	.-8      	; 0x604 <read_byte+0x40>
     60c:	80 e0       	ldi	r24, 0x00	; 0
	{
		asm volatile ("nop");
     60e:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     610:	8f 5f       	subi	r24, 0xFF	; 255
     612:	8e 31       	cpi	r24, 0x1E	; 30
     614:	e1 f7       	brne	.-8      	; 0x60e <read_byte+0x4a>
	
	
	
	delay();
	delay();
	PORTC |= (1 << EN);//up
     616:	40 9a       	sbi	0x08, 0	; 8
     618:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     61a:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     61c:	8f 5f       	subi	r24, 0xFF	; 255
     61e:	8e 31       	cpi	r24, 0x1E	; 30
     620:	e1 f7       	brne	.-8      	; 0x61a <read_byte+0x56>
     622:	80 e0       	ldi	r24, 0x00	; 0
	{
		asm volatile ("nop");
     624:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	8e 31       	cpi	r24, 0x1E	; 30
     62a:	e1 f7       	brne	.-8      	; 0x624 <read_byte+0x60>
	data2 &= 0xFC;
	
	data1 |= data2;
	*/
	
	PORTC &= ~(1 << EN);//down
     62c:	40 98       	cbi	0x08, 0	; 8
     62e:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     630:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	8e 31       	cpi	r24, 0x1E	; 30
     636:	e1 f7       	brne	.-8      	; 0x630 <read_byte+0x6c>
     638:	80 e0       	ldi	r24, 0x00	; 0
	{
		asm volatile ("nop");
     63a:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     63c:	8f 5f       	subi	r24, 0xFF	; 255
     63e:	8e 31       	cpi	r24, 0x1E	; 30
     640:	e1 f7       	brne	.-8      	; 0x63a <read_byte+0x76>
	
	
	delay();
	delay();
	
	PORTC |= ((1 << RESET) | (1 << EN) | (1 << R_W) | (1 << CS1) | (1 << CS2) | (1 << RS));//all high
     642:	88 b1       	in	r24, 0x08	; 8
     644:	8f 63       	ori	r24, 0x3F	; 63
     646:	88 b9       	out	0x08, r24	; 8
     648:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     64a:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     64c:	8f 5f       	subi	r24, 0xFF	; 255
     64e:	8e 31       	cpi	r24, 0x1E	; 30
     650:	e1 f7       	brne	.-8      	; 0x64a <read_byte+0x86>
     652:	80 e0       	ldi	r24, 0x00	; 0
	{
		asm volatile ("nop");
     654:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     656:	8f 5f       	subi	r24, 0xFF	; 255
     658:	8e 31       	cpi	r24, 0x1E	; 30
     65a:	e1 f7       	brne	.-8      	; 0x654 <read_byte+0x90>
	
	delay();
	delay();
	
	//PORTC &= ~((1 << EN) | (1 << CS1));//down
	if (side == 1) PORTC &= ~((1 << EN) | (1 << CS1));//down
     65c:	11 30       	cpi	r17, 0x01	; 1
     65e:	c1 f1       	breq	.+112    	; 0x6d0 <read_byte+0x10c>
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << CS2));//down
     660:	12 30       	cpi	r17, 0x02	; 2
     662:	71 f1       	breq	.+92     	; 0x6c0 <read_byte+0xfc>
     664:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     666:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	8e 31       	cpi	r24, 0x1E	; 30
     66c:	e1 f7       	brne	.-8      	; 0x666 <read_byte+0xa2>
     66e:	80 e0       	ldi	r24, 0x00	; 0
	{
		asm volatile ("nop");
     670:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     672:	8f 5f       	subi	r24, 0xFF	; 255
     674:	8e 31       	cpi	r24, 0x1E	; 30
     676:	e1 f7       	brne	.-8      	; 0x670 <read_byte+0xac>
	
	
	
	delay();
	delay();
	PORTC |= (1 << EN);//up
     678:	40 9a       	sbi	0x08, 0	; 8
     67a:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     67c:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     67e:	8f 5f       	subi	r24, 0xFF	; 255
     680:	8e 31       	cpi	r24, 0x1E	; 30
     682:	e1 f7       	brne	.-8      	; 0x67c <read_byte+0xb8>
     684:	80 e0       	ldi	r24, 0x00	; 0
	{
		asm volatile ("nop");
     686:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     688:	8f 5f       	subi	r24, 0xFF	; 255
     68a:	8e 31       	cpi	r24, 0x1E	; 30
     68c:	e1 f7       	brne	.-8      	; 0x686 <read_byte+0xc2>
	
	//we can read here...

	delay();
	delay();
	data1 = PINB;
     68e:	23 b1       	in	r18, 0x03	; 3
	data1 &= 0x03;
	
	data2 = PIND;
     690:	99 b1       	in	r25, 0x09	; 9
	data2 &= 0xFC;
	
	data1 |= data2;
	//while(1);
	
	PORTC &= ~(1 << EN);//down
     692:	40 98       	cbi	0x08, 0	; 8
	
	//cannot read here...
	//while(1);

	PORTC |= ((1 << RESET) | (1 << EN) | (1 << R_W) | (1 << CS1) | (1 << CS2) | (1 << RS));//all high
     694:	88 b1       	in	r24, 0x08	; 8
     696:	8f 63       	ori	r24, 0x3F	; 63
     698:	88 b9       	out	0x08, r24	; 8

	DDRB |= 0x03; //PB0 and PB1 are outs
     69a:	84 b1       	in	r24, 0x04	; 4
     69c:	83 60       	ori	r24, 0x03	; 3
     69e:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.
     6a0:	8a b1       	in	r24, 0x0a	; 10
     6a2:	8c 6f       	ori	r24, 0xFC	; 252
     6a4:	8a b9       	out	0x0a, r24	; 10
     6a6:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     6a8:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	8e 31       	cpi	r24, 0x1E	; 30
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <read_byte+0xe4>
	//we can read here...

	delay();
	delay();
	data1 = PINB;
	data1 &= 0x03;
     6b0:	23 70       	andi	r18, 0x03	; 3
     6b2:	9c 7f       	andi	r25, 0xFC	; 252
	
	delay();
	
	return data1;

}
     6b4:	89 2f       	mov	r24, r25
     6b6:	82 2b       	or	r24, r18
     6b8:	1f 91       	pop	r17
     6ba:	08 95       	ret
char read_byte(char byte, char side)
{
	char data1 = 0, data2 = 0;
	
	if (byte == 0) byte = 63;
	else byte--;
     6bc:	81 50       	subi	r24, 0x01	; 1
     6be:	88 cf       	rjmp	.-240    	; 0x5d0 <read_byte+0xc>
	delay();
	delay();
	
	//PORTC &= ~((1 << EN) | (1 << CS1));//down
	if (side == 1) PORTC &= ~((1 << EN) | (1 << CS1));//down
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << CS2));//down
     6c0:	88 b1       	in	r24, 0x08	; 8
     6c2:	8e 7d       	andi	r24, 0xDE	; 222
     6c4:	88 b9       	out	0x08, r24	; 8
     6c6:	ce cf       	rjmp	.-100    	; 0x664 <read_byte+0xa0>
	
	delay();
	delay();
	
	if (side == 1) PORTC &= ~((1 << EN) | (1 << CS1));//down
	else if (side == 2) PORTC &= ~((1 << EN) | (1 << CS2));//down
     6c8:	88 b1       	in	r24, 0x08	; 8
     6ca:	8e 7d       	andi	r24, 0xDE	; 222
     6cc:	88 b9       	out	0x08, r24	; 8
     6ce:	99 cf       	rjmp	.-206    	; 0x602 <read_byte+0x3e>
	
	delay();
	delay();
	
	//PORTC &= ~((1 << EN) | (1 << CS1));//down
	if (side == 1) PORTC &= ~((1 << EN) | (1 << CS1));//down
     6d0:	88 b1       	in	r24, 0x08	; 8
     6d2:	8e 7e       	andi	r24, 0xEE	; 238
     6d4:	88 b9       	out	0x08, r24	; 8
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	c6 cf       	rjmp	.-116    	; 0x666 <read_byte+0xa2>
	//PORTD = 0;
	
	delay();
	delay();
	
	if (side == 1) PORTC &= ~((1 << EN) | (1 << CS1));//down
     6da:	88 b1       	in	r24, 0x08	; 8
     6dc:	8e 7e       	andi	r24, 0xEE	; 238
     6de:	88 b9       	out	0x08, r24	; 8
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 cf       	rjmp	.-224    	; 0x604 <read_byte+0x40>

000006e4 <rnd>:

}

//rounds a floar to the nearest int
int rnd(float number)
{
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	7b 01       	movw	r14, r22
     6f2:	8c 01       	movw	r16, r24
	int a;
	float b;
	
	a = number / 1;
     6f4:	0e 94 b5 13 	call	0x276a	; 0x276a <__fixsfsi>
     6f8:	eb 01       	movw	r28, r22
	b = number - a;
	
	if (b >= 0.5) a++;
     6fa:	be 01       	movw	r22, r28
     6fc:	88 27       	eor	r24, r24
     6fe:	77 fd       	sbrc	r23, 7
     700:	80 95       	com	r24
     702:	98 2f       	mov	r25, r24
     704:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__subsf3>
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	40 e0       	ldi	r20, 0x00	; 0
     71a:	5f e3       	ldi	r21, 0x3F	; 63
     71c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__gesf2>
     720:	88 23       	and	r24, r24
     722:	0c f0       	brlt	.+2      	; 0x726 <rnd+0x42>
     724:	21 96       	adiw	r28, 0x01	; 1
	
	return a;

}
     726:	ce 01       	movw	r24, r28
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	ff 90       	pop	r15
     732:	ef 90       	pop	r14
     734:	08 95       	ret

00000736 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
     736:	f9 99       	sbic	0x1f, 1	; 31
     738:	fe cf       	rjmp	.-4      	; 0x736 <EEPROM_write>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
     73a:	92 bd       	out	0x22, r25	; 34
     73c:	81 bd       	out	0x21, r24	; 33
EEDR = ucData;
     73e:	60 bd       	out	0x20, r22	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
     740:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
     742:	f9 9a       	sbi	0x1f, 1	; 31
}
     744:	08 95       	ret

00000746 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
     746:	f9 99       	sbic	0x1f, 1	; 31
     748:	fe cf       	rjmp	.-4      	; 0x746 <EEPROM_read>
;
/* Set up address register */
EEAR = uiAddress;
     74a:	92 bd       	out	0x22, r25	; 34
     74c:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     74e:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
     750:	80 b5       	in	r24, 0x20	; 32
}
     752:	08 95       	ret

00000754 <set_backlight>:

void set_backlight(unsigned char dutycycle)
{
	//Set up Timer 0
	TCCR0A = 0x02;//CTC mode
     754:	22 e0       	ldi	r18, 0x02	; 2
     756:	24 bd       	out	0x24, r18	; 36
	//OCR0A = dutycycle;
	
	//SREG |= 0x80;
	
	
	if(BL_dutycycle >= 100)
     758:	90 91 03 01 	lds	r25, 0x0103
     75c:	94 36       	cpi	r25, 0x64	; 100
     75e:	a0 f4       	brcc	.+40     	; 0x788 <set_backlight+0x34>
		TIMSK0 = 0;//disable timer ints
		
		//Backlight on
		PORTB &= (~(1<<BL_EN));
	}
	else if (BL_dutycycle == 0)
     760:	99 23       	and	r25, r25
     762:	69 f0       	breq	.+26     	; 0x77e <set_backlight+0x2a>
	}
	
	
	else
	{
		TCCR0B = 0;
     764:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
     766:	10 92 6e 00 	sts	0x006E, r1
		
		OCR0A = 100 - BL_dutycycle;
     76a:	84 e6       	ldi	r24, 0x64	; 100
     76c:	89 1b       	sub	r24, r25
     76e:	87 bd       	out	0x27, r24	; 39
		
		TIMSK0 = 0x02;//enable match on A
     770:	20 93 6e 00 	sts	0x006E, r18
		TCCR0B = 0x02;
     774:	25 bd       	out	0x25, r18	; 37
		
		SREG |= 0x80;
     776:	8f b7       	in	r24, 0x3f	; 63
     778:	80 68       	ori	r24, 0x80	; 128
     77a:	8f bf       	out	0x3f, r24	; 63
     77c:	08 95       	ret
		//Backlight on
		PORTB &= (~(1<<BL_EN));
	}
	else if (BL_dutycycle == 0)
	{
		TCCR0B = 0;
     77e:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
     780:	10 92 6e 00 	sts	0x006E, r1
		
		//Backlight off
		PORTB |= (1<<BL_EN);
     784:	2a 9a       	sbi	0x05, 2	; 5
     786:	08 95       	ret
	//SREG |= 0x80;
	
	
	if(BL_dutycycle >= 100)
	{
		TCCR0B = 0;
     788:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
     78a:	10 92 6e 00 	sts	0x006E, r1
		
		//Backlight on
		PORTB &= (~(1<<BL_EN));
     78e:	2a 98       	cbi	0x05, 2	; 5
     790:	08 95       	ret

00000792 <set_baud>:
	line(1, x1, y1, x2, y1);
}


void set_baud(char b)
{
     792:	98 2f       	mov	r25, r24
	if (b == 1) USART_Init( 1000000/2400-1);//4800
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	59 f0       	breq	.+22     	; 0x7ae <set_baud+0x1c>
	else if (b == 2) USART_Init( 1000000/4800-1);//9600
     798:	82 30       	cpi	r24, 0x02	; 2
     79a:	c9 f0       	breq	.+50     	; 0x7ce <set_baud+0x3c>
	else if (b == 3) USART_Init( 1000000/9600-1);//19200
     79c:	83 30       	cpi	r24, 0x03	; 3
     79e:	f9 f0       	breq	.+62     	; 0x7de <set_baud+0x4c>
	else if (b == 4) USART_Init( 1000000/19200-1);//38400
     7a0:	84 30       	cpi	r24, 0x04	; 4
     7a2:	c9 f1       	breq	.+114    	; 0x816 <set_baud+0x84>
	else if (b == 5) USART_Init( 1000000/28800-1);//57600
     7a4:	85 30       	cpi	r24, 0x05	; 5
     7a6:	21 f1       	breq	.+72     	; 0x7f0 <set_baud+0x5e>
	else if (b == 6) USART_Init( 1000000/57600-1);//115200
     7a8:	86 30       	cpi	r24, 0x06	; 6
     7aa:	31 f1       	breq	.+76     	; 0x7f8 <set_baud+0x66>
     7ac:	08 95       	ret
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     7ae:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char)ubrr;
     7b2:	8f e9       	ldi	r24, 0x9F	; 159
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     7b4:	80 93 c4 00 	sts	0x00C4, r24
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
     7be:	88 e9       	ldi	r24, 0x98	; 152
     7c0:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     7c4:	86 e0       	ldi	r24, 0x06	; 6
     7c6:	80 93 c2 00 	sts	0x00C2, r24
	sei();
     7ca:	78 94       	sei
     7cc:	08 95       	ret
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     7ce:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     7d2:	8f ec       	ldi	r24, 0xCF	; 207
     7d4:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     7d8:	90 93 c0 00 	sts	0x00C0, r25
     7dc:	f0 cf       	rjmp	.-32     	; 0x7be <set_baud+0x2c>
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     7de:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     7e2:	87 e6       	ldi	r24, 0x67	; 103
     7e4:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     7e8:	82 e0       	ldi	r24, 0x02	; 2
     7ea:	80 93 c0 00 	sts	0x00C0, r24
     7ee:	e7 cf       	rjmp	.-50     	; 0x7be <set_baud+0x2c>
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     7f0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     7f4:	81 e2       	ldi	r24, 0x21	; 33
     7f6:	de cf       	rjmp	.-68     	; 0x7b4 <set_baud+0x22>
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     7f8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     7fc:	80 e1       	ldi	r24, 0x10	; 16
     7fe:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
     808:	88 e9       	ldi	r24, 0x98	; 152
     80a:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     80e:	90 93 c2 00 	sts	0x00C2, r25
	sei();
     812:	78 94       	sei
     814:	08 95       	ret
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     816:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)ubrr;
     81a:	83 e3       	ldi	r24, 0x33	; 51
     81c:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	80 93 c0 00 	sts	0x00C0, r24
     826:	cb cf       	rjmp	.-106    	; 0x7be <set_baud+0x2c>

00000828 <read>:

//Reads data or status
//for data D_S = 1, for status D_S = 0
//returns the value of the data bus
char read(char D_S)
{
     828:	0f 93       	push	r16
     82a:	1f 93       	push	r17
	char data1 = 0, data2 = 0;
	
	DDRB &= 0xFC;//PB0 and PB1 inputs
     82c:	94 b1       	in	r25, 0x04	; 4
     82e:	9c 7f       	andi	r25, 0xFC	; 252
     830:	94 b9       	out	0x04, r25	; 4
	DDRD &= 0x02;//everything but PD1 as input
     832:	9a b1       	in	r25, 0x0a	; 10
     834:	92 70       	andi	r25, 0x02	; 2
     836:	9a b9       	out	0x0a, r25	; 10
	
	PORTC &= ~((1 << RD) | (1 << CE));//CD high for status
     838:	98 b1       	in	r25, 0x08	; 8
     83a:	99 7f       	andi	r25, 0xF9	; 249
     83c:	98 b9       	out	0x08, r25	; 8
	if (D_S == 1) PORTC &= ~(1 << CD);//CD down for data
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	09 f4       	brne	.+2      	; 0x844 <read+0x1c>
     842:	43 98       	cbi	0x08, 3	; 8
	
	delay_us(2);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
	
	data1 = PINB;
     84a:	03 b1       	in	r16, 0x03	; 3
	data1 &= 0x03;
     84c:	03 70       	andi	r16, 0x03	; 3
	
	data2 = PIND;
     84e:	19 b1       	in	r17, 0x09	; 9
	data2 &= 0xFC;
	
	data1 |= data2;
	
	PORTC |= ((1 << CD) | (1 << RD) | (1 << CE));//all up
     850:	88 b1       	in	r24, 0x08	; 8
     852:	8e 60       	ori	r24, 0x0E	; 14
     854:	88 b9       	out	0x08, r24	; 8
	
	delay_us(2);
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
     85c:	1c 7f       	andi	r17, 0xFC	; 252
	
	return data1;

}
     85e:	81 2f       	mov	r24, r17
     860:	80 2b       	or	r24, r16
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <write>:


//Writes data (D_C = 1) or command (D_C = anything else)
void write(char D_C, char byte)
{
	DDRB |= 0x03; //PB0 and PB1 are outs
     868:	94 b1       	in	r25, 0x04	; 4
     86a:	93 60       	ori	r25, 0x03	; 3
     86c:	94 b9       	out	0x04, r25	; 4
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus
     86e:	9a b1       	in	r25, 0x0a	; 10
     870:	9c 6f       	ori	r25, 0xFC	; 252
     872:	9a b9       	out	0x0a, r25	; 10
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
     874:	95 b1       	in	r25, 0x05	; 5
     876:	9c 7f       	andi	r25, 0xFC	; 252
     878:	95 b9       	out	0x05, r25	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
     87a:	9b b1       	in	r25, 0x0b	; 11
     87c:	93 70       	andi	r25, 0x03	; 3
     87e:	9b b9       	out	0x0b, r25	; 11
	
	PORTB |= (data & 0x03);
     880:	25 b1       	in	r18, 0x05	; 5
     882:	96 2f       	mov	r25, r22
     884:	93 70       	andi	r25, 0x03	; 3
     886:	92 2b       	or	r25, r18
     888:	95 b9       	out	0x05, r25	; 5
	PORTD |= (data & 0xFC);
     88a:	9b b1       	in	r25, 0x0b	; 11
     88c:	6c 7f       	andi	r22, 0xFC	; 252
     88e:	96 2b       	or	r25, r22
     890:	9b b9       	out	0x0b, r25	; 11
	DDRB |= 0x03; //PB0 and PB1 are outs
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus
	
	set_data(byte);
	
	if (D_C == 1) PORTC &= ~((1 << WR) | (1 << CE) | (1 << CD));//down
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	b1 f0       	breq	.+44     	; 0x8c2 <write+0x5a>
	else PORTC &= ~((1 << WR) | (1 << CE));//down
     896:	88 b1       	in	r24, 0x08	; 8
     898:	8a 7f       	andi	r24, 0xFA	; 250
     89a:	88 b9       	out	0x08, r24	; 8
	
	delay_us(2);
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
	PORTC |= ((1 << CD) | (1 << WR) | (1 << CE));//all up
     8a2:	88 b1       	in	r24, 0x08	; 8
     8a4:	8d 60       	ori	r24, 0x0D	; 13
     8a6:	88 b9       	out	0x08, r24	; 8
	delay_us(2);
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>
	DDRB &= 0xFC;//PB0 and PB1 inputs
     8ae:	84 b1       	in	r24, 0x04	; 4
     8b0:	8c 7f       	andi	r24, 0xFC	; 252
     8b2:	84 b9       	out	0x04, r24	; 4
	DDRD &= 0x02;//everything but PD1 as input
     8b4:	8a b1       	in	r24, 0x0a	; 10
     8b6:	82 70       	andi	r24, 0x02	; 2
     8b8:	8a b9       	out	0x0a, r24	; 10
	
	delay_us(2);
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <delay_us>

}
     8c0:	08 95       	ret
	DDRB |= 0x03; //PB0 and PB1 are outs
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus
	
	set_data(byte);
	
	if (D_C == 1) PORTC &= ~((1 << WR) | (1 << CE) | (1 << CD));//down
     8c2:	88 b1       	in	r24, 0x08	; 8
     8c4:	82 7f       	andi	r24, 0xF2	; 242
     8c6:	88 b9       	out	0x08, r24	; 8
     8c8:	e9 cf       	rjmp	.-46     	; 0x89c <write+0x34>

000008ca <pixel>:
	
}
 
//mapping to cartesian coordinates, (0,0) is in the lower left corner, (127,63) is in the upper right
void pixel(char S_R, char x, char y)
{
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	f8 2e       	mov	r15, r24
     8d8:	16 2f       	mov	r17, r22
	static char temp_page, temp_side, temp_x = 0, temp_data1 = 0, temp_data2 = 0;
	short address = 0;
	char byte = 0;
	
	//don't try to print something outside of our range
	if (x > (127 + display*32)) return;
     8da:	50 91 27 01 	lds	r21, 0x0127
     8de:	65 2f       	mov	r22, r21
     8e0:	70 e0       	ldi	r23, 0x00	; 0
     8e2:	21 2f       	mov	r18, r17
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	cb 01       	movw	r24, r22
     8e8:	88 0f       	add	r24, r24
     8ea:	99 1f       	adc	r25, r25
     8ec:	82 95       	swap	r24
     8ee:	92 95       	swap	r25
     8f0:	90 7f       	andi	r25, 0xF0	; 240
     8f2:	98 27       	eor	r25, r24
     8f4:	80 7f       	andi	r24, 0xF0	; 240
     8f6:	98 27       	eor	r25, r24
     8f8:	81 58       	subi	r24, 0x81	; 129
     8fa:	9f 4f       	sbci	r25, 0xFF	; 255
     8fc:	82 17       	cp	r24, r18
     8fe:	93 07       	cpc	r25, r19
     900:	0c f4       	brge	.+2      	; 0x904 <pixel+0x3a>
     902:	60 c0       	rjmp	.+192    	; 0x9c4 <pixel+0xfa>
	if (y > (63 + display*64)) return;
     904:	e4 2f       	mov	r30, r20
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	00 24       	eor	r0, r0
     90a:	76 95       	lsr	r23
     90c:	67 95       	ror	r22
     90e:	07 94       	ror	r0
     910:	76 95       	lsr	r23
     912:	67 95       	ror	r22
     914:	07 94       	ror	r0
     916:	76 2f       	mov	r23, r22
     918:	60 2d       	mov	r22, r0
     91a:	61 5c       	subi	r22, 0xC1	; 193
     91c:	7f 4f       	sbci	r23, 0xFF	; 255
     91e:	6e 17       	cp	r22, r30
     920:	7f 07       	cpc	r23, r31
     922:	0c f4       	brge	.+2      	; 0x926 <pixel+0x5c>
     924:	4f c0       	rjmp	.+158    	; 0x9c4 <pixel+0xfa>
	
	if (reverse == 1) S_R ^= 1;
     926:	80 91 26 01 	lds	r24, 0x0126
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	09 f4       	brne	.+2      	; 0x930 <pixel+0x66>
     92e:	9e c0       	rjmp	.+316    	; 0xa6c <pixel+0x1a2>
	
	if (display == 0)
     930:	55 23       	and	r21, r21
     932:	09 f0       	breq	.+2      	; 0x936 <pixel+0x6c>
     934:	4e c0       	rjmp	.+156    	; 0x9d2 <pixel+0x108>
	{
		if (x >= 64) temp_side = 2, temp_x = x - 64;
     936:	10 34       	cpi	r17, 0x40	; 64
     938:	08 f4       	brcc	.+2      	; 0x93c <pixel+0x72>
     93a:	9e c0       	rjmp	.+316    	; 0xa78 <pixel+0x1ae>
     93c:	82 e0       	ldi	r24, 0x02	; 2
     93e:	80 93 33 01 	sts	0x0133, r24
     942:	10 54       	subi	r17, 0x40	; 64
     944:	10 93 32 01 	sts	0x0132, r17
		else temp_side = 1, temp_x = x;
		
		temp_page = 7 - (y >> 3);
     948:	46 95       	lsr	r20
     94a:	46 95       	lsr	r20
     94c:	46 95       	lsr	r20
     94e:	87 e0       	ldi	r24, 0x07	; 7
     950:	84 1b       	sub	r24, r20
     952:	80 93 34 01 	sts	0x0134, r24
		
		//data = (1 << (y - ((7 - temp_page) * 8)));
		temp_data1 = (1 << (7 - (y - ((7 - temp_page) * 8))));
     956:	27 e0       	ldi	r18, 0x07	; 7
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	a9 01       	movw	r20, r18
     95c:	4e 1b       	sub	r20, r30
     95e:	5f 0b       	sbc	r21, r31
     960:	28 1b       	sub	r18, r24
     962:	31 09       	sbc	r19, r1
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	22 0f       	add	r18, r18
     96a:	33 1f       	adc	r19, r19
     96c:	22 0f       	add	r18, r18
     96e:	33 1f       	adc	r19, r19
     970:	42 0f       	add	r20, r18
     972:	53 1f       	adc	r21, r19
     974:	21 e0       	ldi	r18, 0x01	; 1
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	02 c0       	rjmp	.+4      	; 0x97e <pixel+0xb4>
     97a:	22 0f       	add	r18, r18
     97c:	33 1f       	adc	r19, r19
     97e:	4a 95       	dec	r20
     980:	e2 f7       	brpl	.-8      	; 0x97a <pixel+0xb0>
     982:	12 2f       	mov	r17, r18
     984:	20 93 31 01 	sts	0x0131, r18
		
		set_page(temp_page);
     988:	0e 94 5f 02 	call	0x4be	; 0x4be <set_page>
		set_x(temp_x);
     98c:	00 91 32 01 	lds	r16, 0x0132
     990:	80 2f       	mov	r24, r16
     992:	0e 94 2b 02 	call	0x456	; 0x456 <set_x>
		//set_x(0);
		
		//need to read the existing byte here, then or it with the new byte
		temp_data2 = read_byte(temp_x, temp_side);
     996:	e0 90 33 01 	lds	r14, 0x0133
     99a:	80 2f       	mov	r24, r16
     99c:	6e 2d       	mov	r22, r14
     99e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <read_byte>
     9a2:	80 93 30 01 	sts	0x0130, r24

		if (S_R == 0)
     9a6:	ff 20       	and	r15, r15
     9a8:	09 f0       	breq	.+2      	; 0x9ac <pixel+0xe2>
     9aa:	62 c0       	rjmp	.+196    	; 0xa70 <pixel+0x1a6>
		{
			temp_data1 = ~temp_data1;
     9ac:	10 95       	com	r17
			temp_data1 &= temp_data2;
     9ae:	18 23       	and	r17, r24
     9b0:	10 93 31 01 	sts	0x0131, r17
		}
		
		else temp_data1 |= temp_data2;
		
		set_x(temp_x);//reset this...
     9b4:	80 2f       	mov	r24, r16
     9b6:	0e 94 2b 02 	call	0x456	; 0x456 <set_x>
		
		write_byte(temp_data1, temp_side);
     9ba:	80 91 31 01 	lds	r24, 0x0131
     9be:	6e 2d       	mov	r22, r14
     9c0:	0e 94 8c 02 	call	0x518	; 0x518 <write_byte>
		//set-reset bit
		while(!(read(0) & 3));//read status
		write(0, byte);
	}

}
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	08 95       	ret
		set_x(temp_x);//reset this...
		
		write_byte(temp_data1, temp_side);
	}
	
	else if (display == 1)
     9d2:	51 30       	cpi	r21, 0x01	; 1
     9d4:	b9 f7       	brne	.-18     	; 0x9c4 <pixel+0xfa>
	{
		address = ((127-y) * 20) + (x / 8);
     9d6:	8f e7       	ldi	r24, 0x7F	; 127
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	8e 1b       	sub	r24, r30
     9dc:	9f 0b       	sbc	r25, r31
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	ec 01       	movw	r28, r24
     9e8:	cc 0f       	add	r28, r28
     9ea:	dd 1f       	adc	r29, r29
     9ec:	cc 0f       	add	r28, r28
     9ee:	dd 1f       	adc	r29, r29
     9f0:	c8 0f       	add	r28, r24
     9f2:	d9 1f       	adc	r29, r25
     9f4:	81 2f       	mov	r24, r17
     9f6:	86 95       	lsr	r24
     9f8:	86 95       	lsr	r24
     9fa:	86 95       	lsr	r24
     9fc:	c8 0f       	add	r28, r24
     9fe:	d1 1d       	adc	r29, r1
	
		//set address pointer
		while(!(read(0) & 3));//read status
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	0e 94 14 04 	call	0x828	; 0x828 <read>
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	83 70       	andi	r24, 0x03	; 3
     a0a:	90 70       	andi	r25, 0x00	; 0
     a0c:	89 2b       	or	r24, r25
     a0e:	c1 f3       	breq	.-16     	; 0xa00 <pixel+0x136>
		byte = (char)(address & 0xFF);
	
		write(1, byte);//20 bytes, 160/8
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	6c 2f       	mov	r22, r28
     a14:	0e 94 34 04 	call	0x868	; 0x868 <write>
		
		while(!(read(0) & 3));//read status
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	0e 94 14 04 	call	0x828	; 0x828 <read>
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	83 70       	andi	r24, 0x03	; 3
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	89 2b       	or	r24, r25
     a26:	c1 f3       	breq	.-16     	; 0xa18 <pixel+0x14e>
		byte = (char)((address & 0xFF00) >> 8);
	
		write(1, byte);
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	6d 2f       	mov	r22, r29
     a2c:	0e 94 34 04 	call	0x868	; 0x868 <write>
		
		while(!(read(0) & 3));//read status
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	0e 94 14 04 	call	0x828	; 0x828 <read>
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	83 70       	andi	r24, 0x03	; 3
     a3a:	90 70       	andi	r25, 0x00	; 0
     a3c:	89 2b       	or	r24, r25
     a3e:	c1 f3       	breq	.-16     	; 0xa30 <pixel+0x166>
		write(0, 0x24);
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	64 e2       	ldi	r22, 0x24	; 36
     a44:	0e 94 34 04 	call	0x868	; 0x868 <write>
		
		byte = ~(x % 8);
     a48:	10 95       	com	r17
	
		byte |= 0xF8;
     a4a:	18 6f       	ori	r17, 0xF8	; 248
		if (S_R == 0) byte &= 0xF7;
     a4c:	ff 20       	and	r15, r15
     a4e:	09 f4       	brne	.+2      	; 0xa52 <pixel+0x188>
     a50:	17 7f       	andi	r17, 0xF7	; 247
		
		//set-reset bit
		while(!(read(0) & 3));//read status
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	0e 94 14 04 	call	0x828	; 0x828 <read>
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	83 70       	andi	r24, 0x03	; 3
     a5c:	90 70       	andi	r25, 0x00	; 0
     a5e:	89 2b       	or	r24, r25
     a60:	c1 f3       	breq	.-16     	; 0xa52 <pixel+0x188>
		write(0, byte);
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	61 2f       	mov	r22, r17
     a66:	0e 94 34 04 	call	0x868	; 0x868 <write>
     a6a:	ac cf       	rjmp	.-168    	; 0x9c4 <pixel+0xfa>
	
	//don't try to print something outside of our range
	if (x > (127 + display*32)) return;
	if (y > (63 + display*64)) return;
	
	if (reverse == 1) S_R ^= 1;
     a6c:	f8 26       	eor	r15, r24
     a6e:	60 cf       	rjmp	.-320    	; 0x930 <pixel+0x66>
		{
			temp_data1 = ~temp_data1;
			temp_data1 &= temp_data2;
		}
		
		else temp_data1 |= temp_data2;
     a70:	18 2b       	or	r17, r24
     a72:	10 93 31 01 	sts	0x0131, r17
     a76:	9e cf       	rjmp	.-196    	; 0x9b4 <pixel+0xea>
	if (reverse == 1) S_R ^= 1;
	
	if (display == 0)
	{
		if (x >= 64) temp_side = 2, temp_x = x - 64;
		else temp_side = 1, temp_x = x;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	80 93 33 01 	sts	0x0133, r24
     a7e:	10 93 32 01 	sts	0x0132, r17
     a82:	62 cf       	rjmp	.-316    	; 0x948 <pixel+0x7e>

00000a84 <erase_block>:


//erases a block of the screen. Block is decribed
//by a diagonal line from x, y1 to x2, y2
void erase_block(char x1, char y1, char x2, char y2)
{
     a84:	3f 92       	push	r3
     a86:	4f 92       	push	r4
     a88:	5f 92       	push	r5
     a8a:	6f 92       	push	r6
     a8c:	7f 92       	push	r7
     a8e:	8f 92       	push	r8
     a90:	9f 92       	push	r9
     a92:	af 92       	push	r10
     a94:	bf 92       	push	r11
     a96:	cf 92       	push	r12
     a98:	df 92       	push	r13
     a9a:	ef 92       	push	r14
     a9c:	ff 92       	push	r15
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	a8 2e       	mov	r10, r24
     aa8:	32 2e       	mov	r3, r18
	static signed int temp_x = 0, temp_y = 0;
	
	for (temp_y = y2; temp_y >= y1; temp_y--)
     aaa:	42 2e       	mov	r4, r18
     aac:	55 24       	eor	r5, r5
     aae:	50 92 2d 01 	sts	0x012D, r5
     ab2:	40 92 2c 01 	sts	0x012C, r4
     ab6:	66 2e       	mov	r6, r22
     ab8:	77 24       	eor	r7, r7
     aba:	46 14       	cp	r4, r6
     abc:	57 04       	cpc	r5, r7
     abe:	cc f1       	brlt	.+114    	; 0xb32 <erase_block+0xae>
     ac0:	08 2f       	mov	r16, r24
     ac2:	10 e0       	ldi	r17, 0x00	; 0
     ac4:	e4 2e       	mov	r14, r20
     ac6:	ff 24       	eor	r15, r15
     ac8:	88 24       	eor	r8, r8
     aca:	99 24       	eor	r9, r9


//erases a block of the screen. Block is decribed
//by a diagonal line from x, y1 to x2, y2
void erase_block(char x1, char y1, char x2, char y2)
{
     acc:	68 01       	movw	r12, r16
     ace:	08 94       	sec
     ad0:	c1 1c       	adc	r12, r1
     ad2:	d1 1c       	adc	r13, r1
	static signed int temp_x = 0, temp_y = 0;
	
	for (temp_y = y2; temp_y >= y1; temp_y--)
	{
		for (temp_x = x1; temp_x <= x2; temp_x++)
     ad4:	e0 16       	cp	r14, r16
     ad6:	f1 06       	cpc	r15, r17
     ad8:	f4 f1       	brlt	.+124    	; 0xb56 <erase_block+0xd2>
     ada:	b3 2c       	mov	r11, r3
     adc:	b8 18       	sub	r11, r8
     ade:	c0 e0       	ldi	r28, 0x00	; 0
     ae0:	d0 e0       	ldi	r29, 0x00	; 0
		{
			pixel(0, temp_x, temp_y);
     ae2:	6a 2d       	mov	r22, r10
     ae4:	6c 0f       	add	r22, r28
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	4b 2d       	mov	r20, r11
     aea:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>


//erases a block of the screen. Block is decribed
//by a diagonal line from x, y1 to x2, y2
void erase_block(char x1, char y1, char x2, char y2)
{
     aee:	96 01       	movw	r18, r12
     af0:	2c 0f       	add	r18, r28
     af2:	3d 1f       	adc	r19, r29
     af4:	21 96       	adiw	r28, 0x01	; 1
	static signed int temp_x = 0, temp_y = 0;
	
	for (temp_y = y2; temp_y >= y1; temp_y--)
	{
		for (temp_x = x1; temp_x <= x2; temp_x++)
     af6:	ce 01       	movw	r24, r28
     af8:	80 0f       	add	r24, r16
     afa:	91 1f       	adc	r25, r17
     afc:	e8 16       	cp	r14, r24
     afe:	f9 06       	cpc	r15, r25
     b00:	84 f7       	brge	.-32     	; 0xae2 <erase_block+0x5e>
     b02:	08 94       	sec
     b04:	81 1c       	adc	r8, r1
     b06:	91 1c       	adc	r9, r1
//by a diagonal line from x, y1 to x2, y2
void erase_block(char x1, char y1, char x2, char y2)
{
	static signed int temp_x = 0, temp_y = 0;
	
	for (temp_y = y2; temp_y >= y1; temp_y--)
     b08:	c2 01       	movw	r24, r4
     b0a:	88 19       	sub	r24, r8
     b0c:	99 09       	sbc	r25, r9
     b0e:	86 15       	cp	r24, r6
     b10:	97 05       	cpc	r25, r7
     b12:	04 f7       	brge	.-64     	; 0xad4 <erase_block+0x50>
     b14:	64 18       	sub	r6, r4
     b16:	75 08       	sbc	r7, r5
     b18:	08 94       	sec
     b1a:	41 08       	sbc	r4, r1
     b1c:	51 08       	sbc	r5, r1
     b1e:	64 0c       	add	r6, r4
     b20:	75 1c       	adc	r7, r5
     b22:	70 92 2d 01 	sts	0x012D, r7
     b26:	60 92 2c 01 	sts	0x012C, r6
     b2a:	30 93 2f 01 	sts	0x012F, r19
     b2e:	20 93 2e 01 	sts	0x012E, r18
		}
	}	
	
	

}
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	bf 90       	pop	r11
     b44:	af 90       	pop	r10
     b46:	9f 90       	pop	r9
     b48:	8f 90       	pop	r8
     b4a:	7f 90       	pop	r7
     b4c:	6f 90       	pop	r6
     b4e:	5f 90       	pop	r5
     b50:	4f 90       	pop	r4
     b52:	3f 90       	pop	r3
     b54:	08 95       	ret
{
	static signed int temp_x = 0, temp_y = 0;
	
	for (temp_y = y2; temp_y >= y1; temp_y--)
	{
		for (temp_x = x1; temp_x <= x2; temp_x++)
     b56:	98 01       	movw	r18, r16
     b58:	d4 cf       	rjmp	.-88     	; 0xb02 <erase_block+0x7e>

00000b5a <del_char>:


//Deletes a full character space. Endpoint == 0 for a backwards delete,
//Endpoint != 0 to erase spot for a new character write
void del_char(char endpoint)
{
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
	char a, y;

	if (endpoint == 0)//Backwards delete
     b5e:	88 23       	and	r24, r24
     b60:	09 f0       	breq	.+2      	; 0xb64 <del_char+0xa>
     b62:	43 c0       	rjmp	.+134    	; 0xbea <del_char+0x90>
	{
		if (x_offset <= 5)
     b64:	40 91 24 01 	lds	r20, 0x0124
     b68:	46 30       	cpi	r20, 0x06	; 6
     b6a:	e0 f5       	brcc	.+120    	; 0xbe4 <del_char+0x8a>
		{			
			x_offset += (120 + display*36);
     b6c:	80 91 27 01 	lds	r24, 0x0127
     b70:	68 2f       	mov	r22, r24
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	48 58       	subi	r20, 0x88	; 136
     b76:	cb 01       	movw	r24, r22
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	9c 01       	movw	r18, r24
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	22 0f       	add	r18, r18
     b8c:	33 1f       	adc	r19, r19
     b8e:	82 0f       	add	r24, r18
     b90:	93 1f       	adc	r25, r19
     b92:	48 0f       	add	r20, r24
     b94:	40 93 24 01 	sts	0x0124, r20
			y_offset += 8;
     b98:	40 91 00 01 	lds	r20, 0x0100
     b9c:	48 5f       	subi	r20, 0xF8	; 248
     b9e:	40 93 00 01 	sts	0x0100, r20
			
			if (y_offset > (63 + display*64)) y_offset -= (64 + display*64);
     ba2:	24 2f       	mov	r18, r20
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	cb 01       	movw	r24, r22
     ba8:	00 24       	eor	r0, r0
     baa:	96 95       	lsr	r25
     bac:	87 95       	ror	r24
     bae:	07 94       	ror	r0
     bb0:	96 95       	lsr	r25
     bb2:	87 95       	ror	r24
     bb4:	07 94       	ror	r0
     bb6:	98 2f       	mov	r25, r24
     bb8:	80 2d       	mov	r24, r0
     bba:	cf 96       	adiw	r24, 0x3f	; 63
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	b4 f4       	brge	.+44     	; 0xbee <del_char+0x94>
     bc2:	60 95       	com	r22
     bc4:	70 95       	com	r23
     bc6:	00 24       	eor	r0, r0
     bc8:	76 95       	lsr	r23
     bca:	67 95       	ror	r22
     bcc:	07 94       	ror	r0
     bce:	76 95       	lsr	r23
     bd0:	67 95       	ror	r22
     bd2:	07 94       	ror	r0
     bd4:	76 2f       	mov	r23, r22
     bd6:	60 2d       	mov	r22, r0
     bd8:	84 2f       	mov	r24, r20
     bda:	86 0f       	add	r24, r22
     bdc:	80 93 00 01 	sts	0x0100, r24
     be0:	48 2f       	mov	r20, r24
     be2:	05 c0       	rjmp	.+10     	; 0xbee <del_char+0x94>
		}
		
		else x_offset -= 6;
     be4:	46 50       	subi	r20, 0x06	; 6
     be6:	40 93 24 01 	sts	0x0124, r20
     bea:	40 91 00 01 	lds	r20, 0x0100
	}
	
	for (a = x_offset; a < x_offset + 6; a++)
     bee:	50 91 24 01 	lds	r21, 0x0124
     bf2:	05 2f       	mov	r16, r21
	{					
		for (y = y_offset - 7; y <= y_offset; y++)
     bf4:	14 2f       	mov	r17, r20
     bf6:	17 50       	subi	r17, 0x07	; 7
     bf8:	41 17       	cp	r20, r17
     bfa:	60 f0       	brcs	.+24     	; 0xc14 <del_char+0xba>
		{
			pixel(0, a, y);
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	60 2f       	mov	r22, r16
     c00:	41 2f       	mov	r20, r17
     c02:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
		else x_offset -= 6;
	}
	
	for (a = x_offset; a < x_offset + 6; a++)
	{					
		for (y = y_offset - 7; y <= y_offset; y++)
     c06:	1f 5f       	subi	r17, 0xFF	; 255
     c08:	40 91 00 01 	lds	r20, 0x0100
     c0c:	41 17       	cp	r20, r17
     c0e:	b0 f7       	brcc	.-20     	; 0xbfc <del_char+0xa2>
     c10:	50 91 24 01 	lds	r21, 0x0124
		}
		
		else x_offset -= 6;
	}
	
	for (a = x_offset; a < x_offset + 6; a++)
     c14:	0f 5f       	subi	r16, 0xFF	; 255
     c16:	85 2f       	mov	r24, r21
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	05 96       	adiw	r24, 0x05	; 5
     c1c:	20 2f       	mov	r18, r16
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	82 17       	cp	r24, r18
     c22:	93 07       	cpc	r25, r19
     c24:	3c f7       	brge	.-50     	; 0xbf4 <del_char+0x9a>
			pixel(0, a, y);

		}
	}
	
	if (display == 0) pixel(0,0,0);//cheat
     c26:	80 91 27 01 	lds	r24, 0x0127
     c2a:	88 23       	and	r24, r24
     c2c:	21 f4       	brne	.+8      	; 0xc36 <del_char+0xdc>
     c2e:	60 e0       	ldi	r22, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
}
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	08 95       	ret

00000c3c <line>:
}


//draws (S_R = 1) or erases (S_R = 0) a line from x1, y1 to x2, y2
void line(char S_R, char x1, char y1, char x2, char y2)
{
     c3c:	2f 92       	push	r2
     c3e:	3f 92       	push	r3
     c40:	4f 92       	push	r4
     c42:	5f 92       	push	r5
     c44:	6f 92       	push	r6
     c46:	7f 92       	push	r7
     c48:	8f 92       	push	r8
     c4a:	9f 92       	push	r9
     c4c:	af 92       	push	r10
     c4e:	bf 92       	push	r11
     c50:	cf 92       	push	r12
     c52:	df 92       	push	r13
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	df 93       	push	r29
     c5e:	cf 93       	push	r28
     c60:	cd b7       	in	r28, 0x3d	; 61
     c62:	de b7       	in	r29, 0x3e	; 62
     c64:	2b 97       	sbiw	r28, 0x0b	; 11
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	8d 83       	std	Y+5, r24	; 0x05
     c72:	6e 83       	std	Y+6, r22	; 0x06
     c74:	4f 83       	std	Y+7, r20	; 0x07
     c76:	08 87       	std	Y+8, r16	; 0x08
	float m, q;
	int x_dif, y_dif;
	int a, b, c;
	
	if ((x1 > (127 + display*32)) | (x2 > (127 + display*32))) return;
     c78:	a6 2e       	mov	r10, r22
     c7a:	bb 24       	eor	r11, r11
     c7c:	30 91 27 01 	lds	r19, 0x0127
     c80:	39 87       	std	Y+9, r19	; 0x09
     c82:	43 2f       	mov	r20, r19
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	ca 01       	movw	r24, r20
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	82 95       	swap	r24
     c8e:	92 95       	swap	r25
     c90:	90 7f       	andi	r25, 0xF0	; 240
     c92:	98 27       	eor	r25, r24
     c94:	80 7f       	andi	r24, 0xF0	; 240
     c96:	98 27       	eor	r25, r24
     c98:	81 58       	subi	r24, 0x81	; 129
     c9a:	9f 4f       	sbci	r25, 0xFF	; 255
     c9c:	82 2e       	mov	r8, r18
     c9e:	99 24       	eor	r9, r9
     ca0:	8a 15       	cp	r24, r10
     ca2:	9b 05       	cpc	r25, r11
     ca4:	1c f0       	brlt	.+6      	; 0xcac <line+0x70>
     ca6:	88 15       	cp	r24, r8
     ca8:	99 05       	cpc	r25, r9
     caa:	cc f4       	brge	.+50     	; 0xcde <line+0xa2>
			}
		}
	}
	
	if (display == 0) pixel(0,0,0);//cheat
}
     cac:	2b 96       	adiw	r28, 0x0b	; 11
     cae:	0f b6       	in	r0, 0x3f	; 63
     cb0:	f8 94       	cli
     cb2:	de bf       	out	0x3e, r29	; 62
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	cd bf       	out	0x3d, r28	; 61
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	9f 90       	pop	r9
     cce:	8f 90       	pop	r8
     cd0:	7f 90       	pop	r7
     cd2:	6f 90       	pop	r6
     cd4:	5f 90       	pop	r5
     cd6:	4f 90       	pop	r4
     cd8:	3f 90       	pop	r3
     cda:	2f 90       	pop	r2
     cdc:	08 95       	ret
	float m, q;
	int x_dif, y_dif;
	int a, b, c;
	
	if ((x1 > (127 + display*32)) | (x2 > (127 + display*32))) return;
	if ((y1 > (63 + display*64)) | (y2 > (63 + display*64))) return;
     cde:	8f 81       	ldd	r24, Y+7	; 0x07
     ce0:	28 2e       	mov	r2, r24
     ce2:	33 24       	eor	r3, r3
     ce4:	ca 01       	movw	r24, r20
     ce6:	00 24       	eor	r0, r0
     ce8:	96 95       	lsr	r25
     cea:	87 95       	ror	r24
     cec:	07 94       	ror	r0
     cee:	96 95       	lsr	r25
     cf0:	87 95       	ror	r24
     cf2:	07 94       	ror	r0
     cf4:	98 2f       	mov	r25, r24
     cf6:	80 2d       	mov	r24, r0
     cf8:	cf 96       	adiw	r24, 0x3f	; 63
     cfa:	e0 2f       	mov	r30, r16
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	fc 83       	std	Y+4, r31	; 0x04
     d00:	eb 83       	std	Y+3, r30	; 0x03
     d02:	82 15       	cp	r24, r2
     d04:	93 05       	cpc	r25, r3
     d06:	94 f2       	brlt	.-92     	; 0xcac <line+0x70>
     d08:	8e 17       	cp	r24, r30
     d0a:	9f 07       	cpc	r25, r31
     d0c:	7c f2       	brlt	.-98     	; 0xcac <line+0x70>
	
	x_dif = x2 - x1;
     d0e:	94 01       	movw	r18, r8
     d10:	2a 19       	sub	r18, r10
     d12:	3b 09       	sbc	r19, r11
     d14:	3a 83       	std	Y+2, r19	; 0x02
     d16:	29 83       	std	Y+1, r18	; 0x01
	y_dif = y2 - y1;
     d18:	6f 01       	movw	r12, r30
     d1a:	c2 18       	sub	r12, r2
     d1c:	d3 08       	sbc	r13, r3
	if (y_dif < 0) y_dif *= (-1);
	

	m = (float)(y2 - y1) / (float)(x2 - x1);
     d1e:	b6 01       	movw	r22, r12
     d20:	88 27       	eor	r24, r24
     d22:	77 fd       	sbrc	r23, 7
     d24:	80 95       	com	r24
     d26:	98 2f       	mov	r25, r24
     d28:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     d2c:	7b 01       	movw	r14, r22
     d2e:	8c 01       	movw	r16, r24
     d30:	49 81       	ldd	r20, Y+1	; 0x01
     d32:	5a 81       	ldd	r21, Y+2	; 0x02
     d34:	ba 01       	movw	r22, r20
     d36:	88 27       	eor	r24, r24
     d38:	77 fd       	sbrc	r23, 7
     d3a:	80 95       	com	r24
     d3c:	98 2f       	mov	r25, r24
     d3e:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c8 01       	movw	r24, r16
     d48:	b7 01       	movw	r22, r14
     d4a:	0e 94 4d 13 	call	0x269a	; 0x269a <__divsf3>
     d4e:	2b 01       	movw	r4, r22
     d50:	3c 01       	movw	r6, r24
	
	b = y1-(m*x1);
     d52:	b1 01       	movw	r22, r2
     d54:	88 27       	eor	r24, r24
     d56:	77 fd       	sbrc	r23, 7
     d58:	80 95       	com	r24
     d5a:	98 2f       	mov	r25, r24
     d5c:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     d60:	7b 01       	movw	r14, r22
     d62:	8c 01       	movw	r16, r24
     d64:	b5 01       	movw	r22, r10
     d66:	88 27       	eor	r24, r24
     d68:	77 fd       	sbrc	r23, 7
     d6a:	80 95       	com	r24
     d6c:	98 2f       	mov	r25, r24
     d6e:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     d72:	a3 01       	movw	r20, r6
     d74:	92 01       	movw	r18, r4
     d76:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__mulsf3>
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24
     d7e:	c8 01       	movw	r24, r16
     d80:	b7 01       	movw	r22, r14
     d82:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__subsf3>
     d86:	0e 94 b5 13 	call	0x276a	; 0x276a <__fixsfsi>
     d8a:	9b 01       	movw	r18, r22
	
	if(x_dif >= y_dif)
     d8c:	c6 01       	movw	r24, r12
     d8e:	d7 fc       	sbrc	r13, 7
     d90:	f8 c0       	rjmp	.+496    	; 0xf82 <line+0x346>
     d92:	e9 81       	ldd	r30, Y+1	; 0x01
     d94:	fa 81       	ldd	r31, Y+2	; 0x02
     d96:	e8 17       	cp	r30, r24
     d98:	f9 07       	cpc	r31, r25
     d9a:	0c f0       	brlt	.+2      	; 0xd9e <line+0x162>
     d9c:	5b c0       	rjmp	.+182    	; 0xe54 <line+0x218>
		}
	}
	
	else
	{
		if (y2 > y1)
     d9e:	4f 81       	ldd	r20, Y+7	; 0x07
     da0:	58 85       	ldd	r21, Y+8	; 0x08
     da2:	45 17       	cp	r20, r21
     da4:	08 f0       	brcs	.+2      	; 0xda8 <line+0x16c>
     da6:	96 c0       	rjmp	.+300    	; 0xed4 <line+0x298>
		{
			for (a = y1; a <= y2; a++)
     da8:	8b 81       	ldd	r24, Y+3	; 0x03
     daa:	9c 81       	ldd	r25, Y+4	; 0x04
     dac:	82 15       	cp	r24, r2
     dae:	93 05       	cpc	r25, r3
     db0:	0c f4       	brge	.+2      	; 0xdb4 <line+0x178>
     db2:	86 c0       	rjmp	.+268    	; 0xec0 <line+0x284>
     db4:	41 01       	movw	r8, r2
     db6:	82 1a       	sub	r8, r18
     db8:	93 0a       	sbc	r9, r19
     dba:	cc 24       	eor	r12, r12
     dbc:	dd 24       	eor	r13, r13
     dbe:	17 c0       	rjmp	.+46     	; 0xdee <line+0x1b2>
			{
				if (x_dif == 0) c = x1;
     dc0:	bb 86       	std	Y+11, r11	; 0x0b
     dc2:	aa 86       	std	Y+10, r10	; 0x0a
				{
					q = (((float)(a-b))/m);
					c = rnd(q);
				}
				
				pixel(S_R, (char)c, (char)a);
     dc4:	4f 81       	ldd	r20, Y+7	; 0x07
     dc6:	4c 0d       	add	r20, r12
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	6a 85       	ldd	r22, Y+10	; 0x0a
     dcc:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
     dd0:	08 94       	sec
     dd2:	c1 1c       	adc	r12, r1
     dd4:	d1 1c       	adc	r13, r1
     dd6:	08 94       	sec
     dd8:	81 1c       	adc	r8, r1
     dda:	91 1c       	adc	r9, r1
	
	else
	{
		if (y2 > y1)
		{
			for (a = y1; a <= y2; a++)
     ddc:	c6 01       	movw	r24, r12
     dde:	82 0d       	add	r24, r2
     de0:	93 1d       	adc	r25, r3
     de2:	eb 81       	ldd	r30, Y+3	; 0x03
     de4:	fc 81       	ldd	r31, Y+4	; 0x04
     de6:	e8 17       	cp	r30, r24
     de8:	f9 07       	cpc	r31, r25
     dea:	0c f4       	brge	.+2      	; 0xdee <line+0x1b2>
     dec:	66 c0       	rjmp	.+204    	; 0xeba <line+0x27e>
			{
				if (x_dif == 0) c = x1;
     dee:	e9 81       	ldd	r30, Y+1	; 0x01
     df0:	fa 81       	ldd	r31, Y+2	; 0x02
     df2:	ef 2b       	or	r30, r31
     df4:	29 f3       	breq	.-54     	; 0xdc0 <line+0x184>
				else
				{
					q = (((float)(a-b))/m);
     df6:	b4 01       	movw	r22, r8
     df8:	88 27       	eor	r24, r24
     dfa:	77 fd       	sbrc	r23, 7
     dfc:	80 95       	com	r24
     dfe:	98 2f       	mov	r25, r24
     e00:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     e04:	a3 01       	movw	r20, r6
     e06:	92 01       	movw	r18, r4
     e08:	0e 94 4d 13 	call	0x269a	; 0x269a <__divsf3>
     e0c:	7b 01       	movw	r14, r22
     e0e:	8c 01       	movw	r16, r24
int rnd(float number)
{
	int a;
	float b;
	
	a = number / 1;
     e10:	0e 94 b5 13 	call	0x276a	; 0x276a <__fixsfsi>
     e14:	7b 87       	std	Y+11, r23	; 0x0b
     e16:	6a 87       	std	Y+10, r22	; 0x0a
	b = number - a;
	
	if (b >= 0.5) a++;
     e18:	9b 01       	movw	r18, r22
     e1a:	b9 01       	movw	r22, r18
     e1c:	88 27       	eor	r24, r24
     e1e:	77 fd       	sbrc	r23, 7
     e20:	80 95       	com	r24
     e22:	98 2f       	mov	r25, r24
     e24:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     e28:	9b 01       	movw	r18, r22
     e2a:	ac 01       	movw	r20, r24
     e2c:	c8 01       	movw	r24, r16
     e2e:	b7 01       	movw	r22, r14
     e30:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__subsf3>
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__gesf2>
     e40:	88 23       	and	r24, r24
     e42:	0c f4       	brge	.+2      	; 0xe46 <line+0x20a>
     e44:	bf cf       	rjmp	.-130    	; 0xdc4 <line+0x188>
     e46:	4a 85       	ldd	r20, Y+10	; 0x0a
     e48:	5b 85       	ldd	r21, Y+11	; 0x0b
     e4a:	4f 5f       	subi	r20, 0xFF	; 255
     e4c:	5f 4f       	sbci	r21, 0xFF	; 255
     e4e:	5b 87       	std	Y+11, r21	; 0x0b
     e50:	4a 87       	std	Y+10, r20	; 0x0a
     e52:	b8 cf       	rjmp	.-144    	; 0xdc4 <line+0x188>
	
	b = y1-(m*x1);
	
	if(x_dif >= y_dif)
	{
		for (a = x1; a <= x2; a++)
     e54:	8a 14       	cp	r8, r10
     e56:	9b 04       	cpc	r9, r11
     e58:	9c f1       	brlt	.+102    	; 0xec0 <line+0x284>
     e5a:	b9 01       	movw	r22, r18
     e5c:	88 27       	eor	r24, r24
     e5e:	77 fd       	sbrc	r23, 7
     e60:	80 95       	com	r24
     e62:	98 2f       	mov	r25, r24
     e64:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     e68:	6b 01       	movw	r12, r22
     e6a:	7c 01       	movw	r14, r24
     e6c:	22 24       	eor	r2, r2
     e6e:	33 24       	eor	r3, r3
		{
			pixel(S_R, (char)a, (char)((m*a)+b));
     e70:	1e 81       	ldd	r17, Y+6	; 0x06
     e72:	12 0d       	add	r17, r2
     e74:	b1 01       	movw	r22, r2
     e76:	6a 0d       	add	r22, r10
     e78:	7b 1d       	adc	r23, r11
     e7a:	88 27       	eor	r24, r24
     e7c:	77 fd       	sbrc	r23, 7
     e7e:	80 95       	com	r24
     e80:	98 2f       	mov	r25, r24
     e82:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     e86:	a3 01       	movw	r20, r6
     e88:	92 01       	movw	r18, r4
     e8a:	0e 94 78 14 	call	0x28f0	; 0x28f0 <__mulsf3>
     e8e:	a7 01       	movw	r20, r14
     e90:	96 01       	movw	r18, r12
     e92:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <__addsf3>
     e96:	0e 94 ba 13 	call	0x2774	; 0x2774 <__fixunssfsi>
     e9a:	9b 01       	movw	r18, r22
     e9c:	ac 01       	movw	r20, r24
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	61 2f       	mov	r22, r17
     ea2:	42 2f       	mov	r20, r18
     ea4:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
     ea8:	08 94       	sec
     eaa:	21 1c       	adc	r2, r1
     eac:	31 1c       	adc	r3, r1
	
	b = y1-(m*x1);
	
	if(x_dif >= y_dif)
	{
		for (a = x1; a <= x2; a++)
     eae:	c5 01       	movw	r24, r10
     eb0:	82 0d       	add	r24, r2
     eb2:	93 1d       	adc	r25, r3
     eb4:	88 16       	cp	r8, r24
     eb6:	99 06       	cpc	r9, r25
     eb8:	dc f6       	brge	.-74     	; 0xe70 <line+0x234>
     eba:	f0 91 27 01 	lds	r31, 0x0127
     ebe:	f9 87       	std	Y+9, r31	; 0x09

			}
		}
	}
	
	if (display == 0) pixel(0,0,0);//cheat
     ec0:	29 85       	ldd	r18, Y+9	; 0x09
     ec2:	22 23       	and	r18, r18
     ec4:	09 f0       	breq	.+2      	; 0xec8 <line+0x28c>
     ec6:	f2 ce       	rjmp	.-540    	; 0xcac <line+0x70>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	40 e0       	ldi	r20, 0x00	; 0
     ece:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
     ed2:	ec ce       	rjmp	.-552    	; 0xcac <line+0x70>
				pixel(S_R, (char)c, (char)a);

			}
		}
		
		else if (y1 > y2)
     ed4:	4f 81       	ldd	r20, Y+7	; 0x07
     ed6:	58 85       	ldd	r21, Y+8	; 0x08
     ed8:	54 17       	cp	r21, r20
     eda:	90 f7       	brcc	.-28     	; 0xec0 <line+0x284>
		{
			for (a = y1; a >= y2; a--)
     edc:	8b 81       	ldd	r24, Y+3	; 0x03
     ede:	9c 81       	ldd	r25, Y+4	; 0x04
     ee0:	28 16       	cp	r2, r24
     ee2:	39 06       	cpc	r3, r25
     ee4:	6c f3       	brlt	.-38     	; 0xec0 <line+0x284>
     ee6:	41 01       	movw	r8, r2
     ee8:	82 1a       	sub	r8, r18
     eea:	93 0a       	sbc	r9, r19
     eec:	cc 24       	eor	r12, r12
     eee:	dd 24       	eor	r13, r13
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <line+0x2e2>
			{
				if (x_dif == 0) c = x1;
     ef2:	bb 86       	std	Y+11, r11	; 0x0b
     ef4:	aa 86       	std	Y+10, r10	; 0x0a
				{
					q = (((float)(a-b))/m);
					c = rnd(q);
				}
			
				pixel(S_R, (char)c, (char)a);
     ef6:	4f 81       	ldd	r20, Y+7	; 0x07
     ef8:	4c 19       	sub	r20, r12
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	6a 85       	ldd	r22, Y+10	; 0x0a
     efe:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
     f02:	08 94       	sec
     f04:	c1 1c       	adc	r12, r1
     f06:	d1 1c       	adc	r13, r1
     f08:	08 94       	sec
     f0a:	81 08       	sbc	r8, r1
     f0c:	91 08       	sbc	r9, r1
			}
		}
		
		else if (y1 > y2)
		{
			for (a = y1; a >= y2; a--)
     f0e:	c1 01       	movw	r24, r2
     f10:	8c 19       	sub	r24, r12
     f12:	9d 09       	sbc	r25, r13
     f14:	eb 81       	ldd	r30, Y+3	; 0x03
     f16:	fc 81       	ldd	r31, Y+4	; 0x04
     f18:	8e 17       	cp	r24, r30
     f1a:	9f 07       	cpc	r25, r31
     f1c:	74 f2       	brlt	.-100    	; 0xeba <line+0x27e>
			{
				if (x_dif == 0) c = x1;
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	ef 2b       	or	r30, r31
     f24:	31 f3       	breq	.-52     	; 0xef2 <line+0x2b6>
				else 
				{
					q = (((float)(a-b))/m);
     f26:	b4 01       	movw	r22, r8
     f28:	88 27       	eor	r24, r24
     f2a:	77 fd       	sbrc	r23, 7
     f2c:	80 95       	com	r24
     f2e:	98 2f       	mov	r25, r24
     f30:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     f34:	a3 01       	movw	r20, r6
     f36:	92 01       	movw	r18, r4
     f38:	0e 94 4d 13 	call	0x269a	; 0x269a <__divsf3>
     f3c:	7b 01       	movw	r14, r22
     f3e:	8c 01       	movw	r16, r24
int rnd(float number)
{
	int a;
	float b;
	
	a = number / 1;
     f40:	0e 94 b5 13 	call	0x276a	; 0x276a <__fixsfsi>
     f44:	7b 87       	std	Y+11, r23	; 0x0b
     f46:	6a 87       	std	Y+10, r22	; 0x0a
	b = number - a;
	
	if (b >= 0.5) a++;
     f48:	9b 01       	movw	r18, r22
     f4a:	b9 01       	movw	r22, r18
     f4c:	88 27       	eor	r24, r24
     f4e:	77 fd       	sbrc	r23, 7
     f50:	80 95       	com	r24
     f52:	98 2f       	mov	r25, r24
     f54:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
     f58:	9b 01       	movw	r18, r22
     f5a:	ac 01       	movw	r20, r24
     f5c:	c8 01       	movw	r24, r16
     f5e:	b7 01       	movw	r22, r14
     f60:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__subsf3>
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	5f e3       	ldi	r21, 0x3F	; 63
     f6c:	0e 94 74 14 	call	0x28e8	; 0x28e8 <__gesf2>
     f70:	88 23       	and	r24, r24
     f72:	0c f2       	brlt	.-126    	; 0xef6 <line+0x2ba>
     f74:	4a 85       	ldd	r20, Y+10	; 0x0a
     f76:	5b 85       	ldd	r21, Y+11	; 0x0b
     f78:	4f 5f       	subi	r20, 0xFF	; 255
     f7a:	5f 4f       	sbci	r21, 0xFF	; 255
     f7c:	5b 87       	std	Y+11, r21	; 0x0b
     f7e:	4a 87       	std	Y+10, r20	; 0x0a
     f80:	ba cf       	rjmp	.-140    	; 0xef6 <line+0x2ba>

	m = (float)(y2 - y1) / (float)(x2 - x1);
	
	b = y1-(m*x1);
	
	if(x_dif >= y_dif)
     f82:	90 95       	com	r25
     f84:	81 95       	neg	r24
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	04 cf       	rjmp	.-504    	; 0xd92 <line+0x156>

00000f8a <box>:
}

//draws a box. The box is decribed
//by a diagonal line from x, y1 to x2, y2
void box(char x1, char y1, char x2, char y2)
{
     f8a:	df 92       	push	r13
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	f8 2e       	mov	r15, r24
     f96:	d6 2e       	mov	r13, r22
     f98:	e4 2e       	mov	r14, r20
     f9a:	12 2f       	mov	r17, r18
	
	line(1, x2, y2, x2, y1);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	64 2f       	mov	r22, r20
     fa0:	42 2f       	mov	r20, r18
     fa2:	2e 2d       	mov	r18, r14
     fa4:	0d 2d       	mov	r16, r13
     fa6:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
	line(1, x1, y2, x2, y2);
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	6f 2d       	mov	r22, r15
     fae:	41 2f       	mov	r20, r17
     fb0:	2e 2d       	mov	r18, r14
     fb2:	01 2f       	mov	r16, r17
     fb4:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
	line(1, x1, y2, x1, y1);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	6f 2d       	mov	r22, r15
     fbc:	41 2f       	mov	r20, r17
     fbe:	2f 2d       	mov	r18, r15
     fc0:	0d 2d       	mov	r16, r13
     fc2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
	line(1, x1, y1, x2, y1);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	6f 2d       	mov	r22, r15
     fca:	4d 2d       	mov	r20, r13
     fcc:	2e 2d       	mov	r18, r14
     fce:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
}
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	ff 90       	pop	r15
     fd8:	ef 90       	pop	r14
     fda:	df 90       	pop	r13
     fdc:	08 95       	ret

00000fde <print_char>:


//prints (S_R = 1) or erases (S_R = 0) a character to the screen
//at x_offset, y_offset. Automatically augments offsets for next write
void print_char(char S_R, char txt)
{
     fde:	df 92       	push	r13
     fe0:	ef 92       	push	r14
     fe2:	ff 92       	push	r15
     fe4:	0f 93       	push	r16
     fe6:	1f 93       	push	r17
     fe8:	cf 93       	push	r28
     fea:	df 93       	push	r29
     fec:	d8 2e       	mov	r13, r24
    short text_array_offset = (txt - 32)*5, j;
     fee:	85 e0       	ldi	r24, 0x05	; 5
     ff0:	68 9f       	mul	r22, r24
     ff2:	b0 01       	movw	r22, r0
     ff4:	11 24       	eor	r1, r1
     ff6:	eb 01       	movw	r28, r22
     ff8:	c8 53       	subi	r28, 0x38	; 56
     ffa:	d0 40       	sbci	r29, 0x00	; 0
    char x, k;
	
	
	
    for (j = text_array_offset; j < text_array_offset+5; j++)
     ffc:	0d ec       	ldi	r16, 0xCD	; 205
     ffe:	e0 2e       	mov	r14, r16
    1000:	0f ef       	ldi	r16, 0xFF	; 255
    1002:	f0 2e       	mov	r15, r16
    1004:	e6 0e       	add	r14, r22
    1006:	f7 1e       	adc	r15, r23
    {
		k = pgm_read_byte(&text_array[j]);
    1008:	fe 01       	movw	r30, r28
    100a:	04 91       	lpm	r16, Z+
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	04 c0       	rjmp	.+8      	; 0x1018 <print_char+0x3a>
		
		for (x = 0; x < 8; x++)
    1010:	1f 5f       	subi	r17, 0xFF	; 255
    1012:	18 30       	cpi	r17, 0x08	; 8
    1014:	71 f0       	breq	.+28     	; 0x1032 <print_char+0x54>
		{
			if(k & 0x80) pixel(S_R, x_offset, y_offset - x);
			
			k <<= 1;
    1016:	00 0f       	add	r16, r16
    {
		k = pgm_read_byte(&text_array[j]);
		
		for (x = 0; x < 8; x++)
		{
			if(k & 0x80) pixel(S_R, x_offset, y_offset - x);
    1018:	07 ff       	sbrs	r16, 7
    101a:	fa cf       	rjmp	.-12     	; 0x1010 <print_char+0x32>
    101c:	40 91 00 01 	lds	r20, 0x0100
    1020:	41 1b       	sub	r20, r17
    1022:	8d 2d       	mov	r24, r13
    1024:	60 91 24 01 	lds	r22, 0x0124
    1028:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
	
    for (j = text_array_offset; j < text_array_offset+5; j++)
    {
		k = pgm_read_byte(&text_array[j]);
		
		for (x = 0; x < 8; x++)
    102c:	1f 5f       	subi	r17, 0xFF	; 255
    102e:	18 30       	cpi	r17, 0x08	; 8
    1030:	91 f7       	brne	.-28     	; 0x1016 <print_char+0x38>
			if(k & 0x80) pixel(S_R, x_offset, y_offset - x);
			
			k <<= 1;
		}
			
		x_offset++;
    1032:	20 91 24 01 	lds	r18, 0x0124
    1036:	2f 5f       	subi	r18, 0xFF	; 255
    1038:	20 93 24 01 	sts	0x0124, r18
    103c:	21 96       	adiw	r28, 0x01	; 1
    short text_array_offset = (txt - 32)*5, j;
    char x, k;
	
	
	
    for (j = text_array_offset; j < text_array_offset+5; j++)
    103e:	ce 15       	cp	r28, r14
    1040:	df 05       	cpc	r29, r15
    1042:	11 f7       	brne	.-60     	; 0x1008 <print_char+0x2a>
			
		x_offset++;
		
    }
	
	x_offset++;
    1044:	2f 5f       	subi	r18, 0xFF	; 255
    1046:	20 93 24 01 	sts	0x0124, r18
	
    if ((x_offset + 6) > (127 + display*32))
    104a:	60 91 27 01 	lds	r22, 0x0127
    104e:	46 2f       	mov	r20, r22
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	ca 01       	movw	r24, r20
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	82 95       	swap	r24
    105c:	92 95       	swap	r25
    105e:	90 7f       	andi	r25, 0xF0	; 240
    1060:	98 27       	eor	r25, r24
    1062:	80 7f       	andi	r24, 0xF0	; 240
    1064:	98 27       	eor	r25, r24
    1066:	87 58       	subi	r24, 0x87	; 135
    1068:	9f 4f       	sbci	r25, 0xFF	; 255
    106a:	82 17       	cp	r24, r18
    106c:	93 07       	cpc	r25, r19
    106e:	9c f4       	brge	.+38     	; 0x1096 <print_char+0xb8>
	{
		x_offset = 0;
    1070:	10 92 24 01 	sts	0x0124, r1
		if (y_offset <= 7)
    1074:	80 91 00 01 	lds	r24, 0x0100
    1078:	88 30       	cpi	r24, 0x08	; 8
    107a:	d8 f4       	brcc	.+54     	; 0x10b2 <print_char+0xd4>
		{
			y_offset = 63 + display*64;
    107c:	00 24       	eor	r0, r0
    107e:	56 95       	lsr	r21
    1080:	47 95       	ror	r20
    1082:	07 94       	ror	r0
    1084:	56 95       	lsr	r21
    1086:	47 95       	ror	r20
    1088:	07 94       	ror	r0
    108a:	54 2f       	mov	r21, r20
    108c:	40 2d       	mov	r20, r0
    108e:	84 2f       	mov	r24, r20
    1090:	81 5c       	subi	r24, 0xC1	; 193
    1092:	80 93 00 01 	sts	0x0100, r24
		}
		else y_offset -= 8;
		
	}
	
	if (display == 0) pixel(0,0,0);//cheat for smallo display
    1096:	66 23       	and	r22, r22
    1098:	21 f4       	brne	.+8      	; 0x10a2 <print_char+0xc4>
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	40 e0       	ldi	r20, 0x00	; 0
    109e:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
	
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	08 95       	ret
		if (y_offset <= 7)
		{
			y_offset = 63 + display*64;
			//clear_screen();
		}
		else y_offset -= 8;
    10b2:	88 50       	subi	r24, 0x08	; 8
    10b4:	80 93 00 01 	sts	0x0100, r24
    10b8:	ee cf       	rjmp	.-36     	; 0x1096 <print_char+0xb8>

000010ba <clear_screen>:
	PORTD |= (data & 0xFC);

}

void clear_screen(void)
{
    10ba:	cf 93       	push	r28
    10bc:	df 93       	push	r29
	char x, y;
	int z;
	
	if (display == 0)
    10be:	80 91 27 01 	lds	r24, 0x0127
    10c2:	88 23       	and	r24, r24
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <clear_screen+0xe>
    10c6:	50 c0       	rjmp	.+160    	; 0x1168 <clear_screen+0xae>
		
		x_offset = 0;
		y_offset = 63;
	}
	
	else if (display == 1)
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	09 f0       	breq	.+2      	; 0x10ce <clear_screen+0x14>
    10cc:	f4 c0       	rjmp	.+488    	; 0x12b6 <clear_screen+0x1fc>
	{
		while(!(read(0) & 3));//read status
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 14 04 	call	0x828	; 0x828 <read>
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	83 70       	andi	r24, 0x03	; 3
    10d8:	90 70       	andi	r25, 0x00	; 0
    10da:	89 2b       	or	r24, r25
    10dc:	c1 f3       	breq	.-16     	; 0x10ce <clear_screen+0x14>
		write(1, 0);
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	60 e0       	ldi	r22, 0x00	; 0
    10e2:	0e 94 34 04 	call	0x868	; 0x868 <write>
		while(!(read(0) & 3));//read status
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	0e 94 14 04 	call	0x828	; 0x828 <read>
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	83 70       	andi	r24, 0x03	; 3
    10f0:	90 70       	andi	r25, 0x00	; 0
    10f2:	89 2b       	or	r24, r25
    10f4:	c1 f3       	breq	.-16     	; 0x10e6 <clear_screen+0x2c>
		write(1, 0);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	0e 94 34 04 	call	0x868	; 0x868 <write>
		while(!(read(0) & 3));//read status
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	83 70       	andi	r24, 0x03	; 3
    1108:	90 70       	andi	r25, 0x00	; 0
    110a:	89 2b       	or	r24, r25
    110c:	c1 f3       	breq	.-16     	; 0x10fe <clear_screen+0x44>
		write(0, 0x24);
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	64 e2       	ldi	r22, 0x24	; 36
    1112:	0e 94 34 04 	call	0x868	; 0x868 <write>
    1116:	c0 e0       	ldi	r28, 0x00	; 0
    1118:	d0 e0       	ldi	r29, 0x00	; 0
		
		for(z = 0; z < 0xA00; z++)
		{
			while(!(read(0) & 3));//read status
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	83 70       	andi	r24, 0x03	; 3
    1124:	90 70       	andi	r25, 0x00	; 0
    1126:	89 2b       	or	r24, r25
    1128:	c1 f3       	breq	.-16     	; 0x111a <clear_screen+0x60>
			if (reverse == 1) write(1,0xFF);
    112a:	80 91 26 01 	lds	r24, 0x0126
    112e:	81 30       	cpi	r24, 0x01	; 1
    1130:	09 f4       	brne	.+2      	; 0x1134 <clear_screen+0x7a>
    1132:	d7 c0       	rjmp	.+430    	; 0x12e2 <clear_screen+0x228>
			else if (reverse == 0) write(1, 0);		
    1134:	88 23       	and	r24, r24
    1136:	09 f4       	brne	.+2      	; 0x113a <clear_screen+0x80>
    1138:	cf c0       	rjmp	.+414    	; 0x12d8 <clear_screen+0x21e>
			while(!(read(0) & 3));//read status
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	83 70       	andi	r24, 0x03	; 3
    1144:	90 70       	andi	r25, 0x00	; 0
    1146:	89 2b       	or	r24, r25
    1148:	c1 f3       	breq	.-16     	; 0x113a <clear_screen+0x80>
			write(0, 0xC0);
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	60 ec       	ldi	r22, 0xC0	; 192
    114e:	0e 94 34 04 	call	0x868	; 0x868 <write>
		while(!(read(0) & 3));//read status
		write(1, 0);
		while(!(read(0) & 3));//read status
		write(0, 0x24);
		
		for(z = 0; z < 0xA00; z++)
    1152:	21 96       	adiw	r28, 0x01	; 1
    1154:	8a e0       	ldi	r24, 0x0A	; 10
    1156:	c0 30       	cpi	r28, 0x00	; 0
    1158:	d8 07       	cpc	r29, r24
    115a:	f9 f6       	brne	.-66     	; 0x111a <clear_screen+0x60>
			else if (reverse == 0) write(1, 0);		
			while(!(read(0) & 3));//read status
			write(0, 0xC0);
		}
		
		x_offset = 0;
    115c:	10 92 24 01 	sts	0x0124, r1
		y_offset = 127;
    1160:	8f e7       	ldi	r24, 0x7F	; 127
    1162:	80 93 00 01 	sts	0x0100, r24
    1166:	a7 c0       	rjmp	.+334    	; 0x12b6 <clear_screen+0x1fc>
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1168:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	8e 31       	cpi	r24, 0x1E	; 30
    116e:	e1 f7       	brne	.-8      	; 0x1168 <clear_screen+0xae>
			delay();
			PORTC &= ~(1 << EN);//down
			delay();
			PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
			
			if (reverse == 1) set_data(0xFF);
    1170:	40 91 26 01 	lds	r20, 0x0126
    1174:	30 e0       	ldi	r19, 0x00	; 0
		
		for (x = 0; x < 8; x++)
		{
			//set x address
			//set control lines
			PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
    1176:	88 b1       	in	r24, 0x08	; 8
    1178:	88 7f       	andi	r24, 0xF8	; 248
    117a:	88 b9       	out	0x08, r24	; 8
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
    117c:	85 b1       	in	r24, 0x05	; 5
    117e:	8c 7f       	andi	r24, 0xFC	; 252
    1180:	85 b9       	out	0x05, r24	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
    1182:	8b b1       	in	r24, 0x0b	; 11
    1184:	83 70       	andi	r24, 0x03	; 3
    1186:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (data & 0x03);
    1188:	25 b1       	in	r18, 0x05	; 5
    118a:	93 2f       	mov	r25, r19
    118c:	98 6b       	ori	r25, 0xB8	; 184
    118e:	89 2f       	mov	r24, r25
    1190:	83 70       	andi	r24, 0x03	; 3
    1192:	82 2b       	or	r24, r18
    1194:	85 b9       	out	0x05, r24	; 5
	PORTD |= (data & 0xFC);
    1196:	8b b1       	in	r24, 0x0b	; 11
    1198:	9c 7f       	andi	r25, 0xFC	; 252
    119a:	98 2b       	or	r25, r24
    119c:	9b b9       	out	0x0b, r25	; 11
    119e:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    11a0:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	8e 31       	cpi	r24, 0x1E	; 30
    11a6:	e1 f7       	brne	.-8      	; 0x11a0 <clear_screen+0xe6>
			//set control lines
			PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
			
			set_data(0xB8 | x);
			delay();
			PORTC |= (1 << EN);//up
    11a8:	40 9a       	sbi	0x08, 0	; 8
    11aa:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    11ac:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    11ae:	8f 5f       	subi	r24, 0xFF	; 255
    11b0:	8e 31       	cpi	r24, 0x1E	; 30
    11b2:	e1 f7       	brne	.-8      	; 0x11ac <clear_screen+0xf2>
			
			set_data(0xB8 | x);
			delay();
			PORTC |= (1 << EN);//up
			delay();
			PORTC &= ~(1 << EN);//down
    11b4:	40 98       	cbi	0x08, 0	; 8
    11b6:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    11b8:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    11ba:	8f 5f       	subi	r24, 0xFF	; 255
    11bc:	8e 31       	cpi	r24, 0x1E	; 30
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <clear_screen+0xfe>
			delay();
			PORTC |= (1 << EN);//up
			delay();
			PORTC &= ~(1 << EN);//down
			delay();
			PORTC |= ((1 << EN) | (1 << R_W) |(1 << RS));//all high
    11c0:	88 b1       	in	r24, 0x08	; 8
    11c2:	87 60       	ori	r24, 0x07	; 7
    11c4:	88 b9       	out	0x08, r24	; 8
    11c6:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    11c8:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	8e 31       	cpi	r24, 0x1E	; 30
    11ce:	e1 f7       	brne	.-8      	; 0x11c8 <clear_screen+0x10e>
			
			delay();
			
			//Set y address to zero
			//set control lines
			PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
    11d0:	88 b1       	in	r24, 0x08	; 8
    11d2:	88 7f       	andi	r24, 0xF8	; 248
    11d4:	88 b9       	out	0x08, r24	; 8
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
    11d6:	85 b1       	in	r24, 0x05	; 5
    11d8:	8c 7f       	andi	r24, 0xFC	; 252
    11da:	85 b9       	out	0x05, r24	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
    11dc:	8b b1       	in	r24, 0x0b	; 11
    11de:	83 70       	andi	r24, 0x03	; 3
    11e0:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (data & 0x03);
    11e2:	85 b1       	in	r24, 0x05	; 5
    11e4:	85 b9       	out	0x05, r24	; 5
	PORTD |= (data & 0xFC);
    11e6:	5e 9a       	sbi	0x0b, 6	; 11
    11e8:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    11ea:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    11ec:	8f 5f       	subi	r24, 0xFF	; 255
    11ee:	8e 31       	cpi	r24, 0x1E	; 30
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <clear_screen+0x130>
			//set control lines
			PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
			
			set_data(0x40);
			delay();
			PORTC |= (1 << EN);//up
    11f2:	40 9a       	sbi	0x08, 0	; 8
    11f4:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    11f6:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	8e 31       	cpi	r24, 0x1E	; 30
    11fc:	e1 f7       	brne	.-8      	; 0x11f6 <clear_screen+0x13c>
			
			set_data(0x40);
			delay();
			PORTC |= (1 << EN);//up
			delay();
			PORTC &= ~(1 << EN);//down
    11fe:	40 98       	cbi	0x08, 0	; 8
    1200:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1202:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1204:	8f 5f       	subi	r24, 0xFF	; 255
    1206:	8e 31       	cpi	r24, 0x1E	; 30
    1208:	e1 f7       	brne	.-8      	; 0x1202 <clear_screen+0x148>
			delay();
			PORTC |= (1 << EN);//up
			delay();
			PORTC &= ~(1 << EN);//down
			delay();
			PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
    120a:	88 b1       	in	r24, 0x08	; 8
    120c:	87 60       	ori	r24, 0x07	; 7
    120e:	88 b9       	out	0x08, r24	; 8
			
			if (reverse == 1) set_data(0xFF);
    1210:	41 30       	cpi	r20, 0x01	; 1
    1212:	09 f4       	brne	.+2      	; 0x1216 <clear_screen+0x15c>
    1214:	53 c0       	rjmp	.+166    	; 0x12bc <clear_screen+0x202>
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
    1216:	85 b1       	in	r24, 0x05	; 5
    1218:	8c 7f       	andi	r24, 0xFC	; 252
    121a:	85 b9       	out	0x05, r24	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
    121c:	8b b1       	in	r24, 0x0b	; 11
    121e:	83 70       	andi	r24, 0x03	; 3
    1220:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (data & 0x03);
    1222:	85 b1       	in	r24, 0x05	; 5
    1224:	85 b9       	out	0x05, r24	; 5
	PORTD |= (data & 0xFC);
    1226:	8b b1       	in	r24, 0x0b	; 11
    1228:	8b b9       	out	0x0b, r24	; 11
    122a:	90 e0       	ldi	r25, 0x00	; 0
			PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
			
			if (reverse == 1) set_data(0xFF);
			else set_data(0);
			
			for (y = 0; y < 64; y++)
    122c:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    122e:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	8e 31       	cpi	r24, 0x1E	; 30
    1234:	e1 f7       	brne	.-8      	; 0x122e <clear_screen+0x174>
			for (y = 0; y < 64; y++)
			{
				delay();
				//y address increments after every write
				//write data, CS1, left half of screen
				PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
    1236:	88 b1       	in	r24, 0x08	; 8
    1238:	8a 7e       	andi	r24, 0xEA	; 234
    123a:	88 b9       	out	0x08, r24	; 8
    123c:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    123e:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	8e 31       	cpi	r24, 0x1E	; 30
    1244:	e1 f7       	brne	.-8      	; 0x123e <clear_screen+0x184>
				delay();
				//y address increments after every write
				//write data, CS1, left half of screen
				PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
				delay();
				PORTC |= (1 << EN);//up
    1246:	40 9a       	sbi	0x08, 0	; 8
    1248:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    124a:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    124c:	8f 5f       	subi	r24, 0xFF	; 255
    124e:	8e 31       	cpi	r24, 0x1E	; 30
    1250:	e1 f7       	brne	.-8      	; 0x124a <clear_screen+0x190>
				//write data, CS1, left half of screen
				PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS1));//down
				delay();
				PORTC |= (1 << EN);//up
				delay();
				PORTC &= ~(1 << EN);//down
    1252:	40 98       	cbi	0x08, 0	; 8
    1254:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1256:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	8e 31       	cpi	r24, 0x1E	; 30
    125c:	e1 f7       	brne	.-8      	; 0x1256 <clear_screen+0x19c>
				delay();
				PORTC |= (1 << EN);//up
				delay();
				PORTC &= ~(1 << EN);//down
				delay();
				PORTC |= ((1 << EN) | (1 << R_W) | (1 << CS1));//all high
    125e:	88 b1       	in	r24, 0x08	; 8
    1260:	85 61       	ori	r24, 0x15	; 21
    1262:	88 b9       	out	0x08, r24	; 8
    1264:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1266:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1268:	8f 5f       	subi	r24, 0xFF	; 255
    126a:	8e 31       	cpi	r24, 0x1E	; 30
    126c:	e1 f7       	brne	.-8      	; 0x1266 <clear_screen+0x1ac>
				PORTC |= ((1 << EN) | (1 << R_W) | (1 << CS1));//all high
				
				delay();
				
				//write data, CS2, right half of screen
				PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS2));//down
    126e:	88 b1       	in	r24, 0x08	; 8
    1270:	8a 7d       	andi	r24, 0xDA	; 218
    1272:	88 b9       	out	0x08, r24	; 8
    1274:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1276:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	8e 31       	cpi	r24, 0x1E	; 30
    127c:	e1 f7       	brne	.-8      	; 0x1276 <clear_screen+0x1bc>
				delay();
				
				//write data, CS2, right half of screen
				PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS2));//down
				delay();
				PORTC |= (1 << EN);//up
    127e:	40 9a       	sbi	0x08, 0	; 8
    1280:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1282:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1284:	8f 5f       	subi	r24, 0xFF	; 255
    1286:	8e 31       	cpi	r24, 0x1E	; 30
    1288:	e1 f7       	brne	.-8      	; 0x1282 <clear_screen+0x1c8>
				//write data, CS2, right half of screen
				PORTC &= ~((1 << EN) | (1 << R_W) | (1 << CS2));//down
				delay();
				PORTC |= (1 << EN);//up
				delay();
				PORTC &= ~(1 << EN);//down
    128a:	40 98       	cbi	0x08, 0	; 8
    128c:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    128e:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	8e 31       	cpi	r24, 0x1E	; 30
    1294:	e1 f7       	brne	.-8      	; 0x128e <clear_screen+0x1d4>
				delay();
				PORTC |= (1 << EN);//up
				delay();
				PORTC &= ~(1 << EN);//down
				delay();
				PORTC |= ((1 << EN) | (1 << R_W) | (1 << CS2));//all high
    1296:	88 b1       	in	r24, 0x08	; 8
    1298:	85 62       	ori	r24, 0x25	; 37
    129a:	88 b9       	out	0x08, r24	; 8
			PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
			
			if (reverse == 1) set_data(0xFF);
			else set_data(0);
			
			for (y = 0; y < 64; y++)
    129c:	9f 5f       	subi	r25, 0xFF	; 255
    129e:	90 34       	cpi	r25, 0x40	; 64
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <clear_screen+0x1ea>
    12a2:	c4 cf       	rjmp	.-120    	; 0x122c <clear_screen+0x172>
	
	if (display == 0)
	{
		delay();
		
		for (x = 0; x < 8; x++)
    12a4:	3f 5f       	subi	r19, 0xFF	; 255
    12a6:	38 30       	cpi	r19, 0x08	; 8
    12a8:	09 f0       	breq	.+2      	; 0x12ac <clear_screen+0x1f2>
    12aa:	65 cf       	rjmp	.-310    	; 0x1176 <clear_screen+0xbc>
				PORTC |= ((1 << EN) | (1 << R_W) | (1 << CS2));//all high
			}
			
		}
		
		x_offset = 0;
    12ac:	10 92 24 01 	sts	0x0124, r1
		y_offset = 63;
    12b0:	8f e3       	ldi	r24, 0x3F	; 63
    12b2:	80 93 00 01 	sts	0x0100, r24
		
		x_offset = 0;
		y_offset = 127;
	}

}
    12b6:	df 91       	pop	r29
    12b8:	cf 91       	pop	r28
    12ba:	08 95       	ret
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
    12bc:	85 b1       	in	r24, 0x05	; 5
    12be:	8c 7f       	andi	r24, 0xFC	; 252
    12c0:	85 b9       	out	0x05, r24	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
    12c2:	8b b1       	in	r24, 0x0b	; 11
    12c4:	83 70       	andi	r24, 0x03	; 3
    12c6:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (data & 0x03);
    12c8:	85 b1       	in	r24, 0x05	; 5
    12ca:	83 60       	ori	r24, 0x03	; 3
    12cc:	85 b9       	out	0x05, r24	; 5
	PORTD |= (data & 0xFC);
    12ce:	8b b1       	in	r24, 0x0b	; 11
    12d0:	8c 6f       	ori	r24, 0xFC	; 252
    12d2:	8b b9       	out	0x0b, r24	; 11
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	aa cf       	rjmp	.-172    	; 0x122c <clear_screen+0x172>
		
		for(z = 0; z < 0xA00; z++)
		{
			while(!(read(0) & 3));//read status
			if (reverse == 1) write(1,0xFF);
			else if (reverse == 0) write(1, 0);		
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	0e 94 34 04 	call	0x868	; 0x868 <write>
    12e0:	2c cf       	rjmp	.-424    	; 0x113a <clear_screen+0x80>
		write(0, 0x24);
		
		for(z = 0; z < 0xA00; z++)
		{
			while(!(read(0) & 3));//read status
			if (reverse == 1) write(1,0xFF);
    12e2:	6f ef       	ldi	r22, 0xFF	; 255
    12e4:	0e 94 34 04 	call	0x868	; 0x868 <write>
    12e8:	28 cf       	rjmp	.-432    	; 0x113a <clear_screen+0x80>

000012ea <display_init>:


void display_init(void)
{
	//set graphics home address to 0
	while(!(read(0) & 3));//read status
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	0e 94 14 04 	call	0x828	; 0x828 <read>
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	83 70       	andi	r24, 0x03	; 3
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	89 2b       	or	r24, r25
    12f8:	c1 f3       	breq	.-16     	; 0x12ea <display_init>
	write(1, 0);
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	0e 94 34 04 	call	0x868	; 0x868 <write>
	while(!(read(0) & 3));//read status
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	83 70       	andi	r24, 0x03	; 3
    130c:	90 70       	andi	r25, 0x00	; 0
    130e:	89 2b       	or	r24, r25
    1310:	c1 f3       	breq	.-16     	; 0x1302 <display_init+0x18>
	write(1, 0);
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	0e 94 34 04 	call	0x868	; 0x868 <write>
	while(!(read(0) & 3));//read status
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	83 70       	andi	r24, 0x03	; 3
    1324:	90 70       	andi	r25, 0x00	; 0
    1326:	89 2b       	or	r24, r25
    1328:	c1 f3       	breq	.-16     	; 0x131a <display_init+0x30>
	write(0, 0x42);
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	62 e4       	ldi	r22, 0x42	; 66
    132e:	0e 94 34 04 	call	0x868	; 0x868 <write>

	//set graphics area
	while(!(read(0) & 3));//read status
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	83 70       	andi	r24, 0x03	; 3
    133c:	90 70       	andi	r25, 0x00	; 0
    133e:	89 2b       	or	r24, r25
    1340:	c1 f3       	breq	.-16     	; 0x1332 <display_init+0x48>
	write(1, 20);//20 bytes, 160/8
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	64 e1       	ldi	r22, 0x14	; 20
    1346:	0e 94 34 04 	call	0x868	; 0x868 <write>
	while(!(read(0) & 3));//read status
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	83 70       	andi	r24, 0x03	; 3
    1354:	90 70       	andi	r25, 0x00	; 0
    1356:	89 2b       	or	r24, r25
    1358:	c1 f3       	breq	.-16     	; 0x134a <display_init+0x60>
	write(1, 0);
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	0e 94 34 04 	call	0x868	; 0x868 <write>
	while(!(read(0) & 3));//read status
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	83 70       	andi	r24, 0x03	; 3
    136c:	90 70       	andi	r25, 0x00	; 0
    136e:	89 2b       	or	r24, r25
    1370:	c1 f3       	breq	.-16     	; 0x1362 <display_init+0x78>
	write(0, 0x43);
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	63 e4       	ldi	r22, 0x43	; 67
    1376:	0e 94 34 04 	call	0x868	; 0x868 <write>
	
	//set mode
	while(!(read(0) & 3));//read status
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	83 70       	andi	r24, 0x03	; 3
    1384:	90 70       	andi	r25, 0x00	; 0
    1386:	89 2b       	or	r24, r25
    1388:	c1 f3       	breq	.-16     	; 0x137a <display_init+0x90>
	write(0, 0x80);//Or, with internal character generator
    138a:	80 e0       	ldi	r24, 0x00	; 0
    138c:	60 e8       	ldi	r22, 0x80	; 128
    138e:	0e 94 34 04 	call	0x868	; 0x868 <write>
	
	//set display mode
	while(!(read(0) & 3));//read status
    1392:	80 e0       	ldi	r24, 0x00	; 0
    1394:	0e 94 14 04 	call	0x828	; 0x828 <read>
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	83 70       	andi	r24, 0x03	; 3
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	89 2b       	or	r24, r25
    13a0:	c1 f3       	breq	.-16     	; 0x1392 <display_init+0xa8>
	write(0, 0x98);//Graphics on
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	68 e9       	ldi	r22, 0x98	; 152
    13a6:	0e 94 34 04 	call	0x868	; 0x868 <write>

}
    13aa:	08 95       	ret

000013ac <circle>:

}

//draws (S_R = 1) or erases (S_R = 0) a circle ar x, y with radius r
void circle(char S_R, int x, int y, int r)
{
    13ac:	2f 92       	push	r2
    13ae:	3f 92       	push	r3
    13b0:	4f 92       	push	r4
    13b2:	5f 92       	push	r5
    13b4:	6f 92       	push	r6
    13b6:	7f 92       	push	r7
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	2c 97       	sbiw	r28, 0x0c	; 12
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
    13e0:	e8 2e       	mov	r14, r24
    13e2:	6b 01       	movw	r12, r22
    13e4:	8a 01       	movw	r16, r20
	int x1 = 0, x2 = 0;
	int x_line = 0, y_line = 0;
	int temp_y;
	int temp_x;
	
	x1 = x - r;
    13e6:	1b 01       	movw	r2, r22
    13e8:	22 1a       	sub	r2, r18
    13ea:	33 0a       	sbc	r3, r19
	x2 = x + r;
    13ec:	c9 01       	movw	r24, r18
    13ee:	86 0f       	add	r24, r22
    13f0:	97 1f       	adc	r25, r23
    13f2:	98 87       	std	Y+8, r25	; 0x08
    13f4:	8f 83       	std	Y+7, r24	; 0x07
	
	for (temp_x = x1; temp_x <= x2; temp_x++)
    13f6:	82 15       	cp	r24, r2
    13f8:	93 05       	cpc	r25, r3
    13fa:	0c f4       	brge	.+2      	; 0x13fe <circle+0x52>
    13fc:	79 c0       	rjmp	.+242    	; 0x14f0 <circle+0x144>
    13fe:	22 9f       	mul	r18, r18
    1400:	f0 01       	movw	r30, r0
    1402:	23 9f       	mul	r18, r19
    1404:	f0 0d       	add	r31, r0
    1406:	32 9f       	mul	r19, r18
    1408:	f0 0d       	add	r31, r0
    140a:	11 24       	eor	r1, r1
    140c:	fe 83       	std	Y+6, r31	; 0x06
    140e:	ed 83       	std	Y+5, r30	; 0x05
    1410:	ba 01       	movw	r22, r20
    1412:	88 27       	eor	r24, r24
    1414:	77 fd       	sbrc	r23, 7
    1416:	80 95       	com	r24
    1418:	98 2f       	mov	r25, r24
    141a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
    141e:	69 83       	std	Y+1, r22	; 0x01
    1420:	7a 83       	std	Y+2, r23	; 0x02
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	9c 83       	std	Y+4, r25	; 0x04
		temp_y *= (-1);
		
		if (temp_x > x1)
		{
			line(S_R, (char)x_line, (char)y_line, (char)temp_x, (char)temp_y);
			line(S_R, (char)x_line, (char)(2*y - y_line), (char)temp_x, (char)(2*y - temp_y));
    1426:	f0 2f       	mov	r31, r16
    1428:	ff 0f       	add	r31, r31
    142a:	f9 87       	std	Y+9, r31	; 0x09
    142c:	26 01       	movw	r4, r12
    142e:	42 18       	sub	r4, r2
    1430:	53 08       	sbc	r5, r3
    1432:	31 01       	movw	r6, r2
    1434:	6c 18       	sub	r6, r12
    1436:	7d 08       	sbc	r7, r13
    1438:	3c 86       	std	Y+12, r3	; 0x0c
    143a:	2b 86       	std	Y+11, r2	; 0x0b
    143c:	88 24       	eor	r8, r8
    143e:	99 24       	eor	r9, r9
    1440:	aa 24       	eor	r10, r10
    1442:	bb 24       	eor	r11, r11
		}
			
		else 
		{
			pixel(S_R, (char)temp_x, (char)temp_y);
			pixel(S_R, (char)temp_x, (char)(y + y - temp_y));
    1444:	fa 87       	std	Y+10, r31	; 0x0a
    1446:	23 c0       	rjmp	.+70     	; 0x148e <circle+0xe2>
		
		temp_y *= (-1);
		
		if (temp_x > x1)
		{
			line(S_R, (char)x_line, (char)y_line, (char)temp_x, (char)temp_y);
    1448:	8e 2d       	mov	r24, r14
    144a:	68 2d       	mov	r22, r8
    144c:	4a 2d       	mov	r20, r10
    144e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1450:	0c 2d       	mov	r16, r12
    1452:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			line(S_R, (char)x_line, (char)(2*y - y_line), (char)temp_x, (char)(2*y - temp_y));
    1456:	49 85       	ldd	r20, Y+9	; 0x09
    1458:	4a 19       	sub	r20, r10
    145a:	09 85       	ldd	r16, Y+9	; 0x09
    145c:	0c 19       	sub	r16, r12
    145e:	8e 2d       	mov	r24, r14
    1460:	68 2d       	mov	r22, r8
    1462:	2b 85       	ldd	r18, Y+11	; 0x0b
    1464:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
	int temp_x;
	
	x1 = x - r;
	x2 = x + r;
	
	for (temp_x = x1; temp_x <= x2; temp_x++)
    1468:	8b 85       	ldd	r24, Y+11	; 0x0b
    146a:	9c 85       	ldd	r25, Y+12	; 0x0c
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	08 94       	sec
    1470:	41 08       	sbc	r4, r1
    1472:	51 08       	sbc	r5, r1
    1474:	08 94       	sec
    1476:	61 1c       	adc	r6, r1
    1478:	71 1c       	adc	r7, r1
    147a:	56 01       	movw	r10, r12
    147c:	8b 84       	ldd	r8, Y+11	; 0x0b
    147e:	9c 84       	ldd	r9, Y+12	; 0x0c
    1480:	2f 81       	ldd	r18, Y+7	; 0x07
    1482:	38 85       	ldd	r19, Y+8	; 0x08
    1484:	28 17       	cp	r18, r24
    1486:	39 07       	cpc	r19, r25
    1488:	9c f1       	brlt	.+102    	; 0x14f0 <circle+0x144>
    148a:	9c 87       	std	Y+12, r25	; 0x0c
    148c:	8b 87       	std	Y+11, r24	; 0x0b
	{
		temp_y = ((sqrt((r*r) - ((temp_x - x)*(temp_x - x)))) - y);
    148e:	46 9c       	mul	r4, r6
    1490:	b0 01       	movw	r22, r0
    1492:	47 9c       	mul	r4, r7
    1494:	70 0d       	add	r23, r0
    1496:	56 9c       	mul	r5, r6
    1498:	70 0d       	add	r23, r0
    149a:	11 24       	eor	r1, r1
    149c:	8d 81       	ldd	r24, Y+5	; 0x05
    149e:	9e 81       	ldd	r25, Y+6	; 0x06
    14a0:	68 0f       	add	r22, r24
    14a2:	79 1f       	adc	r23, r25
    14a4:	88 27       	eor	r24, r24
    14a6:	77 fd       	sbrc	r23, 7
    14a8:	80 95       	com	r24
    14aa:	98 2f       	mov	r25, r24
    14ac:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__floatsisf>
    14b0:	0e 94 df 14 	call	0x29be	; 0x29be <sqrt>
    14b4:	29 81       	ldd	r18, Y+1	; 0x01
    14b6:	3a 81       	ldd	r19, Y+2	; 0x02
    14b8:	4b 81       	ldd	r20, Y+3	; 0x03
    14ba:	5c 81       	ldd	r21, Y+4	; 0x04
    14bc:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__subsf3>
    14c0:	0e 94 b5 13 	call	0x276a	; 0x276a <__fixsfsi>
		
		temp_y *= (-1);
    14c4:	cc 24       	eor	r12, r12
    14c6:	dd 24       	eor	r13, r13
    14c8:	c6 1a       	sub	r12, r22
    14ca:	d7 0a       	sbc	r13, r23
		
		if (temp_x > x1)
    14cc:	eb 85       	ldd	r30, Y+11	; 0x0b
    14ce:	fc 85       	ldd	r31, Y+12	; 0x0c
    14d0:	2e 16       	cp	r2, r30
    14d2:	3f 06       	cpc	r3, r31
    14d4:	0c f4       	brge	.+2      	; 0x14d8 <circle+0x12c>
    14d6:	b8 cf       	rjmp	.-144    	; 0x1448 <circle+0x9c>
			line(S_R, (char)x_line, (char)(2*y - y_line), (char)temp_x, (char)(2*y - temp_y));
		}
			
		else 
		{
			pixel(S_R, (char)temp_x, (char)temp_y);
    14d8:	8e 2d       	mov	r24, r14
    14da:	6b 85       	ldd	r22, Y+11	; 0x0b
    14dc:	4c 2d       	mov	r20, r12
    14de:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
			pixel(S_R, (char)temp_x, (char)(y + y - temp_y));
    14e2:	4a 85       	ldd	r20, Y+10	; 0x0a
    14e4:	4c 19       	sub	r20, r12
    14e6:	8e 2d       	mov	r24, r14
    14e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ea:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
    14ee:	bc cf       	rjmp	.-136    	; 0x1468 <circle+0xbc>
		x_line = temp_x;
		y_line = temp_y;
		
	}
	
	if (display == 0) pixel(0,0,0);//cheat
    14f0:	80 91 27 01 	lds	r24, 0x0127
    14f4:	88 23       	and	r24, r24
    14f6:	21 f4       	brne	.+8      	; 0x1500 <circle+0x154>
    14f8:	60 e0       	ldi	r22, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
	
}
    1500:	2c 96       	adiw	r28, 0x0c	; 12
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	ff 90       	pop	r15
    1516:	ef 90       	pop	r14
    1518:	df 90       	pop	r13
    151a:	cf 90       	pop	r12
    151c:	bf 90       	pop	r11
    151e:	af 90       	pop	r10
    1520:	9f 90       	pop	r9
    1522:	8f 90       	pop	r8
    1524:	7f 90       	pop	r7
    1526:	6f 90       	pop	r6
    1528:	5f 90       	pop	r5
    152a:	4f 90       	pop	r4
    152c:	3f 90       	pop	r3
    152e:	2f 90       	pop	r2
    1530:	08 95       	ret

00001532 <demo>:
}


//demonstration code
void demo(void)
{
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
	char x, y, temp;
	unsigned char x_endpoint, y_endpoint;
	int q = 0;
	
	x_endpoint = 127 + display*32;
    1544:	80 91 27 01 	lds	r24, 0x0127
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	82 95       	swap	r24
    1550:	92 95       	swap	r25
    1552:	90 7f       	andi	r25, 0xF0	; 240
    1554:	98 27       	eor	r25, r24
    1556:	80 7f       	andi	r24, 0xF0	; 240
    1558:	98 27       	eor	r25, r24
    155a:	6f e7       	ldi	r22, 0x7F	; 127
    155c:	c6 2e       	mov	r12, r22
    155e:	c8 0e       	add	r12, r24
	y_endpoint = 63 + display*64;
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	4f e3       	ldi	r20, 0x3F	; 63
    1566:	d4 2e       	mov	r13, r20
    1568:	d8 0e       	add	r13, r24
		//Logo=================================================================
		q = 0;
		while(q < 30)
		{
			temp = logo[q];
			for (x = (100 + display*40); x < (108 + display*40); x++)
    156a:	38 e2       	ldi	r19, 0x28	; 40
    156c:	b3 2e       	mov	r11, r19
	x_endpoint = 127 + display*32;
	y_endpoint = 63 + display*64;
	
	while(1)
	{	
		x_offset = 0;
    156e:	10 92 24 01 	sts	0x0124, r1
		y_offset = y_endpoint;
    1572:	d0 92 00 01 	sts	0x0100, r13
    1576:	00 e0       	ldi	r16, 0x00	; 0
		
		
		for (y = 0; y < 5; y++)
    1578:	10 e2       	ldi	r17, 0x20	; 32
    157a:	03 c0       	rjmp	.+6      	; 0x1582 <demo+0x50>
		{
			for (x = 32; x < 123; x++)
    157c:	1f 5f       	subi	r17, 0xFF	; 255
    157e:	1b 37       	cpi	r17, 0x7B	; 123
    1580:	b9 f0       	breq	.+46     	; 0x15b0 <demo+0x7e>
			{	
				del_char(1);
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	0e 94 ad 05 	call	0xb5a	; 0xb5a <del_char>
				print_char(1, x);
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	61 2f       	mov	r22, r17
    158c:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
				if (RX_in > 0) return;
    1590:	80 91 28 01 	lds	r24, 0x0128
    1594:	90 91 29 01 	lds	r25, 0x0129
    1598:	89 2b       	or	r24, r25
    159a:	81 f3       	breq	.-32     	; 0x157c <demo+0x4a>
		clear_screen();
		
	}
	

}
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	bf 90       	pop	r11
    15ae:	08 95       	ret
	{	
		x_offset = 0;
		y_offset = y_endpoint;
		
		
		for (y = 0; y < 5; y++)
    15b0:	0f 5f       	subi	r16, 0xFF	; 255
    15b2:	05 30       	cpi	r16, 0x05	; 5
    15b4:	09 f7       	brne	.-62     	; 0x1578 <demo+0x46>
				print_char(1, x);
				if (RX_in > 0) return;
			}
		}
		
		clear_screen();
    15b6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
    15ba:	00 e0       	ldi	r16, 0x00	; 0
		
		for (y = 0; y < 5; y++)
    15bc:	10 e2       	ldi	r17, 0x20	; 32
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <demo+0x94>
		{
			for (x = 32; x < 123; x++)
    15c0:	1f 5f       	subi	r17, 0xFF	; 255
    15c2:	1b 37       	cpi	r17, 0x7B	; 123
    15c4:	b9 f0       	breq	.+46     	; 0x15f4 <demo+0xc2>
			{
				//x_offset += 4;
				y_offset -= 6;
    15c6:	80 91 00 01 	lds	r24, 0x0100
    15ca:	86 50       	subi	r24, 0x06	; 6
    15cc:	80 93 00 01 	sts	0x0100, r24
				if (y_offset <= 8) y_offset = y_endpoint;
    15d0:	89 30       	cpi	r24, 0x09	; 9
    15d2:	10 f4       	brcc	.+4      	; 0x15d8 <demo+0xa6>
    15d4:	d0 92 00 01 	sts	0x0100, r13
				del_char(1);
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	0e 94 ad 05 	call	0xb5a	; 0xb5a <del_char>
				print_char(1, x);
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	61 2f       	mov	r22, r17
    15e2:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
				if (RX_in > 0) return;
    15e6:	80 91 28 01 	lds	r24, 0x0128
    15ea:	90 91 29 01 	lds	r25, 0x0129
    15ee:	89 2b       	or	r24, r25
    15f0:	39 f3       	breq	.-50     	; 0x15c0 <demo+0x8e>
    15f2:	d4 cf       	rjmp	.-88     	; 0x159c <demo+0x6a>
			}
		}
		
		clear_screen();
		
		for (y = 0; y < 5; y++)
    15f4:	0f 5f       	subi	r16, 0xFF	; 255
    15f6:	05 30       	cpi	r16, 0x05	; 5
    15f8:	09 f7       	brne	.-62     	; 0x15bc <demo+0x8a>
				print_char(1, x);
				if (RX_in > 0) return;
			}
		}
		
		clear_screen();
    15fa:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
		
		//draw circles================================
		for (x = 5; x < (64 + display*56); x += 5)
    15fe:	80 91 27 01 	lds	r24, 0x0127
    1602:	68 2f       	mov	r22, r24
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	15 e0       	ldi	r17, 0x05	; 5
    1608:	e5 e0       	ldi	r30, 0x05	; 5
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	1b c0       	rjmp	.+54     	; 0x1644 <demo+0x112>
    160e:	1b 5f       	subi	r17, 0xFB	; 251
    1610:	a0 91 27 01 	lds	r26, 0x0127
    1614:	6a 2f       	mov	r22, r26
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	e1 2f       	mov	r30, r17
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	9b 01       	movw	r18, r22
    161e:	22 0f       	add	r18, r18
    1620:	33 1f       	adc	r19, r19
    1622:	22 0f       	add	r18, r18
    1624:	33 1f       	adc	r19, r19
    1626:	22 0f       	add	r18, r18
    1628:	33 1f       	adc	r19, r19
    162a:	c9 01       	movw	r24, r18
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	82 1b       	sub	r24, r18
    163a:	93 0b       	sbc	r25, r19
    163c:	cf 96       	adiw	r24, 0x3f	; 63
    163e:	8e 17       	cp	r24, r30
    1640:	9f 07       	cpc	r25, r31
    1642:	f4 f0       	brlt	.+60     	; 0x1680 <demo+0x14e>
		{
			circle(1,(64+display*16),(32 + display*32),x);
    1644:	6c 5f       	subi	r22, 0xFC	; 252
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	ab 01       	movw	r20, r22
    164a:	43 50       	subi	r20, 0x03	; 3
    164c:	50 40       	sbci	r21, 0x00	; 0
    164e:	44 0f       	add	r20, r20
    1650:	55 1f       	adc	r21, r21
    1652:	42 95       	swap	r20
    1654:	52 95       	swap	r21
    1656:	50 7f       	andi	r21, 0xF0	; 240
    1658:	54 27       	eor	r21, r20
    165a:	40 7f       	andi	r20, 0xF0	; 240
    165c:	54 27       	eor	r21, r20
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	62 95       	swap	r22
    1662:	72 95       	swap	r23
    1664:	70 7f       	andi	r23, 0xF0	; 240
    1666:	76 27       	eor	r23, r22
    1668:	60 7f       	andi	r22, 0xF0	; 240
    166a:	76 27       	eor	r23, r22
    166c:	9f 01       	movw	r18, r30
    166e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <circle>
			if (RX_in > 0) return;
    1672:	80 91 28 01 	lds	r24, 0x0128
    1676:	90 91 29 01 	lds	r25, 0x0129
    167a:	89 2b       	or	r24, r25
    167c:	41 f2       	breq	.-112    	; 0x160e <demo+0xdc>
    167e:	8e cf       	rjmp	.-228    	; 0x159c <demo+0x6a>
		
		
		//draw lines===================================
		y = y_endpoint;
		
		for (x = 0; x < (x_endpoint); x += (16 + display*4))
    1680:	cc 20       	and	r12, r12
    1682:	09 f4       	brne	.+2      	; 0x1686 <demo+0x154>
    1684:	79 c0       	rjmp	.+242    	; 0x1778 <demo+0x246>
    1686:	fd 2c       	mov	r15, r13
    1688:	10 e0       	ldi	r17, 0x00	; 0
		{
			line(1,0,y,x,0);
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	4f 2d       	mov	r20, r15
    1690:	21 2f       	mov	r18, r17
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y -= (8 + display*8);
    1698:	20 91 27 01 	lds	r18, 0x0127
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	c9 01       	movw	r24, r18
    16a0:	80 95       	com	r24
    16a2:	90 95       	com	r25
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	f8 0e       	add	r15, r24
		
		
		//draw lines===================================
		y = y_endpoint;
		
		for (x = 0; x < (x_endpoint); x += (16 + display*4))
    16b2:	2c 5f       	subi	r18, 0xFC	; 252
    16b4:	3f 4f       	sbci	r19, 0xFF	; 255
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	12 0f       	add	r17, r18
    16c0:	1c 15       	cp	r17, r12
    16c2:	18 f3       	brcs	.-58     	; 0x168a <demo+0x158>
    16c4:	10 e0       	ldi	r17, 0x00	; 0
    16c6:	ff 24       	eor	r15, r15
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
		{
			line(1,x,0,x_endpoint,y);
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	61 2f       	mov	r22, r17
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	2c 2d       	mov	r18, r12
    16d0:	0f 2d       	mov	r16, r15
    16d2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y += (8 + display*8);
    16d6:	80 91 27 01 	lds	r24, 0x0127
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	9c 01       	movw	r18, r24
    16e0:	22 0f       	add	r18, r18
    16e2:	33 1f       	adc	r19, r19
    16e4:	22 0f       	add	r18, r18
    16e6:	33 1f       	adc	r19, r19
    16e8:	22 0f       	add	r18, r18
    16ea:	33 1f       	adc	r19, r19
    16ec:	f2 0e       	add	r15, r18
			y -= (8 + display*8);
		}
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    16ee:	03 96       	adiw	r24, 0x03	; 3
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	18 0f       	add	r17, r24
    16fa:	1c 15       	cp	r17, r12
    16fc:	28 f3       	brcs	.-54     	; 0x16c8 <demo+0x196>
    16fe:	fd 2c       	mov	r15, r13
    1700:	10 e0       	ldi	r17, 0x00	; 0

		y = y_endpoint;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
		{
			line(1,x,y_endpoint,x_endpoint,y);
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	61 2f       	mov	r22, r17
    1706:	4d 2d       	mov	r20, r13
    1708:	2c 2d       	mov	r18, r12
    170a:	0f 2d       	mov	r16, r15
    170c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y -= (8 + display*8);
    1710:	20 91 27 01 	lds	r18, 0x0127
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	c9 01       	movw	r24, r18
    1718:	80 95       	com	r24
    171a:	90 95       	com	r25
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	f8 0e       	add	r15, r24
			y += (8 + display*8);
		}

		y = y_endpoint;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    172a:	2c 5f       	subi	r18, 0xFC	; 252
    172c:	3f 4f       	sbci	r19, 0xFF	; 255
    172e:	22 0f       	add	r18, r18
    1730:	33 1f       	adc	r19, r19
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	12 0f       	add	r17, r18
    1738:	1c 15       	cp	r17, r12
    173a:	18 f3       	brcs	.-58     	; 0x1702 <demo+0x1d0>
    173c:	10 e0       	ldi	r17, 0x00	; 0
    173e:	ff 24       	eor	r15, r15
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
		{
			line(1,0,y,x,y_endpoint);
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	4f 2d       	mov	r20, r15
    1746:	21 2f       	mov	r18, r17
    1748:	0d 2d       	mov	r16, r13
    174a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y += (8 + display*8);
    174e:	a0 91 27 01 	lds	r26, 0x0127
    1752:	8a 2f       	mov	r24, r26
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	01 96       	adiw	r24, 0x01	; 1
    1758:	9c 01       	movw	r18, r24
    175a:	22 0f       	add	r18, r18
    175c:	33 1f       	adc	r19, r19
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	22 0f       	add	r18, r18
    1764:	33 1f       	adc	r19, r19
    1766:	f2 0e       	add	r15, r18
			y -= (8 + display*8);
		}
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    1768:	03 96       	adiw	r24, 0x03	; 3
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	18 0f       	add	r17, r24
    1774:	1c 15       	cp	r17, r12
    1776:	20 f3       	brcs	.-56     	; 0x1740 <demo+0x20e>
		}
		
		
		
		//erase circles================================
		for (x = 5; x < (64 + display*56); x += 5)
    1778:	6a 2f       	mov	r22, r26
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	15 e0       	ldi	r17, 0x05	; 5
    177e:	e5 e0       	ldi	r30, 0x05	; 5
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	1b c0       	rjmp	.+54     	; 0x17ba <demo+0x288>
    1784:	1b 5f       	subi	r17, 0xFB	; 251
    1786:	a0 91 27 01 	lds	r26, 0x0127
    178a:	6a 2f       	mov	r22, r26
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	e1 2f       	mov	r30, r17
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	9b 01       	movw	r18, r22
    1794:	22 0f       	add	r18, r18
    1796:	33 1f       	adc	r19, r19
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	22 0f       	add	r18, r18
    179e:	33 1f       	adc	r19, r19
    17a0:	c9 01       	movw	r24, r18
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	82 1b       	sub	r24, r18
    17b0:	93 0b       	sbc	r25, r19
    17b2:	cf 96       	adiw	r24, 0x3f	; 63
    17b4:	8e 17       	cp	r24, r30
    17b6:	9f 07       	cpc	r25, r31
    17b8:	f4 f0       	brlt	.+60     	; 0x17f6 <demo+0x2c4>
		{
			circle(0,(64+display*16),(32 + display*32),x);
    17ba:	6c 5f       	subi	r22, 0xFC	; 252
    17bc:	7f 4f       	sbci	r23, 0xFF	; 255
    17be:	ab 01       	movw	r20, r22
    17c0:	43 50       	subi	r20, 0x03	; 3
    17c2:	50 40       	sbci	r21, 0x00	; 0
    17c4:	44 0f       	add	r20, r20
    17c6:	55 1f       	adc	r21, r21
    17c8:	42 95       	swap	r20
    17ca:	52 95       	swap	r21
    17cc:	50 7f       	andi	r21, 0xF0	; 240
    17ce:	54 27       	eor	r21, r20
    17d0:	40 7f       	andi	r20, 0xF0	; 240
    17d2:	54 27       	eor	r21, r20
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	62 95       	swap	r22
    17d8:	72 95       	swap	r23
    17da:	70 7f       	andi	r23, 0xF0	; 240
    17dc:	76 27       	eor	r23, r22
    17de:	60 7f       	andi	r22, 0xF0	; 240
    17e0:	76 27       	eor	r23, r22
    17e2:	9f 01       	movw	r18, r30
    17e4:	0e 94 d6 09 	call	0x13ac	; 0x13ac <circle>
			if (RX_in > 0) return;
    17e8:	80 91 28 01 	lds	r24, 0x0128
    17ec:	90 91 29 01 	lds	r25, 0x0129
    17f0:	89 2b       	or	r24, r25
    17f2:	41 f2       	breq	.-112    	; 0x1784 <demo+0x252>
    17f4:	d3 ce       	rjmp	.-602    	; 0x159c <demo+0x6a>
		}

		//erase lines===================================
		y = y_endpoint;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    17f6:	cc 20       	and	r12, r12
    17f8:	09 f4       	brne	.+2      	; 0x17fc <demo+0x2ca>
    17fa:	79 c0       	rjmp	.+242    	; 0x18ee <demo+0x3bc>
    17fc:	fd 2c       	mov	r15, r13
    17fe:	10 e0       	ldi	r17, 0x00	; 0
		{
			line(0,0,y,x,0);
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	4f 2d       	mov	r20, r15
    1806:	21 2f       	mov	r18, r17
    1808:	00 e0       	ldi	r16, 0x00	; 0
    180a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y -= (8 + display*8);
    180e:	20 91 27 01 	lds	r18, 0x0127
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	c9 01       	movw	r24, r18
    1816:	80 95       	com	r24
    1818:	90 95       	com	r25
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	f8 0e       	add	r15, r24
		}

		//erase lines===================================
		y = y_endpoint;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    1828:	2c 5f       	subi	r18, 0xFC	; 252
    182a:	3f 4f       	sbci	r19, 0xFF	; 255
    182c:	22 0f       	add	r18, r18
    182e:	33 1f       	adc	r19, r19
    1830:	22 0f       	add	r18, r18
    1832:	33 1f       	adc	r19, r19
    1834:	12 0f       	add	r17, r18
    1836:	1c 15       	cp	r17, r12
    1838:	18 f3       	brcs	.-58     	; 0x1800 <demo+0x2ce>
    183a:	10 e0       	ldi	r17, 0x00	; 0
    183c:	ff 24       	eor	r15, r15
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
		{
			line(0,x,0,x_endpoint,y);
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	61 2f       	mov	r22, r17
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	2c 2d       	mov	r18, r12
    1846:	0f 2d       	mov	r16, r15
    1848:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y += (8 + display*8);
    184c:	80 91 27 01 	lds	r24, 0x0127
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	01 96       	adiw	r24, 0x01	; 1
    1854:	9c 01       	movw	r18, r24
    1856:	22 0f       	add	r18, r18
    1858:	33 1f       	adc	r19, r19
    185a:	22 0f       	add	r18, r18
    185c:	33 1f       	adc	r19, r19
    185e:	22 0f       	add	r18, r18
    1860:	33 1f       	adc	r19, r19
    1862:	f2 0e       	add	r15, r18
			y -= (8 + display*8);
		}
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    1864:	03 96       	adiw	r24, 0x03	; 3
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	18 0f       	add	r17, r24
    1870:	1c 15       	cp	r17, r12
    1872:	28 f3       	brcs	.-54     	; 0x183e <demo+0x30c>
    1874:	fd 2c       	mov	r15, r13
    1876:	10 e0       	ldi	r17, 0x00	; 0
		
		y = y_endpoint;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
		{
			line(0,x,y_endpoint,x_endpoint,y);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	61 2f       	mov	r22, r17
    187c:	4d 2d       	mov	r20, r13
    187e:	2c 2d       	mov	r18, r12
    1880:	0f 2d       	mov	r16, r15
    1882:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y -= (8 + display*8);
    1886:	20 91 27 01 	lds	r18, 0x0127
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	c9 01       	movw	r24, r18
    188e:	80 95       	com	r24
    1890:	90 95       	com	r25
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	f8 0e       	add	r15, r24
			y += (8 + display*8);
		}
		
		y = y_endpoint;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    18a0:	2c 5f       	subi	r18, 0xFC	; 252
    18a2:	3f 4f       	sbci	r19, 0xFF	; 255
    18a4:	22 0f       	add	r18, r18
    18a6:	33 1f       	adc	r19, r19
    18a8:	22 0f       	add	r18, r18
    18aa:	33 1f       	adc	r19, r19
    18ac:	12 0f       	add	r17, r18
    18ae:	1c 15       	cp	r17, r12
    18b0:	18 f3       	brcs	.-58     	; 0x1878 <demo+0x346>
    18b2:	10 e0       	ldi	r17, 0x00	; 0
    18b4:	ff 24       	eor	r15, r15
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
		{
			line(0,0,y,x,y_endpoint);
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	60 e0       	ldi	r22, 0x00	; 0
    18ba:	4f 2d       	mov	r20, r15
    18bc:	21 2f       	mov	r18, r17
    18be:	0d 2d       	mov	r16, r13
    18c0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
			y += (8 + display*8);
    18c4:	a0 91 27 01 	lds	r26, 0x0127
    18c8:	8a 2f       	mov	r24, r26
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	9c 01       	movw	r18, r24
    18d0:	22 0f       	add	r18, r18
    18d2:	33 1f       	adc	r19, r19
    18d4:	22 0f       	add	r18, r18
    18d6:	33 1f       	adc	r19, r19
    18d8:	22 0f       	add	r18, r18
    18da:	33 1f       	adc	r19, r19
    18dc:	f2 0e       	add	r15, r18
			y -= (8 + display*8);
		}
		
		y = 0;
		
		for (x = 0; x < x_endpoint; x += (16 + display*4))
    18de:	03 96       	adiw	r24, 0x03	; 3
    18e0:	88 0f       	add	r24, r24
    18e2:	99 1f       	adc	r25, r25
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	18 0f       	add	r17, r24
    18ea:	1c 15       	cp	r17, r12
    18ec:	20 f3       	brcs	.-56     	; 0x18b6 <demo+0x384>
		{
			line(0,0,y,x,y_endpoint);
			y += (8 + display*8);
		}
		
		if (RX_in > 0) return;
    18ee:	80 91 28 01 	lds	r24, 0x0128
    18f2:	90 91 29 01 	lds	r25, 0x0129
    18f6:	89 2b       	or	r24, r25
    18f8:	09 f0       	breq	.+2      	; 0x18fc <demo+0x3ca>
    18fa:	50 ce       	rjmp	.-864    	; 0x159c <demo+0x6a>
		
		//Boxes=================================================================
		y = 47 + display*64;
    18fc:	fa 2e       	mov	r15, r26
    18fe:	f2 94       	swap	r15
    1900:	ff 0c       	add	r15, r15
    1902:	ff 0c       	add	r15, r15
    1904:	10 ec       	ldi	r17, 0xC0	; 192
    1906:	f1 22       	and	r15, r17
    1908:	2f e2       	ldi	r18, 0x2F	; 47
    190a:	f2 0e       	add	r15, r18
    190c:	ee 24       	eor	r14, r14
    190e:	1e 2d       	mov	r17, r14
    1910:	10 5f       	subi	r17, 0xF0	; 240
		for (x = 0; x <= (100 + display*40); x += 10)
		{
			erase_block(x, y, x+16, y+16);
    1912:	0f 2d       	mov	r16, r15
    1914:	00 5f       	subi	r16, 0xF0	; 240
    1916:	8e 2d       	mov	r24, r14
    1918:	6f 2d       	mov	r22, r15
    191a:	41 2f       	mov	r20, r17
    191c:	20 2f       	mov	r18, r16
    191e:	0e 94 42 05 	call	0xa84	; 0xa84 <erase_block>
			box(x, y, x+16, y+16);
    1922:	8e 2d       	mov	r24, r14
    1924:	6f 2d       	mov	r22, r15
    1926:	41 2f       	mov	r20, r17
    1928:	20 2f       	mov	r18, r16
    192a:	0e 94 c5 07 	call	0xf8a	; 0xf8a <box>
			y -= (4 + display*3);
    192e:	a0 91 27 01 	lds	r26, 0x0127
    1932:	8a 2f       	mov	r24, r26
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	bc 01       	movw	r22, r24
    1938:	66 0f       	add	r22, r22
    193a:	77 1f       	adc	r23, r23
    193c:	68 0f       	add	r22, r24
    193e:	79 1f       	adc	r23, r25
    1940:	f6 1a       	sub	r15, r22
    1942:	2c ef       	ldi	r18, 0xFC	; 252
    1944:	f2 0e       	add	r15, r18
		
		if (RX_in > 0) return;
		
		//Boxes=================================================================
		y = 47 + display*64;
		for (x = 0; x <= (100 + display*40); x += 10)
    1946:	2a e0       	ldi	r18, 0x0A	; 10
    1948:	e2 0e       	add	r14, r18
    194a:	4e 2d       	mov	r20, r14
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	88 0f       	add	r24, r24
    1950:	99 1f       	adc	r25, r25
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	88 0f       	add	r24, r24
    1958:	99 1f       	adc	r25, r25
    195a:	9c 01       	movw	r18, r24
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	22 0f       	add	r18, r18
    1962:	33 1f       	adc	r19, r19
    1964:	82 0f       	add	r24, r18
    1966:	93 1f       	adc	r25, r19
    1968:	8c 59       	subi	r24, 0x9C	; 156
    196a:	9f 4f       	sbci	r25, 0xFF	; 255
    196c:	84 17       	cp	r24, r20
    196e:	95 07       	cpc	r25, r21
    1970:	74 f6       	brge	.-100    	; 0x190e <demo+0x3dc>
			y -= (4 + display*3);
		}
		
		
		
		y = (22 + display*6);
    1972:	cb 01       	movw	r24, r22
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	96 e1       	ldi	r25, 0x16	; 22
    197a:	f9 2e       	mov	r15, r25
    197c:	f8 0e       	add	r15, r24
    197e:	c5 e0       	ldi	r28, 0x05	; 5
    1980:	d1 e0       	ldi	r29, 0x01	; 1
		//Logo=================================================================
		q = 0;
		while(q < 30)
		{
			temp = logo[q];
    1982:	08 81       	ld	r16, Y
			for (x = (100 + display*40); x < (108 + display*40); x++)
    1984:	ab 9d       	mul	r26, r11
    1986:	c0 01       	movw	r24, r0
    1988:	11 24       	eor	r1, r1
    198a:	68 2f       	mov	r22, r24
    198c:	18 2f       	mov	r17, r24
    198e:	1c 59       	subi	r17, 0x9C	; 156
    1990:	85 59       	subi	r24, 0x95	; 149
    1992:	9f 4f       	sbci	r25, 0xFF	; 255
    1994:	21 2f       	mov	r18, r17
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	82 17       	cp	r24, r18
    199a:	93 07       	cpc	r25, r19
    199c:	74 f4       	brge	.+28     	; 0x19ba <demo+0x488>
    199e:	18 c0       	rjmp	.+48     	; 0x19d0 <demo+0x49e>
    19a0:	1f 5f       	subi	r17, 0xFF	; 255
    19a2:	ab 9d       	mul	r26, r11
    19a4:	a0 01       	movw	r20, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	9a 01       	movw	r18, r20
    19aa:	25 59       	subi	r18, 0x95	; 149
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	81 2f       	mov	r24, r17
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	28 17       	cp	r18, r24
    19b4:	39 07       	cpc	r19, r25
    19b6:	5c f0       	brlt	.+22     	; 0x19ce <demo+0x49c>
			{
				if (temp & 0x80) pixel(1,x,y);
				
				temp <<= 1;
    19b8:	00 0f       	add	r16, r16
		while(q < 30)
		{
			temp = logo[q];
			for (x = (100 + display*40); x < (108 + display*40); x++)
			{
				if (temp & 0x80) pixel(1,x,y);
    19ba:	07 ff       	sbrs	r16, 7
    19bc:	f1 cf       	rjmp	.-30     	; 0x19a0 <demo+0x46e>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	61 2f       	mov	r22, r17
    19c2:	4f 2d       	mov	r20, r15
    19c4:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
    19c8:	a0 91 27 01 	lds	r26, 0x0127
    19cc:	e9 cf       	rjmp	.-46     	; 0x19a0 <demo+0x46e>
				
				temp <<= 1;
    19ce:	64 2f       	mov	r22, r20
			}
			q++;
			temp = logo[q];
    19d0:	09 81       	ldd	r16, Y+1	; 0x01
			for (x = (108 + display*40); x < (116 + display*40); x++)
    19d2:	16 2f       	mov	r17, r22
    19d4:	14 59       	subi	r17, 0x94	; 148
    19d6:	ab 9d       	mul	r26, r11
    19d8:	c0 01       	movw	r24, r0
    19da:	11 24       	eor	r1, r1
    19dc:	8d 58       	subi	r24, 0x8D	; 141
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	21 2f       	mov	r18, r17
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	82 17       	cp	r24, r18
    19e6:	93 07       	cpc	r25, r19
    19e8:	6c f4       	brge	.+26     	; 0x1a04 <demo+0x4d2>
    19ea:	16 c0       	rjmp	.+44     	; 0x1a18 <demo+0x4e6>
    19ec:	1f 5f       	subi	r17, 0xFF	; 255
    19ee:	ab 9d       	mul	r26, r11
    19f0:	c0 01       	movw	r24, r0
    19f2:	11 24       	eor	r1, r1
    19f4:	8d 58       	subi	r24, 0x8D	; 141
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	21 2f       	mov	r18, r17
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	82 17       	cp	r24, r18
    19fe:	93 07       	cpc	r25, r19
    1a00:	5c f0       	brlt	.+22     	; 0x1a18 <demo+0x4e6>
			{
				if (temp & 0x80) pixel(1,x,y);
				
				temp <<= 1;
    1a02:	00 0f       	add	r16, r16
			}
			q++;
			temp = logo[q];
			for (x = (108 + display*40); x < (116 + display*40); x++)
			{
				if (temp & 0x80) pixel(1,x,y);
    1a04:	07 ff       	sbrs	r16, 7
    1a06:	f2 cf       	rjmp	.-28     	; 0x19ec <demo+0x4ba>
    1a08:	81 e0       	ldi	r24, 0x01	; 1
    1a0a:	61 2f       	mov	r22, r17
    1a0c:	4f 2d       	mov	r20, r15
    1a0e:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
    1a12:	a0 91 27 01 	lds	r26, 0x0127
    1a16:	ea cf       	rjmp	.-44     	; 0x19ec <demo+0x4ba>
				
				temp <<= 1;
    1a18:	22 96       	adiw	r28, 0x02	; 2
		
		
		y = (22 + display*6);
		//Logo=================================================================
		q = 0;
		while(q < 30)
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	c3 32       	cpi	r28, 0x23	; 35
    1a1e:	d8 07       	cpc	r29, r24
    1a20:	11 f0       	breq	.+4      	; 0x1a26 <demo+0x4f4>
			{
				if (temp & 0x80) pixel(1,x,y);
				
				temp <<= 1;
			}
			y--;
    1a22:	fa 94       	dec	r15
    1a24:	ae cf       	rjmp	.-164    	; 0x1982 <demo+0x450>
			q++;
		}	
		
		if (display == 0) pixel(0,0,0);
    1a26:	aa 23       	and	r26, r26
    1a28:	29 f4       	brne	.+10     	; 0x1a34 <demo+0x502>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	60 e0       	ldi	r22, 0x00	; 0
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
		
		delay_ms(1000);
    1a34:	88 ee       	ldi	r24, 0xE8	; 232
    1a36:	93 e0       	ldi	r25, 0x03	; 3
    1a38:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <delay_ms>
		reverse ^= 1;
    1a3c:	80 91 26 01 	lds	r24, 0x0126
    1a40:	91 e0       	ldi	r25, 0x01	; 1
    1a42:	89 27       	eor	r24, r25
    1a44:	80 93 26 01 	sts	0x0126, r24
		clear_screen();
    1a48:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
    1a4c:	90 cd       	rjmp	.-1248   	; 0x156e <demo+0x3c>

00001a4e <main>:
	//sei();//Enable Interrupts
}


int main (void)
{
    1a4e:	7f 92       	push	r7
    1a50:	8f 92       	push	r8
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
	char x, y, z, temp, q;
	
	//check for display type
	PORTB |= 0x08;//pullup on PB3
    1a68:	2b 9a       	sbi	0x05, 3	; 5
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1a6c:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	8e 31       	cpi	r24, 0x1E	; 30
    1a72:	e1 f7       	brne	.-8      	; 0x1a6c <main+0x1e>
	
	//check for display type
	PORTB |= 0x08;//pullup on PB3
	delay();
	x = PINB;
	if ((x & 0x08) == 0x08) display = 1;//set up for the big display
    1a74:	1b 9b       	sbis	0x03, 3	; 3
    1a76:	49 c0       	rjmp	.+146    	; 0x1b0a <main+0xbc>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	80 93 27 01 	sts	0x0127, r24
	else display = 0;//small display
	
    ioinit(); //Setup IO pins and defaults
    1a7e:	0e 94 b7 01 	call	0x36e	; 0x36e <ioinit>
	set_baud(6);//115200
    1a82:	86 e0       	ldi	r24, 0x06	; 6
    1a84:	0e 94 c9 03 	call	0x792	; 0x792 <set_baud>
	rprintf_devopen(put_char); /* init rrprintf */
    1a88:	8d e0       	ldi	r24, 0x0D	; 13
    1a8a:	92 e0       	ldi	r25, 0x02	; 2
    1a8c:	0e 94 66 11 	call	0x22cc	; 0x22cc <rprintf_devopen>
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1a90:	f9 99       	sbic	0x1f, 1	; 31
    1a92:	fe cf       	rjmp	.-4      	; 0x1a90 <main+0x42>
;
/* Set up address register */
EEAR = uiAddress;
    1a94:	12 bc       	out	0x22, r1	; 34
    1a96:	11 bc       	out	0x21, r1	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1a98:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1a9a:	90 b5       	in	r25, 0x20	; 32
	rprintf_devopen(put_char); /* init rrprintf */
	
	//check for existing preset values==============================================================
	temp = EEPROM_read((unsigned int)BPS);
	
	if ((temp < 1) | (temp > 6))//BPS will only be 1-6
    1a9c:	89 2f       	mov	r24, r25
    1a9e:	81 50       	subi	r24, 0x01	; 1
    1aa0:	86 30       	cpi	r24, 0x06	; 6
    1aa2:	b0 f1       	brcs	.+108    	; 0x1b10 <main+0xc2>
	{
		cli();//Disable Interrupts
    1aa4:	f8 94       	cli


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1aa6:	f9 99       	sbic	0x1f, 1	; 31
    1aa8:	fe cf       	rjmp	.-4      	; 0x1aa6 <main+0x58>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1aaa:	12 bc       	out	0x22, r1	; 34
    1aac:	11 bc       	out	0x21, r1	; 33
EEDR = ucData;
    1aae:	86 e0       	ldi	r24, 0x06	; 6
    1ab0:	80 bd       	out	0x20, r24	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1ab2:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1ab4:	f9 9a       	sbi	0x1f, 1	; 31


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1ab6:	f9 99       	sbic	0x1f, 1	; 31
    1ab8:	fe cf       	rjmp	.-4      	; 0x1ab6 <main+0x68>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	92 bd       	out	0x22, r25	; 34
    1ac0:	81 bd       	out	0x21, r24	; 33
EEDR = ucData;
    1ac2:	84 e6       	ldi	r24, 0x64	; 100
    1ac4:	80 bd       	out	0x20, r24	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1ac6:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1ac8:	f9 9a       	sbi	0x1f, 1	; 31


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1aca:	f9 99       	sbic	0x1f, 1	; 31
    1acc:	fe cf       	rjmp	.-4      	; 0x1aca <main+0x7c>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	92 bd       	out	0x22, r25	; 34
    1ad4:	81 bd       	out	0x21, r24	; 33
EEDR = ucData;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	80 bd       	out	0x20, r24	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1ada:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1adc:	f9 9a       	sbi	0x1f, 1	; 31


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1ade:	f9 99       	sbic	0x1f, 1	; 31
    1ae0:	fe cf       	rjmp	.-4      	; 0x1ade <main+0x90>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	92 bd       	out	0x22, r25	; 34
    1ae8:	81 bd       	out	0x21, r24	; 33
EEDR = ucData;
    1aea:	10 bc       	out	0x20, r1	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1aec:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1aee:	f9 9a       	sbi	0x1f, 1	; 31
		EEPROM_write((unsigned int) BPS, 6);
		EEPROM_write((unsigned int) BACKLIGHT, 100);
		EEPROM_write((unsigned int) SPLASH, 1);
		EEPROM_write((unsigned int) REV, 0);
		
		sei();//Enable Interrupts
    1af0:	78 94       	sei
		
		BL_dutycycle = 100;
    1af2:	84 e6       	ldi	r24, 0x64	; 100
    1af4:	80 93 03 01 	sts	0x0103, r24
		baud_rate = 6;
    1af8:	86 e0       	ldi	r24, 0x06	; 6
    1afa:	80 93 02 01 	sts	0x0102, r24
		splash_screen = 1;
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	80 93 04 01 	sts	0x0104, r24
		reverse = 0;
    1b04:	10 92 26 01 	sts	0x0126, r1
    1b08:	23 c0       	rjmp	.+70     	; 0x1b50 <main+0x102>
	//check for display type
	PORTB |= 0x08;//pullup on PB3
	delay();
	x = PINB;
	if ((x & 0x08) == 0x08) display = 1;//set up for the big display
	else display = 0;//small display
    1b0a:	10 92 27 01 	sts	0x0127, r1
    1b0e:	b7 cf       	rjmp	.-146    	; 0x1a7e <main+0x30>
		reverse = 0;
	}
	
	else
	{
		baud_rate = temp;
    1b10:	90 93 02 01 	sts	0x0102, r25
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1b14:	f9 99       	sbic	0x1f, 1	; 31
    1b16:	fe cf       	rjmp	.-4      	; 0x1b14 <main+0xc6>
;
/* Set up address register */
EEAR = uiAddress;
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	92 bd       	out	0x22, r25	; 34
    1b1e:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1b20:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1b22:	80 b5       	in	r24, 0x20	; 32
	}
	
	else
	{
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
    1b24:	80 93 03 01 	sts	0x0103, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1b28:	f9 99       	sbic	0x1f, 1	; 31
    1b2a:	fe cf       	rjmp	.-4      	; 0x1b28 <main+0xda>
;
/* Set up address register */
EEAR = uiAddress;
    1b2c:	82 e0       	ldi	r24, 0x02	; 2
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	92 bd       	out	0x22, r25	; 34
    1b32:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1b34:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1b36:	80 b5       	in	r24, 0x20	; 32
	
	else
	{
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
		splash_screen = EEPROM_read((unsigned int)SPLASH);
    1b38:	80 93 04 01 	sts	0x0104, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1b3c:	f9 99       	sbic	0x1f, 1	; 31
    1b3e:	fe cf       	rjmp	.-4      	; 0x1b3c <main+0xee>
;
/* Set up address register */
EEAR = uiAddress;
    1b40:	83 e0       	ldi	r24, 0x03	; 3
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	92 bd       	out	0x22, r25	; 34
    1b46:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1b48:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1b4a:	80 b5       	in	r24, 0x20	; 32
	else
	{
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
		splash_screen = EEPROM_read((unsigned int)SPLASH);
		reverse = EEPROM_read((unsigned int)REV);
    1b4c:	80 93 26 01 	sts	0x0126, r24
	}
	
	
	//Reset the display=================================================
	if (display == 0)
    1b50:	80 91 27 01 	lds	r24, 0x0127
    1b54:	88 23       	and	r24, r24
    1b56:	09 f4       	brne	.+2      	; 0x1b5a <main+0x10c>
    1b58:	7c c3       	rjmp	.+1784   	; 0x2252 <main+0x804>
	
		set_page(0);
		
	}
	
	else if (display == 1)
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	51 f4       	brne	.+20     	; 0x1b72 <main+0x124>
	{
		PORTC &= ~(1 << RST);
    1b5e:	45 98       	cbi	0x08, 5	; 8
		delay_ms(50);
    1b60:	82 e3       	ldi	r24, 0x32	; 50
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <delay_ms>
		PORTC |= (1 << RST);
    1b68:	45 9a       	sbi	0x08, 5	; 8
		
		//initialize the display
		display_init();
    1b6a:	0e 94 75 09 	call	0x12ea	; 0x12ea <display_init>
		
		clear_screen();
    1b6e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
	}


	set_backlight(BL_dutycycle);
    1b72:	80 91 03 01 	lds	r24, 0x0103
    1b76:	0e 94 aa 03 	call	0x754	; 0x754 <set_backlight>
	
	delay_ms(500);
    1b7a:	84 ef       	ldi	r24, 0xF4	; 244
    1b7c:	91 e0       	ldi	r25, 0x01	; 1
    1b7e:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <delay_ms>

	
	//Logo==========================================================
	if (splash_screen == 1)
    1b82:	80 91 04 01 	lds	r24, 0x0104
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <main+0x13e>
    1b8a:	88 c0       	rjmp	.+272    	; 0x1c9c <main+0x24e>
	
		}	
	}
	
	
	if (display == 0) pixel(0,0,0);//cheat for small display
    1b8c:	80 91 27 01 	lds	r24, 0x0127
    1b90:	88 23       	and	r24, r24
    1b92:	21 f4       	brne	.+8      	; 0x1b9c <main+0x14e>
    1b94:	60 e0       	ldi	r22, 0x00	; 0
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
	
	RX_in = 0;
    1b9c:	10 92 29 01 	sts	0x0129, r1
    1ba0:	10 92 28 01 	sts	0x0128, r1
	
	delay_ms(1000);
    1ba4:	88 ee       	ldi	r24, 0xE8	; 232
    1ba6:	93 e0       	ldi	r25, 0x03	; 3
    1ba8:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <delay_ms>
	clear_screen();
    1bac:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
	
	if (RX_in > 0)//revert to 115200
    1bb0:	80 91 28 01 	lds	r24, 0x0128
    1bb4:	90 91 29 01 	lds	r25, 0x0129
    1bb8:	89 2b       	or	r24, r25
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <main+0x170>
    1bbc:	45 c3       	rjmp	.+1674   	; 0x2248 <main+0x7fa>
	{
		print_char(1,'1');
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	61 e3       	ldi	r22, 0x31	; 49
    1bc2:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
		print_char(1,'1');
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	61 e3       	ldi	r22, 0x31	; 49
    1bca:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
		print_char(1,'5');
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	65 e3       	ldi	r22, 0x35	; 53
    1bd2:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
		print_char(1,'2');
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	62 e3       	ldi	r22, 0x32	; 50
    1bda:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
		print_char(1,'0');
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	60 e3       	ldi	r22, 0x30	; 48
    1be2:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
		print_char(1,'0');
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	60 e3       	ldi	r22, 0x30	; 48
    1bea:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
		
		baud_rate = 6;
    1bee:	86 e0       	ldi	r24, 0x06	; 6
    1bf0:	80 93 02 01 	sts	0x0102, r24
		set_baud(6);//115200
    1bf4:	0e 94 c9 03 	call	0x792	; 0x792 <set_baud>
		
		cli();
    1bf8:	f8 94       	cli


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1bfa:	f9 99       	sbic	0x1f, 1	; 31
    1bfc:	fe cf       	rjmp	.-4      	; 0x1bfa <main+0x1ac>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1bfe:	12 bc       	out	0x22, r1	; 34
    1c00:	11 bc       	out	0x21, r1	; 33
EEDR = ucData;
    1c02:	86 e0       	ldi	r24, 0x06	; 6
    1c04:	80 bd       	out	0x20, r24	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1c06:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1c08:	f9 9a       	sbi	0x1f, 1	; 31
		
		cli();
		
		EEPROM_write((unsigned int) BPS, 6);
		
		sei();//Enable Interrupts
    1c0a:	78 94       	sei
	}
	
	else (set_baud(baud_rate));
	
	delay_ms(1000);
    1c0c:	88 ee       	ldi	r24, 0xE8	; 232
    1c0e:	93 e0       	ldi	r25, 0x03	; 3
    1c10:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <delay_ms>
	clear_screen();
    1c14:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
    1c18:	20 91 2a 01 	lds	r18, 0x012A
    1c1c:	30 91 2b 01 	lds	r19, 0x012B
						
						RX_read++;
						if(RX_read >= 416) RX_read = 0;
						
						if (x_offset > 159) x_offset = 159;
						if (y_offset > 127) y_offset = 127;
    1c20:	bf e7       	ldi	r27, 0x7F	; 127
    1c22:	fb 2e       	mov	r15, r27
						else if (RX_array[RX_read-1] == 25) y_offset = RX_array[RX_read];
						
						RX_read++;
						if(RX_read >= 416) RX_read = 0;
						
						if (x_offset > 159) x_offset = 159;
    1c24:	af e9       	ldi	r26, 0x9F	; 159
    1c26:	ea 2e       	mov	r14, r26
						//else if (RX_array[RX_read] == '3') USART_Init( 1000000/9600-1);//19200
						//else if (RX_array[RX_read] == '4') USART_Init( 1000000/19200-1);//38400
						//else if (RX_array[RX_read] == '5') USART_Init( 1000000/28800-1);//57600
						//else if (RX_array[RX_read] == '6') USART_Init( 1000000/57600-1);//115200
						
						if ((RX_array[RX_read] > '0') * (RX_array[RX_read] < '7')) baud_rate = (RX_array[RX_read]) - 48;
    1c28:	c1 e0       	ldi	r28, 0x01	; 1
    1c2a:	d0 e0       	ldi	r29, 0x00	; 0
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1c2c:	f2 e0       	ldi	r31, 0x02	; 2
    1c2e:	cf 2e       	mov	r12, r31
    1c30:	d1 2c       	mov	r13, r1
	clear_screen();
	
	//main loop===================================================
	while(1)
	{
		if(RX_in != RX_read)
    1c32:	e3 e0       	ldi	r30, 0x03	; 3
    1c34:	ae 2e       	mov	r10, r30
    1c36:	b1 2c       	mov	r11, r1
    1c38:	80 91 28 01 	lds	r24, 0x0128
    1c3c:	90 91 29 01 	lds	r25, 0x0129
    1c40:	82 17       	cp	r24, r18
    1c42:	93 07       	cpc	r25, r19
    1c44:	c9 f3       	breq	.-14     	; 0x1c38 <main+0x1ea>
			//
			// Basically, if it see's a pipe, it knows a new command is starting.
			// Since no command is more than 8 bytes long, if we're within 8 bytes
			// of the buffer tail, and a new command is starting, just wrap to the
			// start first "in case".
			if (RX_read >= 409 && RX_array[RX_read] == 124) {		
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	29 39       	cpi	r18, 0x99	; 153
    1c4a:	38 07       	cpc	r19, r24
    1c4c:	08 f4       	brcc	.+2      	; 0x1c50 <main+0x202>
    1c4e:	79 c0       	rjmp	.+242    	; 0x1d42 <main+0x2f4>
    1c50:	f9 01       	movw	r30, r18
    1c52:	e9 5c       	subi	r30, 0xC9	; 201
    1c54:	fe 4f       	sbci	r31, 0xFE	; 254
    1c56:	00 81       	ld	r16, Z
    1c58:	0c 37       	cpi	r16, 0x7C	; 124
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <main+0x210>
    1c5c:	f7 c0       	rjmp	.+494    	; 0x1e4c <main+0x3fe>
				RX_read = 0;
			}
			
			x = RX_array[RX_read];
			
			RX_read++;
    1c5e:	c9 01       	movw	r24, r18
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	90 93 2b 01 	sts	0x012B, r25
    1c66:	80 93 2a 01 	sts	0x012A, r24
			if(RX_read >= 416) RX_read = 0;
    1c6a:	80 5a       	subi	r24, 0xA0	; 160
    1c6c:	91 40       	sbci	r25, 0x01	; 1
    1c6e:	20 f0       	brcs	.+8      	; 0x1c78 <main+0x22a>
    1c70:	10 92 2b 01 	sts	0x012B, r1
    1c74:	10 92 2a 01 	sts	0x012A, r1
			
			//Backspace===================================================
			if(x == 8) del_char(0);
    1c78:	08 30       	cpi	r16, 0x08	; 8
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <main+0x230>
    1c7c:	df c0       	rjmp	.+446    	; 0x1e3c <main+0x3ee>
			
			//Special commands
			else if (x == 124)
    1c7e:	0c 37       	cpi	r16, 0x7C	; 124
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <main+0x236>
    1c82:	64 c0       	rjmp	.+200    	; 0x1d4c <main+0x2fe>
			}
			
			//print character to the screen===============================================
			else
			{
				del_char(1);
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	0e 94 ad 05 	call	0xb5a	; 0xb5a <del_char>
				print_char(1, x);
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	60 2f       	mov	r22, r16
    1c8e:	0e 94 ef 07 	call	0xfde	; 0xfde <print_char>
    1c92:	20 91 2a 01 	lds	r18, 0x012A
    1c96:	30 91 2b 01 	lds	r19, 0x012B
    1c9a:	ce cf       	rjmp	.-100    	; 0x1c38 <main+0x1ea>
	if (splash_screen == 1)
	{
		y = 40;
		x = 56;
		
		if (display == 1) y += 32, x += 16;
    1c9c:	80 91 27 01 	lds	r24, 0x0127
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <main+0x258>
    1ca4:	44 c0       	rjmp	.+136    	; 0x1d2e <main+0x2e0>
    1ca6:	48 e3       	ldi	r20, 0x38	; 56
    1ca8:	e4 2e       	mov	r14, r20
    1caa:	38 e2       	ldi	r19, 0x28	; 40
    1cac:	f3 2e       	mov	r15, r19
    1cae:	88 e3       	ldi	r24, 0x38	; 56
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	2f e3       	ldi	r18, 0x3F	; 63
    1cb4:	c2 2e       	mov	r12, r18
    1cb6:	d1 2c       	mov	r13, r1
    1cb8:	c5 e0       	ldi	r28, 0x05	; 5
    1cba:	d1 e0       	ldi	r29, 0x01	; 1
    1cbc:	08 e0       	ldi	r16, 0x08	; 8
    1cbe:	70 2e       	mov	r7, r16
    1cc0:	7e 0c       	add	r7, r14
    1cc2:	1f e0       	ldi	r17, 0x0F	; 15
    1cc4:	a1 2e       	mov	r10, r17
    1cc6:	b1 2c       	mov	r11, r1
    1cc8:	a8 0e       	add	r10, r24
    1cca:	b9 1e       	adc	r11, r25
			}
			
			q++;
			
			temp = logo[q];
			for (z = (x+8); z < (x+16); z++)
    1ccc:	87 2c       	mov	r8, r7
    1cce:	99 24       	eor	r9, r9
		
		if (display == 1) y += 32, x += 16;
		
		for (q = 0; q < 30; q++)
		{
			temp = logo[q];
    1cd0:	18 81       	ld	r17, Y
    1cd2:	0e 2d       	mov	r16, r14
    1cd4:	07 c0       	rjmp	.+14     	; 0x1ce4 <main+0x296>
			for (z = x; z < (x+8); z++)
    1cd6:	0f 5f       	subi	r16, 0xFF	; 255
    1cd8:	80 2f       	mov	r24, r16
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	c8 16       	cp	r12, r24
    1cde:	d9 06       	cpc	r13, r25
    1ce0:	4c f0       	brlt	.+18     	; 0x1cf4 <main+0x2a6>
			{
				if (temp & 0x80) pixel(1,z,y);
				
				temp <<= 1;
    1ce2:	11 0f       	add	r17, r17
		for (q = 0; q < 30; q++)
		{
			temp = logo[q];
			for (z = x; z < (x+8); z++)
			{
				if (temp & 0x80) pixel(1,z,y);
    1ce4:	17 ff       	sbrs	r17, 7
    1ce6:	f7 cf       	rjmp	.-18     	; 0x1cd6 <main+0x288>
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	60 2f       	mov	r22, r16
    1cec:	4f 2d       	mov	r20, r15
    1cee:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
    1cf2:	f1 cf       	rjmp	.-30     	; 0x1cd6 <main+0x288>
				temp <<= 1;
			}
			
			q++;
			
			temp = logo[q];
    1cf4:	19 81       	ldd	r17, Y+1	; 0x01
			for (z = (x+8); z < (x+16); z++)
    1cf6:	07 2d       	mov	r16, r7
    1cf8:	a8 14       	cp	r10, r8
    1cfa:	b9 04       	cpc	r11, r9
    1cfc:	44 f4       	brge	.+16     	; 0x1d0e <main+0x2c0>
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <main+0x2d0>
    1d00:	0f 5f       	subi	r16, 0xFF	; 255
    1d02:	80 2f       	mov	r24, r16
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a8 16       	cp	r10, r24
    1d08:	b9 06       	cpc	r11, r25
    1d0a:	4c f0       	brlt	.+18     	; 0x1d1e <main+0x2d0>
			{
				if (temp & 0x80) pixel(1,z,y);
				
				temp <<= 1;
    1d0c:	11 0f       	add	r17, r17
			q++;
			
			temp = logo[q];
			for (z = (x+8); z < (x+16); z++)
			{
				if (temp & 0x80) pixel(1,z,y);
    1d0e:	17 ff       	sbrs	r17, 7
    1d10:	f7 cf       	rjmp	.-18     	; 0x1d00 <main+0x2b2>
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	60 2f       	mov	r22, r16
    1d16:	4f 2d       	mov	r20, r15
    1d18:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
    1d1c:	f1 cf       	rjmp	.-30     	; 0x1d00 <main+0x2b2>
				
				temp <<= 1;
    1d1e:	22 96       	adiw	r28, 0x02	; 2
		y = 40;
		x = 56;
		
		if (display == 1) y += 32, x += 16;
		
		for (q = 0; q < 30; q++)
    1d20:	21 e0       	ldi	r18, 0x01	; 1
    1d22:	c3 32       	cpi	r28, 0x23	; 35
    1d24:	d2 07       	cpc	r29, r18
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <main+0x2dc>
    1d28:	31 cf       	rjmp	.-414    	; 0x1b8c <main+0x13e>
			{
				if (temp & 0x80) pixel(1,z,y);
				
				temp <<= 1;
			}
			y--;
    1d2a:	fa 94       	dec	r15
    1d2c:	d1 cf       	rjmp	.-94     	; 0x1cd0 <main+0x282>
	if (splash_screen == 1)
	{
		y = 40;
		x = 56;
		
		if (display == 1) y += 32, x += 16;
    1d2e:	78 e4       	ldi	r23, 0x48	; 72
    1d30:	e7 2e       	mov	r14, r23
    1d32:	68 e4       	ldi	r22, 0x48	; 72
    1d34:	f6 2e       	mov	r15, r22
    1d36:	88 e4       	ldi	r24, 0x48	; 72
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	5f e4       	ldi	r21, 0x4F	; 79
    1d3c:	c5 2e       	mov	r12, r21
    1d3e:	d1 2c       	mov	r13, r1
    1d40:	bb cf       	rjmp	.-138    	; 0x1cb8 <main+0x26a>
				RX_read = 0;
			}
			
			x = RX_array[RX_read];
			
			RX_read++;
    1d42:	f9 01       	movw	r30, r18
    1d44:	e9 5c       	subi	r30, 0xC9	; 201
    1d46:	fe 4f       	sbci	r31, 0xFE	; 254
    1d48:	00 81       	ld	r16, Z
    1d4a:	89 cf       	rjmp	.-238    	; 0x1c5e <main+0x210>
			
			//Special commands
			else if (x == 124)
			{	
				//make sure the next byte is there
				while(RX_in == RX_read);
    1d4c:	20 91 2a 01 	lds	r18, 0x012A
    1d50:	30 91 2b 01 	lds	r19, 0x012B
    1d54:	a9 01       	movw	r20, r18
    1d56:	80 91 28 01 	lds	r24, 0x0128
    1d5a:	90 91 29 01 	lds	r25, 0x0129
    1d5e:	82 17       	cp	r24, r18
    1d60:	93 07       	cpc	r25, r19
    1d62:	c9 f3       	breq	.-14     	; 0x1d56 <main+0x308>
				
				//0, clear screen======================================================
				if(RX_array[RX_read] == 0)//^@
    1d64:	f9 01       	movw	r30, r18
    1d66:	e9 5c       	subi	r30, 0xC9	; 201
    1d68:	fe 4f       	sbci	r31, 0xFE	; 254
    1d6a:	e0 81       	ld	r30, Z
    1d6c:	ee 23       	and	r30, r30
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <main+0x324>
    1d70:	74 c0       	rjmp	.+232    	; 0x1e5a <main+0x40c>
					RX_read++;
					if(RX_read >= 416) RX_read = 0;
				}
				
				//demo mode
				else if(RX_array[RX_read] == 4)//^d
    1d72:	e4 30       	cpi	r30, 0x04	; 4
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <main+0x32a>
    1d76:	a4 c0       	rjmp	.+328    	; 0x1ec0 <main+0x472>
					RX_in = 0;
				}
				
				
				//reverse mode
				else if(RX_array[RX_read] == 18)//^r
    1d78:	e2 31       	cpi	r30, 0x12	; 18
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <main+0x330>
    1d7c:	f4 c0       	rjmp	.+488    	; 0x1f66 <main+0x518>
					sei();
				}
				
				
				//toggle spasl screen
				else if(RX_array[RX_read] == 19)//^s
    1d7e:	e3 31       	cpi	r30, 0x13	; 19
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <main+0x336>
    1d82:	7d c0       	rjmp	.+250    	; 0x1e7e <main+0x430>
				}
				
				else
				{
					//set backlight (0 to 100)=========================================================
					if(RX_array[RX_read] == 2)//^b
    1d84:	e2 30       	cpi	r30, 0x02	; 2
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <main+0x33c>
    1d88:	b0 c0       	rjmp	.+352    	; 0x1eea <main+0x49c>

					}
					
					
					//change baud rate=========================================================
					else if(RX_array[RX_read] == 7)//^g
    1d8a:	e7 30       	cpi	r30, 0x07	; 7
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <main+0x342>
    1d8e:	13 c1       	rjmp	.+550    	; 0x1fb6 <main+0x568>
						
					}	
					
					
					//set x or y=========================================================
					else if((RX_array[RX_read] == 24) | (RX_array[RX_read] == 25))//^x or ^y
    1d90:	8e 2f       	mov	r24, r30
    1d92:	88 51       	subi	r24, 0x18	; 24
    1d94:	82 30       	cpi	r24, 0x02	; 2
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <main+0x34c>
    1d98:	60 c1       	rjmp	.+704    	; 0x205a <main+0x60c>
						if (y_offset > 127) y_offset = 127;

					}

					//set pixel=========================================================
					else if (RX_array[RX_read] == 16)//^p
    1d9a:	e0 31       	cpi	r30, 0x10	; 16
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <main+0x352>
    1d9e:	a1 c1       	rjmp	.+834    	; 0x20e2 <main+0x694>

					}

					
					//<ctrl>c, circle======================================================
					else if(RX_array[RX_read] == 3)//^c
    1da0:	e3 30       	cpi	r30, 0x03	; 3
    1da2:	09 f4       	brne	.+2      	; 0x1da6 <main+0x358>
    1da4:	d0 c1       	rjmp	.+928    	; 0x2146 <main+0x6f8>
						if(RX_read >= 416) RX_read = 0;
					}
					
					
					//<ctrl>e, erase block======================================================
					else if(RX_array[RX_read] == 5)//^e
    1da6:	e5 30       	cpi	r30, 0x05	; 5
    1da8:	09 f4       	brne	.+2      	; 0x1dac <main+0x35e>
    1daa:	f4 c1       	rjmp	.+1000   	; 0x2194 <main+0x746>
						if(RX_read >= 416) RX_read = 0;
					}
					
					
					//box======================================================
					else if(RX_array[RX_read] == 15)//^o
    1dac:	ef 30       	cpi	r30, 0x0F	; 15
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <main+0x364>
    1db0:	20 c2       	rjmp	.+1088   	; 0x21f2 <main+0x7a4>
						if(RX_read >= 416) RX_read = 0;
					}


					//line========================================================
					else if (RX_array[RX_read] == 12)//^l
    1db2:	ec 30       	cpi	r30, 0x0C	; 12
    1db4:	09 f0       	breq	.+2      	; 0x1db8 <main+0x36a>
    1db6:	40 cf       	rjmp	.-384    	; 0x1c38 <main+0x1ea>
    1db8:	20 e0       	ldi	r18, 0x00	; 0
					{
						//need 5 bytes
						for (y = 0; y < 5; y++)
						{
							RX_read++;
    1dba:	4f 5f       	subi	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
							if(RX_read >= 416) RX_read = 0;
    1dbe:	e1 e0       	ldi	r30, 0x01	; 1
    1dc0:	40 3a       	cpi	r20, 0xA0	; 160
    1dc2:	5e 07       	cpc	r21, r30
    1dc4:	10 f0       	brcs	.+4      	; 0x1dca <main+0x37c>
    1dc6:	40 e0       	ldi	r20, 0x00	; 0
    1dc8:	50 e0       	ldi	r21, 0x00	; 0
							while(RX_in == RX_read);//wait for byte
    1dca:	80 91 28 01 	lds	r24, 0x0128
    1dce:	90 91 29 01 	lds	r25, 0x0129
    1dd2:	84 17       	cp	r24, r20
    1dd4:	95 07       	cpc	r25, r21
    1dd6:	c9 f3       	breq	.-14     	; 0x1dca <main+0x37c>

					//line========================================================
					else if (RX_array[RX_read] == 12)//^l
					{
						//need 5 bytes
						for (y = 0; y < 5; y++)
    1dd8:	2f 5f       	subi	r18, 0xFF	; 255
    1dda:	25 30       	cpi	r18, 0x05	; 5
    1ddc:	71 f7       	brne	.-36     	; 0x1dba <main+0x36c>
    1dde:	40 93 2a 01 	sts	0x012A, r20
    1de2:	50 93 2b 01 	sts	0x012B, r21
							RX_read++;
							if(RX_read >= 416) RX_read = 0;
							while(RX_in == RX_read);//wait for byte
						}
						
						line(RX_array[RX_read], RX_array[RX_read-4], RX_array[RX_read-3], RX_array[RX_read-2], RX_array[RX_read+-1]);
    1de6:	fa 01       	movw	r30, r20
    1de8:	e9 5c       	subi	r30, 0xC9	; 201
    1dea:	fe 4f       	sbci	r31, 0xFE	; 254
    1dec:	df 01       	movw	r26, r30
    1dee:	13 97       	sbiw	r26, 0x03	; 3
    1df0:	9f 01       	movw	r18, r30
    1df2:	22 50       	subi	r18, 0x02	; 2
    1df4:	30 40       	sbci	r19, 0x00	; 0
    1df6:	8f 01       	movw	r16, r30
    1df8:	01 50       	subi	r16, 0x01	; 1
    1dfa:	10 40       	sbci	r17, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	34 97       	sbiw	r30, 0x04	; 4
    1e00:	60 81       	ld	r22, Z
    1e02:	4c 91       	ld	r20, X
    1e04:	d9 01       	movw	r26, r18
    1e06:	2c 91       	ld	r18, X
    1e08:	f8 01       	movw	r30, r16
    1e0a:	00 81       	ld	r16, Z
    1e0c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <line>
						RX_read++;
    1e10:	20 91 2a 01 	lds	r18, 0x012A
    1e14:	30 91 2b 01 	lds	r19, 0x012B
    1e18:	2f 5f       	subi	r18, 0xFF	; 255
    1e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1c:	30 93 2b 01 	sts	0x012B, r19
    1e20:	20 93 2a 01 	sts	0x012A, r18
						if(RX_read >= 416) RX_read = 0;
    1e24:	f1 e0       	ldi	r31, 0x01	; 1
    1e26:	20 3a       	cpi	r18, 0xA0	; 160
    1e28:	3f 07       	cpc	r19, r31
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <main+0x3e0>
    1e2c:	05 cf       	rjmp	.-502    	; 0x1c38 <main+0x1ea>
    1e2e:	10 92 2b 01 	sts	0x012B, r1
    1e32:	10 92 2a 01 	sts	0x012A, r1
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	fe ce       	rjmp	.-516    	; 0x1c38 <main+0x1ea>
			
			RX_read++;
			if(RX_read >= 416) RX_read = 0;
			
			//Backspace===================================================
			if(x == 8) del_char(0);
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <del_char>
    1e42:	20 91 2a 01 	lds	r18, 0x012A
    1e46:	30 91 2b 01 	lds	r19, 0x012B
    1e4a:	f6 ce       	rjmp	.-532    	; 0x1c38 <main+0x1ea>
			// start first "in case".
			if (RX_read >= 409 && RX_array[RX_read] == 124) {		
				RX_read = 0;
			}
			
			x = RX_array[RX_read];
    1e4c:	00 91 37 01 	lds	r16, 0x0137
			
			RX_read++;
    1e50:	d0 93 2b 01 	sts	0x012B, r29
    1e54:	c0 93 2a 01 	sts	0x012A, r28
    1e58:	0f cf       	rjmp	.-482    	; 0x1c78 <main+0x22a>
				while(RX_in == RX_read);
				
				//0, clear screen======================================================
				if(RX_array[RX_read] == 0)//^@
				{
					clear_screen();
    1e5a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
							while(RX_in == RX_read);//wait for byte
						}
						
						box(RX_array[RX_read-3], RX_array[RX_read-2], RX_array[RX_read-1], RX_array[RX_read]);
						
						RX_read++;
    1e5e:	20 91 2a 01 	lds	r18, 0x012A
    1e62:	30 91 2b 01 	lds	r19, 0x012B
    1e66:	2f 5f       	subi	r18, 0xFF	; 255
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	30 93 2b 01 	sts	0x012B, r19
    1e6e:	20 93 2a 01 	sts	0x012A, r18
						if(RX_read >= 416) RX_read = 0;
    1e72:	b1 e0       	ldi	r27, 0x01	; 1
    1e74:	20 3a       	cpi	r18, 0xA0	; 160
    1e76:	3b 07       	cpc	r19, r27
    1e78:	08 f4       	brcc	.+2      	; 0x1e7c <main+0x42e>
    1e7a:	de ce       	rjmp	.-580    	; 0x1c38 <main+0x1ea>
    1e7c:	d8 cf       	rjmp	.-80     	; 0x1e2e <main+0x3e0>
				
				
				//toggle spasl screen
				else if(RX_array[RX_read] == 19)//^s
				{
					splash_screen ^= 1;
    1e7e:	40 91 04 01 	lds	r20, 0x0104
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	48 27       	eor	r20, r24
    1e86:	40 93 04 01 	sts	0x0104, r20
					//clear_screen();
					RX_read++;
    1e8a:	c9 01       	movw	r24, r18
    1e8c:	01 96       	adiw	r24, 0x01	; 1
    1e8e:	90 93 2b 01 	sts	0x012B, r25
    1e92:	80 93 2a 01 	sts	0x012A, r24
					if(RX_read >= 416) RX_read = 0;
    1e96:	80 5a       	subi	r24, 0xA0	; 160
    1e98:	91 40       	sbci	r25, 0x01	; 1
    1e9a:	20 f0       	brcs	.+8      	; 0x1ea4 <main+0x456>
    1e9c:	10 92 2b 01 	sts	0x012B, r1
    1ea0:	10 92 2a 01 	sts	0x012A, r1
					
					cli();
    1ea4:	f8 94       	cli


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1ea6:	f9 99       	sbic	0x1f, 1	; 31
    1ea8:	fe cf       	rjmp	.-4      	; 0x1ea6 <main+0x458>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1eaa:	d2 bc       	out	0x22, r13	; 34
    1eac:	c1 bc       	out	0x21, r12	; 33
EEDR = ucData;
    1eae:	40 bd       	out	0x20, r20	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1eb0:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1eb2:	f9 9a       	sbi	0x1f, 1	; 31
					RX_read++;
					if(RX_read >= 416) RX_read = 0;
					
					cli();
					EEPROM_write((unsigned int) SPLASH, splash_screen);
					sei();
    1eb4:	78 94       	sei
    1eb6:	20 91 2a 01 	lds	r18, 0x012A
    1eba:	30 91 2b 01 	lds	r19, 0x012B
    1ebe:	bc ce       	rjmp	.-648    	; 0x1c38 <main+0x1ea>
				}
				
				//demo mode
				else if(RX_array[RX_read] == 4)//^d
				{
					RX_in = 0, RX_read = 0;
    1ec0:	10 92 29 01 	sts	0x0129, r1
    1ec4:	10 92 28 01 	sts	0x0128, r1
    1ec8:	10 92 2b 01 	sts	0x012B, r1
    1ecc:	10 92 2a 01 	sts	0x012A, r1
					demo();
    1ed0:	0e 94 99 0a 	call	0x1532	; 0x1532 <demo>
					clear_screen();
    1ed4:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
					RX_in = 0;
    1ed8:	10 92 29 01 	sts	0x0129, r1
    1edc:	10 92 28 01 	sts	0x0128, r1
    1ee0:	20 91 2a 01 	lds	r18, 0x012A
    1ee4:	30 91 2b 01 	lds	r19, 0x012B
    1ee8:	a7 ce       	rjmp	.-690    	; 0x1c38 <main+0x1ea>
				else
				{
					//set backlight (0 to 100)=========================================================
					if(RX_array[RX_read] == 2)//^b
					{
						RX_read++;
    1eea:	c9 01       	movw	r24, r18
    1eec:	01 96       	adiw	r24, 0x01	; 1
    1eee:	90 93 2b 01 	sts	0x012B, r25
    1ef2:	80 93 2a 01 	sts	0x012A, r24
						if(RX_read >= 416) RX_read = 0;
    1ef6:	80 5a       	subi	r24, 0xA0	; 160
    1ef8:	91 40       	sbci	r25, 0x01	; 1
    1efa:	20 f0       	brcs	.+8      	; 0x1f04 <main+0x4b6>
    1efc:	10 92 2b 01 	sts	0x012B, r1
    1f00:	10 92 2a 01 	sts	0x012A, r1
						while(RX_in == RX_read);//wait for byte
    1f04:	20 91 2a 01 	lds	r18, 0x012A
    1f08:	30 91 2b 01 	lds	r19, 0x012B
    1f0c:	80 91 28 01 	lds	r24, 0x0128
    1f10:	90 91 29 01 	lds	r25, 0x0129
    1f14:	82 17       	cp	r24, r18
    1f16:	93 07       	cpc	r25, r19
    1f18:	c9 f3       	breq	.-14     	; 0x1f0c <main+0x4be>
						BL_dutycycle = RX_array[RX_read];
    1f1a:	f9 01       	movw	r30, r18
    1f1c:	e9 5c       	subi	r30, 0xC9	; 201
    1f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f20:	e0 81       	ld	r30, Z
    1f22:	e0 93 03 01 	sts	0x0103, r30
						
						RX_read++;
    1f26:	c9 01       	movw	r24, r18
    1f28:	01 96       	adiw	r24, 0x01	; 1
    1f2a:	90 93 2b 01 	sts	0x012B, r25
    1f2e:	80 93 2a 01 	sts	0x012A, r24
						if(RX_read >= 416) RX_read = 0;
    1f32:	80 5a       	subi	r24, 0xA0	; 160
    1f34:	91 40       	sbci	r25, 0x01	; 1
    1f36:	20 f0       	brcs	.+8      	; 0x1f40 <main+0x4f2>
    1f38:	10 92 2b 01 	sts	0x012B, r1
    1f3c:	10 92 2a 01 	sts	0x012A, r1
						
						set_backlight(BL_dutycycle);
    1f40:	8e 2f       	mov	r24, r30
    1f42:	0e 94 aa 03 	call	0x754	; 0x754 <set_backlight>
						
						cli();
    1f46:	f8 94       	cli
						EEPROM_write((unsigned int) BACKLIGHT, BL_dutycycle);
    1f48:	80 91 03 01 	lds	r24, 0x0103


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1f4c:	f9 99       	sbic	0x1f, 1	; 31
    1f4e:	fe cf       	rjmp	.-4      	; 0x1f4c <main+0x4fe>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1f50:	d2 bd       	out	0x22, r29	; 34
    1f52:	c1 bd       	out	0x21, r28	; 33
EEDR = ucData;
    1f54:	80 bd       	out	0x20, r24	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1f56:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1f58:	f9 9a       	sbi	0x1f, 1	; 31
						
						set_backlight(BL_dutycycle);
						
						cli();
						EEPROM_write((unsigned int) BACKLIGHT, BL_dutycycle);
						sei();
    1f5a:	78 94       	sei
    1f5c:	20 91 2a 01 	lds	r18, 0x012A
    1f60:	30 91 2b 01 	lds	r19, 0x012B
    1f64:	69 ce       	rjmp	.-814    	; 0x1c38 <main+0x1ea>
				
				
				//reverse mode
				else if(RX_array[RX_read] == 18)//^r
				{
					reverse ^= 1;
    1f66:	80 91 26 01 	lds	r24, 0x0126
    1f6a:	91 e0       	ldi	r25, 0x01	; 1
    1f6c:	89 27       	eor	r24, r25
    1f6e:	80 93 26 01 	sts	0x0126, r24
					clear_screen();
    1f72:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>
					RX_read++;
    1f76:	20 91 2a 01 	lds	r18, 0x012A
    1f7a:	30 91 2b 01 	lds	r19, 0x012B
    1f7e:	2f 5f       	subi	r18, 0xFF	; 255
    1f80:	3f 4f       	sbci	r19, 0xFF	; 255
    1f82:	30 93 2b 01 	sts	0x012B, r19
    1f86:	20 93 2a 01 	sts	0x012A, r18
					if(RX_read >= 416) RX_read = 0;
    1f8a:	e1 e0       	ldi	r30, 0x01	; 1
    1f8c:	20 3a       	cpi	r18, 0xA0	; 160
    1f8e:	3e 07       	cpc	r19, r30
    1f90:	30 f0       	brcs	.+12     	; 0x1f9e <main+0x550>
    1f92:	10 92 2b 01 	sts	0x012B, r1
    1f96:	10 92 2a 01 	sts	0x012A, r1
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
					
					cli();
    1f9e:	f8 94       	cli
					EEPROM_write((unsigned int) REV, reverse);
    1fa0:	80 91 26 01 	lds	r24, 0x0126


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1fa4:	f9 99       	sbic	0x1f, 1	; 31
    1fa6:	fe cf       	rjmp	.-4      	; 0x1fa4 <main+0x556>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1fa8:	b2 bc       	out	0x22, r11	; 34
    1faa:	a1 bc       	out	0x21, r10	; 33
EEDR = ucData;
    1fac:	80 bd       	out	0x20, r24	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    1fae:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    1fb0:	f9 9a       	sbi	0x1f, 1	; 31
					RX_read++;
					if(RX_read >= 416) RX_read = 0;
					
					cli();
					EEPROM_write((unsigned int) REV, reverse);
					sei();
    1fb2:	78 94       	sei
    1fb4:	41 ce       	rjmp	.-894    	; 0x1c38 <main+0x1ea>
					
					
					//change baud rate=========================================================
					else if(RX_array[RX_read] == 7)//^g
					{
						RX_read++;
    1fb6:	c9 01       	movw	r24, r18
    1fb8:	01 96       	adiw	r24, 0x01	; 1
    1fba:	90 93 2b 01 	sts	0x012B, r25
    1fbe:	80 93 2a 01 	sts	0x012A, r24
						if(RX_read >= 416) RX_read = 0;
    1fc2:	80 5a       	subi	r24, 0xA0	; 160
    1fc4:	91 40       	sbci	r25, 0x01	; 1
    1fc6:	20 f0       	brcs	.+8      	; 0x1fd0 <main+0x582>
    1fc8:	10 92 2b 01 	sts	0x012B, r1
    1fcc:	10 92 2a 01 	sts	0x012A, r1
						while(RX_in == RX_read);//wait for byte
    1fd0:	e0 91 2a 01 	lds	r30, 0x012A
    1fd4:	f0 91 2b 01 	lds	r31, 0x012B
    1fd8:	80 91 28 01 	lds	r24, 0x0128
    1fdc:	90 91 29 01 	lds	r25, 0x0129
    1fe0:	8e 17       	cp	r24, r30
    1fe2:	9f 07       	cpc	r25, r31
    1fe4:	c9 f3       	breq	.-14     	; 0x1fd8 <main+0x58a>
						//else if (RX_array[RX_read] == '3') USART_Init( 1000000/9600-1);//19200
						//else if (RX_array[RX_read] == '4') USART_Init( 1000000/19200-1);//38400
						//else if (RX_array[RX_read] == '5') USART_Init( 1000000/28800-1);//57600
						//else if (RX_array[RX_read] == '6') USART_Init( 1000000/57600-1);//115200
						
						if ((RX_array[RX_read] > '0') * (RX_array[RX_read] < '7')) baud_rate = (RX_array[RX_read]) - 48;
    1fe6:	e9 5c       	subi	r30, 0xC9	; 201
    1fe8:	fe 4f       	sbci	r31, 0xFE	; 254
    1fea:	40 81       	ld	r20, Z
    1fec:	60 e0       	ldi	r22, 0x00	; 0
    1fee:	70 e0       	ldi	r23, 0x00	; 0
    1ff0:	47 33       	cpi	r20, 0x37	; 55
    1ff2:	10 f4       	brcc	.+4      	; 0x1ff8 <main+0x5aa>
    1ff4:	61 e0       	ldi	r22, 0x01	; 1
    1ff6:	70 e0       	ldi	r23, 0x00	; 0
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	41 33       	cpi	r20, 0x31	; 49
    1ffe:	10 f0       	brcs	.+4      	; 0x2004 <main+0x5b6>
    2000:	21 e0       	ldi	r18, 0x01	; 1
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	62 9f       	mul	r22, r18
    2006:	c0 01       	movw	r24, r0
    2008:	63 9f       	mul	r22, r19
    200a:	90 0d       	add	r25, r0
    200c:	72 9f       	mul	r23, r18
    200e:	90 0d       	add	r25, r0
    2010:	11 24       	eor	r1, r1
    2012:	89 2b       	or	r24, r25
    2014:	19 f0       	breq	.+6      	; 0x201c <main+0x5ce>
    2016:	40 53       	subi	r20, 0x30	; 48
    2018:	40 93 02 01 	sts	0x0102, r20
						
						set_baud(baud_rate);
    201c:	80 91 02 01 	lds	r24, 0x0102
    2020:	0e 94 c9 03 	call	0x792	; 0x792 <set_baud>
						
						cli();
    2024:	f8 94       	cli
						EEPROM_write((unsigned int) BPS, baud_rate);
    2026:	80 91 02 01 	lds	r24, 0x0102


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    202a:	f9 99       	sbic	0x1f, 1	; 31
    202c:	fe cf       	rjmp	.-4      	; 0x202a <main+0x5dc>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    202e:	12 bc       	out	0x22, r1	; 34
    2030:	11 bc       	out	0x21, r1	; 33
EEDR = ucData;
    2032:	80 bd       	out	0x20, r24	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    2034:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    2036:	f9 9a       	sbi	0x1f, 1	; 31
						
						set_baud(baud_rate);
						
						cli();
						EEPROM_write((unsigned int) BPS, baud_rate);
						sei();
    2038:	78 94       	sei
							while(RX_in == RX_read);//wait for byte
						}
						
						circle(RX_array[RX_read], RX_array[RX_read-3], RX_array[RX_read-2], RX_array[RX_read-1]);
						
						RX_read++;
    203a:	20 91 2a 01 	lds	r18, 0x012A
    203e:	30 91 2b 01 	lds	r19, 0x012B
    2042:	2f 5f       	subi	r18, 0xFF	; 255
    2044:	3f 4f       	sbci	r19, 0xFF	; 255
    2046:	30 93 2b 01 	sts	0x012B, r19
    204a:	20 93 2a 01 	sts	0x012A, r18
						if(RX_read >= 416) RX_read = 0;
    204e:	e1 e0       	ldi	r30, 0x01	; 1
    2050:	20 3a       	cpi	r18, 0xA0	; 160
    2052:	3e 07       	cpc	r19, r30
    2054:	08 f4       	brcc	.+2      	; 0x2058 <main+0x60a>
    2056:	f0 cd       	rjmp	.-1056   	; 0x1c38 <main+0x1ea>
    2058:	ea ce       	rjmp	.-556    	; 0x1e2e <main+0x3e0>
					
					
					//set x or y=========================================================
					else if((RX_array[RX_read] == 24) | (RX_array[RX_read] == 25))//^x or ^y
					{
						RX_read++;
    205a:	c9 01       	movw	r24, r18
    205c:	01 96       	adiw	r24, 0x01	; 1
    205e:	90 93 2b 01 	sts	0x012B, r25
    2062:	80 93 2a 01 	sts	0x012A, r24
						if(RX_read >= 416) RX_read = 0;
    2066:	80 5a       	subi	r24, 0xA0	; 160
    2068:	91 40       	sbci	r25, 0x01	; 1
    206a:	20 f0       	brcs	.+8      	; 0x2074 <main+0x626>
    206c:	10 92 2b 01 	sts	0x012B, r1
    2070:	10 92 2a 01 	sts	0x012A, r1
						while(RX_in == RX_read);//wait for byte
    2074:	20 91 2a 01 	lds	r18, 0x012A
    2078:	30 91 2b 01 	lds	r19, 0x012B
    207c:	80 91 28 01 	lds	r24, 0x0128
    2080:	90 91 29 01 	lds	r25, 0x0129
    2084:	82 17       	cp	r24, r18
    2086:	93 07       	cpc	r25, r19
    2088:	c9 f3       	breq	.-14     	; 0x207c <main+0x62e>
						if (RX_array[RX_read-1] == 24) x_offset = RX_array[RX_read];
    208a:	f9 01       	movw	r30, r18
    208c:	e9 5c       	subi	r30, 0xC9	; 201
    208e:	fe 4f       	sbci	r31, 0xFE	; 254
    2090:	82 91       	ld	r24, -Z
    2092:	31 96       	adiw	r30, 0x01	; 1
    2094:	88 31       	cpi	r24, 0x18	; 24
    2096:	09 f4       	brne	.+2      	; 0x209a <main+0x64c>
    2098:	a8 c0       	rjmp	.+336    	; 0x21ea <main+0x79c>
						else if (RX_array[RX_read-1] == 25) y_offset = RX_array[RX_read];
    209a:	89 31       	cpi	r24, 0x19	; 25
    209c:	19 f4       	brne	.+6      	; 0x20a4 <main+0x656>
    209e:	80 81       	ld	r24, Z
    20a0:	80 93 00 01 	sts	0x0100, r24
						
						RX_read++;
    20a4:	c9 01       	movw	r24, r18
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	90 93 2b 01 	sts	0x012B, r25
    20ac:	80 93 2a 01 	sts	0x012A, r24
						if(RX_read >= 416) RX_read = 0;
    20b0:	80 5a       	subi	r24, 0xA0	; 160
    20b2:	91 40       	sbci	r25, 0x01	; 1
    20b4:	20 f0       	brcs	.+8      	; 0x20be <main+0x670>
    20b6:	10 92 2b 01 	sts	0x012B, r1
    20ba:	10 92 2a 01 	sts	0x012A, r1
						
						if (x_offset > 159) x_offset = 159;
    20be:	80 91 24 01 	lds	r24, 0x0124
    20c2:	80 3a       	cpi	r24, 0xA0	; 160
    20c4:	10 f0       	brcs	.+4      	; 0x20ca <main+0x67c>
    20c6:	e0 92 24 01 	sts	0x0124, r14
						if (y_offset > 127) y_offset = 127;
    20ca:	80 91 00 01 	lds	r24, 0x0100
    20ce:	88 23       	and	r24, r24
    20d0:	0c f0       	brlt	.+2      	; 0x20d4 <main+0x686>
    20d2:	df cd       	rjmp	.-1090   	; 0x1c92 <main+0x244>
    20d4:	f0 92 00 01 	sts	0x0100, r15
    20d8:	20 91 2a 01 	lds	r18, 0x012A
    20dc:	30 91 2b 01 	lds	r19, 0x012B
    20e0:	ab cd       	rjmp	.-1194   	; 0x1c38 <main+0x1ea>

					}

					//set pixel=========================================================
					else if (RX_array[RX_read] == 16)//^p
    20e2:	20 e0       	ldi	r18, 0x00	; 0
					{
						//need 3 bytes
						for (y = 0; y < 3; y++)
						{
							RX_read++;
    20e4:	4f 5f       	subi	r20, 0xFF	; 255
    20e6:	5f 4f       	sbci	r21, 0xFF	; 255
							if(RX_read >= 416) RX_read = 0;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	40 3a       	cpi	r20, 0xA0	; 160
    20ec:	58 07       	cpc	r21, r24
    20ee:	10 f0       	brcs	.+4      	; 0x20f4 <main+0x6a6>
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	50 e0       	ldi	r21, 0x00	; 0
							while(RX_in == RX_read);//wait for byte
    20f4:	80 91 28 01 	lds	r24, 0x0128
    20f8:	90 91 29 01 	lds	r25, 0x0129
    20fc:	84 17       	cp	r24, r20
    20fe:	95 07       	cpc	r25, r21
    2100:	c9 f3       	breq	.-14     	; 0x20f4 <main+0x6a6>

					//set pixel=========================================================
					else if (RX_array[RX_read] == 16)//^p
					{
						//need 3 bytes
						for (y = 0; y < 3; y++)
    2102:	2f 5f       	subi	r18, 0xFF	; 255
    2104:	23 30       	cpi	r18, 0x03	; 3
    2106:	71 f7       	brne	.-36     	; 0x20e4 <main+0x696>
    2108:	50 93 2b 01 	sts	0x012B, r21
    210c:	40 93 2a 01 	sts	0x012A, r20
							RX_read++;
							if(RX_read >= 416) RX_read = 0;
							while(RX_in == RX_read);//wait for byte
						}
						
						pixel(RX_array[RX_read], RX_array[RX_read-2], RX_array[RX_read-1]);
    2110:	fa 01       	movw	r30, r20
    2112:	e9 5c       	subi	r30, 0xC9	; 201
    2114:	fe 4f       	sbci	r31, 0xFE	; 254
    2116:	df 01       	movw	r26, r30
    2118:	11 97       	sbiw	r26, 0x01	; 1
    211a:	80 81       	ld	r24, Z
    211c:	32 97       	sbiw	r30, 0x02	; 2
    211e:	60 81       	ld	r22, Z
    2120:	4c 91       	ld	r20, X
    2122:	0e 94 65 04 	call	0x8ca	; 0x8ca <pixel>
						
						RX_read++;
    2126:	20 91 2a 01 	lds	r18, 0x012A
    212a:	30 91 2b 01 	lds	r19, 0x012B
    212e:	2f 5f       	subi	r18, 0xFF	; 255
    2130:	3f 4f       	sbci	r19, 0xFF	; 255
    2132:	30 93 2b 01 	sts	0x012B, r19
    2136:	20 93 2a 01 	sts	0x012A, r18
						if(RX_read >= 416) RX_read = 0;
    213a:	a1 e0       	ldi	r26, 0x01	; 1
    213c:	20 3a       	cpi	r18, 0xA0	; 160
    213e:	3a 07       	cpc	r19, r26
    2140:	08 f4       	brcc	.+2      	; 0x2144 <main+0x6f6>
    2142:	7a cd       	rjmp	.-1292   	; 0x1c38 <main+0x1ea>
    2144:	74 ce       	rjmp	.-792    	; 0x1e2e <main+0x3e0>

					}

					
					//<ctrl>c, circle======================================================
					else if(RX_array[RX_read] == 3)//^c
    2146:	20 e0       	ldi	r18, 0x00	; 0
					{
						//need 4 bytes
						for (y = 0; y < 4; y++)
						{
							RX_read++;
    2148:	4f 5f       	subi	r20, 0xFF	; 255
    214a:	5f 4f       	sbci	r21, 0xFF	; 255
							if(RX_read >= 416) RX_read = 0;
    214c:	b1 e0       	ldi	r27, 0x01	; 1
    214e:	40 3a       	cpi	r20, 0xA0	; 160
    2150:	5b 07       	cpc	r21, r27
    2152:	10 f0       	brcs	.+4      	; 0x2158 <main+0x70a>
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	50 e0       	ldi	r21, 0x00	; 0
							while(RX_in == RX_read);//wait for byte
    2158:	80 91 28 01 	lds	r24, 0x0128
    215c:	90 91 29 01 	lds	r25, 0x0129
    2160:	84 17       	cp	r24, r20
    2162:	95 07       	cpc	r25, r21
    2164:	c9 f3       	breq	.-14     	; 0x2158 <main+0x70a>
					
					//<ctrl>c, circle======================================================
					else if(RX_array[RX_read] == 3)//^c
					{
						//need 4 bytes
						for (y = 0; y < 4; y++)
    2166:	2f 5f       	subi	r18, 0xFF	; 255
    2168:	24 30       	cpi	r18, 0x04	; 4
    216a:	71 f7       	brne	.-36     	; 0x2148 <main+0x6fa>
    216c:	50 93 2b 01 	sts	0x012B, r21
    2170:	40 93 2a 01 	sts	0x012A, r20
							RX_read++;
							if(RX_read >= 416) RX_read = 0;
							while(RX_in == RX_read);//wait for byte
						}
						
						circle(RX_array[RX_read], RX_array[RX_read-3], RX_array[RX_read-2], RX_array[RX_read-1]);
    2174:	fa 01       	movw	r30, r20
    2176:	e9 5c       	subi	r30, 0xC9	; 201
    2178:	fe 4f       	sbci	r31, 0xFE	; 254
    217a:	33 97       	sbiw	r30, 0x03	; 3
    217c:	61 91       	ld	r22, Z+
    217e:	40 81       	ld	r20, Z
    2180:	32 96       	adiw	r30, 0x02	; 2
    2182:	22 91       	ld	r18, -Z
    2184:	31 96       	adiw	r30, 0x01	; 1
    2186:	80 81       	ld	r24, Z
    2188:	70 e0       	ldi	r23, 0x00	; 0
    218a:	50 e0       	ldi	r21, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <circle>
    2192:	53 cf       	rjmp	.-346    	; 0x203a <main+0x5ec>
						if(RX_read >= 416) RX_read = 0;
					}
					
					
					//<ctrl>e, erase block======================================================
					else if(RX_array[RX_read] == 5)//^e
    2194:	20 e0       	ldi	r18, 0x00	; 0
					{
						//need 4 bytes
						for (y = 0; y < 4; y++)
						{
							RX_read++;
    2196:	4f 5f       	subi	r20, 0xFF	; 255
    2198:	5f 4f       	sbci	r21, 0xFF	; 255
							if(RX_read >= 416) RX_read = 0;
    219a:	f1 e0       	ldi	r31, 0x01	; 1
    219c:	40 3a       	cpi	r20, 0xA0	; 160
    219e:	5f 07       	cpc	r21, r31
    21a0:	10 f0       	brcs	.+4      	; 0x21a6 <main+0x758>
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
							while(RX_in == RX_read);//wait for byte
    21a6:	80 91 28 01 	lds	r24, 0x0128
    21aa:	90 91 29 01 	lds	r25, 0x0129
    21ae:	48 17       	cp	r20, r24
    21b0:	59 07       	cpc	r21, r25
    21b2:	c9 f3       	breq	.-14     	; 0x21a6 <main+0x758>
					
					//<ctrl>e, erase block======================================================
					else if(RX_array[RX_read] == 5)//^e
					{
						//need 4 bytes
						for (y = 0; y < 4; y++)
    21b4:	2f 5f       	subi	r18, 0xFF	; 255
    21b6:	24 30       	cpi	r18, 0x04	; 4
    21b8:	71 f7       	brne	.-36     	; 0x2196 <main+0x748>
    21ba:	50 93 2b 01 	sts	0x012B, r21
    21be:	40 93 2a 01 	sts	0x012A, r20
							RX_read++;
							if(RX_read >= 416) RX_read = 0;
							while(RX_in == RX_read);//wait for byte
						}
						
						erase_block(RX_array[RX_read-3], RX_array[RX_read-2], RX_array[RX_read-1], RX_array[RX_read]);
    21c2:	fa 01       	movw	r30, r20
    21c4:	e9 5c       	subi	r30, 0xC9	; 201
    21c6:	fe 4f       	sbci	r31, 0xFE	; 254
    21c8:	df 01       	movw	r26, r30
    21ca:	13 97       	sbiw	r26, 0x03	; 3
    21cc:	9f 01       	movw	r18, r30
    21ce:	22 50       	subi	r18, 0x02	; 2
    21d0:	30 40       	sbci	r19, 0x00	; 0
    21d2:	af 01       	movw	r20, r30
    21d4:	41 50       	subi	r20, 0x01	; 1
    21d6:	50 40       	sbci	r21, 0x00	; 0
    21d8:	8c 91       	ld	r24, X
    21da:	d9 01       	movw	r26, r18
    21dc:	6c 91       	ld	r22, X
    21de:	da 01       	movw	r26, r20
    21e0:	4c 91       	ld	r20, X
    21e2:	20 81       	ld	r18, Z
    21e4:	0e 94 42 05 	call	0xa84	; 0xa84 <erase_block>
    21e8:	3a ce       	rjmp	.-908    	; 0x1e5e <main+0x410>
					else if((RX_array[RX_read] == 24) | (RX_array[RX_read] == 25))//^x or ^y
					{
						RX_read++;
						if(RX_read >= 416) RX_read = 0;
						while(RX_in == RX_read);//wait for byte
						if (RX_array[RX_read-1] == 24) x_offset = RX_array[RX_read];
    21ea:	80 81       	ld	r24, Z
    21ec:	80 93 24 01 	sts	0x0124, r24
    21f0:	59 cf       	rjmp	.-334    	; 0x20a4 <main+0x656>
						if(RX_read >= 416) RX_read = 0;
					}
					
					
					//box======================================================
					else if(RX_array[RX_read] == 15)//^o
    21f2:	20 e0       	ldi	r18, 0x00	; 0
					{
						//need 4 bytes
						for (y = 0; y < 4; y++)
						{
							RX_read++;
    21f4:	4f 5f       	subi	r20, 0xFF	; 255
    21f6:	5f 4f       	sbci	r21, 0xFF	; 255
							if(RX_read >= 416) RX_read = 0;
    21f8:	e1 e0       	ldi	r30, 0x01	; 1
    21fa:	40 3a       	cpi	r20, 0xA0	; 160
    21fc:	5e 07       	cpc	r21, r30
    21fe:	10 f0       	brcs	.+4      	; 0x2204 <main+0x7b6>
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	50 e0       	ldi	r21, 0x00	; 0
							while(RX_in == RX_read);//wait for byte
    2204:	80 91 28 01 	lds	r24, 0x0128
    2208:	90 91 29 01 	lds	r25, 0x0129
    220c:	84 17       	cp	r24, r20
    220e:	95 07       	cpc	r25, r21
    2210:	c9 f3       	breq	.-14     	; 0x2204 <main+0x7b6>
					
					//box======================================================
					else if(RX_array[RX_read] == 15)//^o
					{
						//need 4 bytes
						for (y = 0; y < 4; y++)
    2212:	2f 5f       	subi	r18, 0xFF	; 255
    2214:	24 30       	cpi	r18, 0x04	; 4
    2216:	71 f7       	brne	.-36     	; 0x21f4 <main+0x7a6>
    2218:	50 93 2b 01 	sts	0x012B, r21
    221c:	40 93 2a 01 	sts	0x012A, r20
							RX_read++;
							if(RX_read >= 416) RX_read = 0;
							while(RX_in == RX_read);//wait for byte
						}
						
						box(RX_array[RX_read-3], RX_array[RX_read-2], RX_array[RX_read-1], RX_array[RX_read]);
    2220:	fa 01       	movw	r30, r20
    2222:	e9 5c       	subi	r30, 0xC9	; 201
    2224:	fe 4f       	sbci	r31, 0xFE	; 254
    2226:	df 01       	movw	r26, r30
    2228:	13 97       	sbiw	r26, 0x03	; 3
    222a:	9f 01       	movw	r18, r30
    222c:	22 50       	subi	r18, 0x02	; 2
    222e:	30 40       	sbci	r19, 0x00	; 0
    2230:	af 01       	movw	r20, r30
    2232:	41 50       	subi	r20, 0x01	; 1
    2234:	50 40       	sbci	r21, 0x00	; 0
    2236:	8c 91       	ld	r24, X
    2238:	d9 01       	movw	r26, r18
    223a:	6c 91       	ld	r22, X
    223c:	da 01       	movw	r26, r20
    223e:	4c 91       	ld	r20, X
    2240:	20 81       	ld	r18, Z
    2242:	0e 94 c5 07 	call	0xf8a	; 0xf8a <box>
    2246:	0b ce       	rjmp	.-1002   	; 0x1e5e <main+0x410>
		EEPROM_write((unsigned int) BPS, 6);
		
		sei();//Enable Interrupts
	}
	
	else (set_baud(baud_rate));
    2248:	80 91 02 01 	lds	r24, 0x0102
    224c:	0e 94 c9 03 	call	0x792	; 0x792 <set_baud>
    2250:	dd cc       	rjmp	.-1606   	; 0x1c0c <main+0x1be>
	
	
	//Reset the display=================================================
	if (display == 0)
	{
		PORTC &= ~(1 << RESET);
    2252:	43 98       	cbi	0x08, 3	; 8
		delay_ms(50);
    2254:	82 e3       	ldi	r24, 0x32	; 50
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <delay_ms>
		PORTC |= (1 << RESET);
    225c:	43 9a       	sbi	0x08, 3	; 8
		
		clear_screen();
    225e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <clear_screen>

		set_page(0);
    2262:	80 e0       	ldi	r24, 0x00	; 0
    2264:	0e 94 5f 02 	call	0x4be	; 0x4be <set_page>
		
		set_x(0);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	0e 94 2b 02 	call	0x456	; 0x456 <set_x>
		
		display_on();
    226e:	0e 94 c3 02 	call	0x586	; 0x586 <display_on>
		
		//set display start line to 0
		//set control lines
		PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
    2272:	88 b1       	in	r24, 0x08	; 8
    2274:	88 7f       	andi	r24, 0xF8	; 248
    2276:	88 b9       	out	0x08, r24	; 8
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
    2278:	85 b1       	in	r24, 0x05	; 5
    227a:	8c 7f       	andi	r24, 0xFC	; 252
    227c:	85 b9       	out	0x05, r24	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
    227e:	8b b1       	in	r24, 0x0b	; 11
    2280:	83 70       	andi	r24, 0x03	; 3
    2282:	8b b9       	out	0x0b, r24	; 11
	
	PORTB |= (data & 0x03);
    2284:	85 b1       	in	r24, 0x05	; 5
    2286:	85 b9       	out	0x05, r24	; 5
	PORTD |= (data & 0xFC);
    2288:	8b b1       	in	r24, 0x0b	; 11
    228a:	80 6c       	ori	r24, 0xC0	; 192
    228c:	8b b9       	out	0x0b, r24	; 11
    228e:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    2290:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    2292:	8f 5f       	subi	r24, 0xFF	; 255
    2294:	8e 31       	cpi	r24, 0x1E	; 30
    2296:	e1 f7       	brne	.-8      	; 0x2290 <main+0x842>
		PORTC &= ~((1 << EN) | (1 << R_W) | (1 << RS));//down
		
		set_data(0xC0);
		//set_data(0xFF);
		delay();
		PORTC |= (1 << EN);//up
    2298:	40 9a       	sbi	0x08, 0	; 8
    229a:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    229c:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	8e 31       	cpi	r24, 0x1E	; 30
    22a2:	e1 f7       	brne	.-8      	; 0x229c <main+0x84e>
		set_data(0xC0);
		//set_data(0xFF);
		delay();
		PORTC |= (1 << EN);//up
		delay();
		PORTC &= ~(1 << EN);//down
    22a4:	40 98       	cbi	0x08, 0	; 8
    22a6:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    22a8:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	8e 31       	cpi	r24, 0x1E	; 30
    22ae:	e1 f7       	brne	.-8      	; 0x22a8 <main+0x85a>
		delay();
		PORTC |= (1 << EN);//up
		delay();
		PORTC &= ~(1 << EN);//down
		delay();
		PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
    22b0:	88 b1       	in	r24, 0x08	; 8
    22b2:	87 60       	ori	r24, 0x07	; 7
    22b4:	88 b9       	out	0x08, r24	; 8
    22b6:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    22b8:	00 00       	nop
void delay(void)
{
	char y;
	
	//for(y = 0; y < 20; y++)
	for(y = 0; y < 30; y++)
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	8e 31       	cpi	r24, 0x1E	; 30
    22be:	e1 f7       	brne	.-8      	; 0x22b8 <main+0x86a>
		delay();
		PORTC |= ((1 << EN) | (1 << R_W) | (1 << RS));//all high
		
		delay();
		
		x_offset = 0;
    22c0:	10 92 24 01 	sts	0x0124, r1
	
		set_page(0);
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	0e 94 5f 02 	call	0x4be	; 0x4be <set_page>
    22ca:	53 cc       	rjmp	.-1882   	; 0x1b72 <main+0x124>

000022cc <rprintf_devopen>:

static int (*putcharfunc)(int c);

void rprintf_devopen( int(*put)(int) )
{
   putcharfunc = put;
    22cc:	90 93 36 01 	sts	0x0136, r25
    22d0:	80 93 35 01 	sts	0x0135, r24
}
    22d4:	08 95       	ret

000022d6 <myputchar>:

static void myputchar(unsigned char c)
{
    22d6:	1f 93       	push	r17
    22d8:	18 2f       	mov	r17, r24
	if(c == '\n') putcharfunc('\r');
    22da:	8a 30       	cpi	r24, 0x0A	; 10
    22dc:	49 f0       	breq	.+18     	; 0x22f0 <myputchar+0x1a>
	putcharfunc(c);
    22de:	e0 91 35 01 	lds	r30, 0x0135
    22e2:	f0 91 36 01 	lds	r31, 0x0136
    22e6:	81 2f       	mov	r24, r17
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	09 95       	icall
}
    22ec:	1f 91       	pop	r17
    22ee:	08 95       	ret
   putcharfunc = put;
}

static void myputchar(unsigned char c)
{
	if(c == '\n') putcharfunc('\r');
    22f0:	e0 91 35 01 	lds	r30, 0x0135
    22f4:	f0 91 36 01 	lds	r31, 0x0136
    22f8:	8d e0       	ldi	r24, 0x0D	; 13
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	09 95       	icall
    22fe:	ef cf       	rjmp	.-34     	; 0x22de <myputchar+0x8>

00002300 <rprintf>:
	putcharfunc(c);
}

void rprintf(char const *format, ...)
{
    2300:	2f 92       	push	r2
    2302:	3f 92       	push	r3
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	df 93       	push	r29
    2322:	cf 93       	push	r28
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	2d 97       	sbiw	r28, 0x0d	; 13
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	8e 01       	movw	r16, r28
    2336:	0e 5d       	subi	r16, 0xDE	; 222
    2338:	1f 4f       	sbci	r17, 0xFF	; 255
    233a:	f8 01       	movw	r30, r16
    233c:	21 90       	ld	r2, Z+
    233e:	31 90       	ld	r3, Z+
    2340:	8f 01       	movw	r16, r30
  unsigned char fill;
  unsigned char width;

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
    2342:	f1 01       	movw	r30, r2
    2344:	81 91       	ld	r24, Z+
    2346:	1f 01       	movw	r2, r30
    2348:	85 32       	cpi	r24, 0x25	; 37
    234a:	61 f0       	breq	.+24     	; 0x2364 <rprintf+0x64>
      if (!format_flag){va_end (ap); return;}
    234c:	88 23       	and	r24, r24
    234e:	09 f4       	brne	.+2      	; 0x2352 <rprintf+0x52>
    2350:	b3 c0       	rjmp	.+358    	; 0x24b8 <rprintf+0x1b8>
      myputchar(format_flag);
    2352:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <myputchar>
    2356:	28 01       	movw	r4, r16
    2358:	82 01       	movw	r16, r4
  unsigned char fill;
  unsigned char width;

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
    235a:	f1 01       	movw	r30, r2
    235c:	81 91       	ld	r24, Z+
    235e:	1f 01       	movw	r2, r30
    2360:	85 32       	cpi	r24, 0x25	; 37
    2362:	a1 f7       	brne	.-24     	; 0x234c <rprintf+0x4c>
    }

    issigned=0; //default unsigned
    base = 10;

    format_flag = *format++; //get char after '%'
    2364:	91 91       	ld	r25, Z+
    2366:	1f 01       	movw	r2, r30

#ifdef PADDING
    width=0; //no formatting
    fill=0;  //no formatting
    if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
    2368:	90 33       	cpi	r25, 0x30	; 48
    236a:	09 f4       	brne	.+2      	; 0x236e <rprintf+0x6e>
    236c:	9a c0       	rjmp	.+308    	; 0x24a2 <rprintf+0x1a2>
    236e:	90 32       	cpi	r25, 0x20	; 32
    2370:	09 f4       	brne	.+2      	; 0x2374 <rprintf+0x74>
    2372:	97 c0       	rjmp	.+302    	; 0x24a2 <rprintf+0x1a2>
    2374:	89 2f       	mov	r24, r25
    2376:	66 24       	eor	r6, r6
    2378:	1d 86       	std	Y+13, r1	; 0x0d
#endif

#ifdef USE_LONG
    islong=0; //default int value
#ifdef USE_UPPER
    if(format_flag=='l' || format_flag=='L') //Long value 
    237a:	8c 36       	cpi	r24, 0x6C	; 108
    237c:	41 f1       	breq	.+80     	; 0x23ce <rprintf+0xce>
    237e:	8c 34       	cpi	r24, 0x4C	; 76
    2380:	31 f1       	breq	.+76     	; 0x23ce <rprintf+0xce>
    2382:	90 e0       	ldi	r25, 0x00	; 0
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    2384:	88 35       	cpi	r24, 0x58	; 88
    2386:	49 f1       	breq	.+82     	; 0x23da <rprintf+0xda>
    2388:	89 35       	cpi	r24, 0x59	; 89
    238a:	68 f4       	brcc	.+26     	; 0x23a6 <rprintf+0xa6>
    238c:	89 34       	cpi	r24, 0x49	; 73
    238e:	09 f4       	brne	.+2      	; 0x2392 <rprintf+0x92>
    2390:	b4 c0       	rjmp	.+360    	; 0x24fa <rprintf+0x1fa>
    2392:	8a 34       	cpi	r24, 0x4A	; 74
    2394:	08 f0       	brcs	.+2      	; 0x2398 <rprintf+0x98>
    2396:	01 c1       	rjmp	.+514    	; 0x259a <rprintf+0x29a>
    2398:	83 34       	cpi	r24, 0x43	; 67
    239a:	71 f0       	breq	.+28     	; 0x23b8 <rprintf+0xb8>
    239c:	84 34       	cpi	r24, 0x44	; 68
    239e:	09 f4       	brne	.+2      	; 0x23a2 <rprintf+0xa2>
    23a0:	ac c0       	rjmp	.+344    	; 0x24fa <rprintf+0x1fa>
    23a2:	28 01       	movw	r4, r16
    23a4:	10 c0       	rjmp	.+32     	; 0x23c6 <rprintf+0xc6>
    23a6:	89 36       	cpi	r24, 0x69	; 105
    23a8:	09 f4       	brne	.+2      	; 0x23ac <rprintf+0xac>
    23aa:	a7 c0       	rjmp	.+334    	; 0x24fa <rprintf+0x1fa>
    23ac:	8a 36       	cpi	r24, 0x6A	; 106
    23ae:	08 f0       	brcs	.+2      	; 0x23b2 <rprintf+0xb2>
    23b0:	d5 c0       	rjmp	.+426    	; 0x255c <rprintf+0x25c>
    23b2:	83 36       	cpi	r24, 0x63	; 99
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <rprintf+0xb8>
    23b6:	9e c0       	rjmp	.+316    	; 0x24f4 <rprintf+0x1f4>
#ifdef USE_CHAR
    case 'c':
#ifdef USE_UPPER
    case 'C':
#endif
      format_flag = va_arg(ap,int);
    23b8:	f2 e0       	ldi	r31, 0x02	; 2
    23ba:	4f 2e       	mov	r4, r31
    23bc:	51 2c       	mov	r5, r1
    23be:	40 0e       	add	r4, r16
    23c0:	51 1e       	adc	r5, r17
    23c2:	f8 01       	movw	r30, r16
    23c4:	80 81       	ld	r24, Z
      // no break -> run into default
#endif

    default:
      myputchar(format_flag);
    23c6:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <myputchar>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    23ca:	82 01       	movw	r16, r4
    23cc:	c6 cf       	rjmp	.-116    	; 0x235a <rprintf+0x5a>
#else
    if(format_flag=='l') //Long value 
#endif
     {
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
    23ce:	f1 01       	movw	r30, r2
    23d0:	81 91       	ld	r24, Z+
    23d2:	1f 01       	movw	r2, r30
    23d4:	91 e0       	ldi	r25, 0x01	; 1
     }
#endif

    switch (format_flag)
    23d6:	88 35       	cpi	r24, 0x58	; 88
    23d8:	b9 f6       	brne	.-82     	; 0x2388 <rprintf+0x88>
    23da:	a0 e1       	ldi	r26, 0x10	; 16
    23dc:	8a 2e       	mov	r8, r26
    23de:	91 2c       	mov	r9, r1
    23e0:	a1 2c       	mov	r10, r1
    23e2:	b1 2c       	mov	r11, r1
        u_val = (unsigned long)s_val;
       }
      else //Unsigned types
       {
#ifdef USE_LONG
        if(islong) { u_val = va_arg(ap,unsigned long); }
    23e4:	99 23       	and	r25, r25
    23e6:	09 f4       	brne	.+2      	; 0x23ea <rprintf+0xea>
    23e8:	e5 c0       	rjmp	.+458    	; 0x25b4 <rprintf+0x2b4>
    23ea:	44 e0       	ldi	r20, 0x04	; 4
    23ec:	44 2e       	mov	r4, r20
    23ee:	51 2c       	mov	r5, r1
    23f0:	40 0e       	add	r4, r16
    23f2:	51 1e       	adc	r5, r17
    23f4:	f8 01       	movw	r30, r16
    23f6:	c0 80       	ld	r12, Z
    23f8:	d1 80       	ldd	r13, Z+1	; 0x01
    23fa:	e2 80       	ldd	r14, Z+2	; 0x02
    23fc:	f3 80       	ldd	r15, Z+3	; 0x03
        u_val = va_arg(ap,unsigned int);
#endif
       }
    
      ptr = scratch + SCRATCH;
      *--ptr = 0;
    23fe:	8e 01       	movw	r16, r28
    2400:	04 5f       	subi	r16, 0xF4	; 244
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	1c 86       	std	Y+12, r1	; 0x0c
      do
       {
        char ch = u_val % base + '0';
    2406:	c7 01       	movw	r24, r14
    2408:	b6 01       	movw	r22, r12
    240a:	a5 01       	movw	r20, r10
    240c:	94 01       	movw	r18, r8
    240e:	0e 94 56 15 	call	0x2aac	; 0x2aac <__udivmodsi4>
    2412:	20 e3       	ldi	r18, 0x30	; 48
    2414:	72 2e       	mov	r7, r18
    2416:	76 0e       	add	r7, r22
#ifdef USE_HEX
        if (ch > '9')
    2418:	f9 e3       	ldi	r31, 0x39	; 57
    241a:	f7 15       	cp	r31, r7
    241c:	18 f4       	brcc	.+6      	; 0x2424 <rprintf+0x124>
         {
          ch += 'a' - '9' - 1;
#ifdef USE_UPPERHEX
          ch-=0x20;
    241e:	97 e3       	ldi	r25, 0x37	; 55
    2420:	79 2e       	mov	r7, r25
    2422:	76 0e       	add	r7, r22
#endif
         }
#endif          
        *--ptr = ch;
    2424:	f8 01       	movw	r30, r16
    2426:	72 92       	st	-Z, r7
    2428:	8f 01       	movw	r16, r30
        u_val /= base;
    242a:	c7 01       	movw	r24, r14
    242c:	b6 01       	movw	r22, r12
    242e:	a5 01       	movw	r20, r10
    2430:	94 01       	movw	r18, r8
    2432:	0e 94 56 15 	call	0x2aac	; 0x2aac <__udivmodsi4>
    2436:	c9 01       	movw	r24, r18
    2438:	da 01       	movw	r26, r20
    243a:	6c 01       	movw	r12, r24
    243c:	7d 01       	movw	r14, r26

#ifdef PADDING
        if(width) width--; //calculate number of padding chars
    243e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2440:	ff 23       	and	r31, r31
    2442:	11 f0       	breq	.+4      	; 0x2448 <rprintf+0x148>
    2444:	f1 50       	subi	r31, 0x01	; 1
    2446:	fd 87       	std	Y+13, r31	; 0x0d
#endif
      } while (u_val);
    2448:	00 97       	sbiw	r24, 0x00	; 0
    244a:	a1 05       	cpc	r26, r1
    244c:	b1 05       	cpc	r27, r1
    244e:	d9 f6       	brne	.-74     	; 0x2406 <rprintf+0x106>
    2450:	a8 01       	movw	r20, r16

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
    2452:	2d 85       	ldd	r18, Y+13	; 0x0d
    2454:	22 23       	and	r18, r18
    2456:	09 f4       	brne	.+2      	; 0x245a <rprintf+0x15a>
    2458:	b9 c0       	rjmp	.+370    	; 0x25cc <rprintf+0x2cc>
    245a:	8d 85       	ldd	r24, Y+13	; 0x0d
    245c:	81 50       	subi	r24, 0x01	; 1
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	01 50       	subi	r16, 0x01	; 1
    2464:	10 40       	sbci	r17, 0x00	; 0
    2466:	c8 01       	movw	r24, r16
    2468:	82 1b       	sub	r24, r18
    246a:	93 0b       	sbc	r25, r19
    246c:	0f 5f       	subi	r16, 0xFF	; 255
    246e:	1f 4f       	sbci	r17, 0xFF	; 255
    2470:	f8 01       	movw	r30, r16
    2472:	62 92       	st	-Z, r6
    2474:	8f 01       	movw	r16, r30
    2476:	e8 17       	cp	r30, r24
    2478:	f9 07       	cpc	r31, r25
    247a:	d1 f7       	brne	.-12     	; 0x2470 <rprintf+0x170>
    247c:	89 01       	movw	r16, r18
    247e:	00 95       	com	r16
    2480:	10 95       	com	r17
    2482:	04 0f       	add	r16, r20
    2484:	15 1f       	adc	r17, r21
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    2486:	66 20       	and	r6, r6
    2488:	09 f4       	brne	.+2      	; 0x248c <rprintf+0x18c>
    248a:	66 cf       	rjmp	.-308    	; 0x2358 <rprintf+0x58>
    248c:	86 2d       	mov	r24, r6
    248e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <myputchar>
    2492:	0f 5f       	subi	r16, 0xFF	; 255
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	f8 01       	movw	r30, r16
    2498:	60 80       	ld	r6, Z
    249a:	66 20       	and	r6, r6
    249c:	b9 f7       	brne	.-18     	; 0x248c <rprintf+0x18c>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    249e:	82 01       	movw	r16, r4
    24a0:	5c cf       	rjmp	.-328    	; 0x235a <rprintf+0x5a>
    width=0; //no formatting
    fill=0;  //no formatting
    if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
     {
      fill=format_flag;
      format_flag = *format++; //get char after padding char
    24a2:	f1 01       	movw	r30, r2
    24a4:	81 91       	ld	r24, Z+
    24a6:	1f 01       	movw	r2, r30
      if(format_flag>='0' && format_flag<='9')
    24a8:	f8 2f       	mov	r31, r24
    24aa:	f0 53       	subi	r31, 0x30	; 48
    24ac:	fd 87       	std	Y+13, r31	; 0x0d
    24ae:	fa 30       	cpi	r31, 0x0A	; 10
    24b0:	e0 f0       	brcs	.+56     	; 0x24ea <rprintf+0x1ea>
    24b2:	69 2e       	mov	r6, r25
    24b4:	1d 86       	std	Y+13, r1	; 0x0d
    24b6:	61 cf       	rjmp	.-318    	; 0x237a <rprintf+0x7a>
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    }
  }
}
    24b8:	2d 96       	adiw	r28, 0x0d	; 13
    24ba:	0f b6       	in	r0, 0x3f	; 63
    24bc:	f8 94       	cli
    24be:	de bf       	out	0x3e, r29	; 62
    24c0:	0f be       	out	0x3f, r0	; 63
    24c2:	cd bf       	out	0x3d, r28	; 61
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	ff 90       	pop	r15
    24ce:	ef 90       	pop	r14
    24d0:	df 90       	pop	r13
    24d2:	cf 90       	pop	r12
    24d4:	bf 90       	pop	r11
    24d6:	af 90       	pop	r10
    24d8:	9f 90       	pop	r9
    24da:	8f 90       	pop	r8
    24dc:	7f 90       	pop	r7
    24de:	6f 90       	pop	r6
    24e0:	5f 90       	pop	r5
    24e2:	4f 90       	pop	r4
    24e4:	3f 90       	pop	r3
    24e6:	2f 90       	pop	r2
    24e8:	08 95       	ret
      fill=format_flag;
      format_flag = *format++; //get char after padding char
      if(format_flag>='0' && format_flag<='9')
       {
        width=format_flag-'0';
        format_flag = *format++; //get char after width char
    24ea:	f1 01       	movw	r30, r2
    24ec:	81 91       	ld	r24, Z+
    24ee:	1f 01       	movw	r2, r30
    24f0:	69 2e       	mov	r6, r25
    24f2:	43 cf       	rjmp	.-378    	; 0x237a <rprintf+0x7a>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    24f4:	84 36       	cpi	r24, 0x64	; 100
    24f6:	09 f0       	breq	.+2      	; 0x24fa <rprintf+0x1fa>
    24f8:	54 cf       	rjmp	.-344    	; 0x23a2 <rprintf+0xa2>
    CONVERSION_LOOP:

      if(issigned) //Signed types
       {
#ifdef USE_LONG
        if(islong) { s_val = va_arg(ap,long); }
    24fa:	99 23       	and	r25, r25
    24fc:	b9 f4       	brne	.+46     	; 0x252c <rprintf+0x22c>
        else { s_val = va_arg(ap,int); }
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	46 2e       	mov	r4, r22
    2502:	51 2c       	mov	r5, r1
    2504:	40 0e       	add	r4, r16
    2506:	51 1e       	adc	r5, r17
    2508:	f8 01       	movw	r30, r16
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	7c 01       	movw	r14, r24
    2510:	00 27       	eor	r16, r16
    2512:	f7 fc       	sbrc	r15, 7
    2514:	00 95       	com	r16
    2516:	10 2f       	mov	r17, r16
#else
        s_val = va_arg(ap,int);
#endif

        if(s_val < 0) //Value negativ ?
    2518:	17 fd       	sbrc	r17, 7
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <rprintf+0x244>
         {
          s_val = - s_val; //Make it positiv
          myputchar('-');    //Output sign
         }

        u_val = (unsigned long)s_val;
    251c:	67 01       	movw	r12, r14
    251e:	78 01       	movw	r14, r16
    2520:	5a e0       	ldi	r21, 0x0A	; 10
    2522:	85 2e       	mov	r8, r21
    2524:	91 2c       	mov	r9, r1
    2526:	a1 2c       	mov	r10, r1
    2528:	b1 2c       	mov	r11, r1
    252a:	69 cf       	rjmp	.-302    	; 0x23fe <rprintf+0xfe>
    CONVERSION_LOOP:

      if(issigned) //Signed types
       {
#ifdef USE_LONG
        if(islong) { s_val = va_arg(ap,long); }
    252c:	74 e0       	ldi	r23, 0x04	; 4
    252e:	47 2e       	mov	r4, r23
    2530:	51 2c       	mov	r5, r1
    2532:	40 0e       	add	r4, r16
    2534:	51 1e       	adc	r5, r17
    2536:	f8 01       	movw	r30, r16
    2538:	e0 80       	ld	r14, Z
    253a:	f1 80       	ldd	r15, Z+1	; 0x01
    253c:	02 81       	ldd	r16, Z+2	; 0x02
    253e:	13 81       	ldd	r17, Z+3	; 0x03
        else { s_val = va_arg(ap,int); }
#else
        s_val = va_arg(ap,int);
#endif

        if(s_val < 0) //Value negativ ?
    2540:	17 ff       	sbrs	r17, 7
    2542:	ec cf       	rjmp	.-40     	; 0x251c <rprintf+0x21c>
         {
          s_val = - s_val; //Make it positiv
    2544:	10 95       	com	r17
    2546:	00 95       	com	r16
    2548:	f0 94       	com	r15
    254a:	e0 94       	com	r14
    254c:	e1 1c       	adc	r14, r1
    254e:	f1 1c       	adc	r15, r1
    2550:	01 1d       	adc	r16, r1
    2552:	11 1d       	adc	r17, r1
          myputchar('-');    //Output sign
    2554:	8d e2       	ldi	r24, 0x2D	; 45
    2556:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <myputchar>
    255a:	e0 cf       	rjmp	.-64     	; 0x251c <rprintf+0x21c>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    255c:	85 37       	cpi	r24, 0x75	; 117
    255e:	11 f1       	breq	.+68     	; 0x25a4 <rprintf+0x2a4>
    2560:	88 37       	cpi	r24, 0x78	; 120
    2562:	09 f4       	brne	.+2      	; 0x2566 <rprintf+0x266>
    2564:	3a cf       	rjmp	.-396    	; 0x23da <rprintf+0xda>
    2566:	83 37       	cpi	r24, 0x73	; 115
    2568:	09 f0       	breq	.+2      	; 0x256c <rprintf+0x26c>
    256a:	1b cf       	rjmp	.-458    	; 0x23a2 <rprintf+0xa2>
#ifdef USE_STRING
#ifdef USE_UPPER
    case 'S':
#endif
    case 's':
      ptr = (unsigned char*)va_arg(ap,char *);
    256c:	e2 e0       	ldi	r30, 0x02	; 2
    256e:	4e 2e       	mov	r4, r30
    2570:	51 2c       	mov	r5, r1
    2572:	40 0e       	add	r4, r16
    2574:	51 1e       	adc	r5, r17
    2576:	f8 01       	movw	r30, r16
    2578:	00 81       	ld	r16, Z
    257a:	11 81       	ldd	r17, Z+1	; 0x01
      while(*ptr) { myputchar(*ptr); ptr++; }
    257c:	f8 01       	movw	r30, r16
    257e:	80 81       	ld	r24, Z
    2580:	88 23       	and	r24, r24
    2582:	09 f4       	brne	.+2      	; 0x2586 <rprintf+0x286>
    2584:	e9 ce       	rjmp	.-558    	; 0x2358 <rprintf+0x58>
    2586:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <myputchar>
    258a:	0f 5f       	subi	r16, 0xFF	; 255
    258c:	1f 4f       	sbci	r17, 0xFF	; 255
    258e:	f8 01       	movw	r30, r16
    2590:	80 81       	ld	r24, Z
    2592:	88 23       	and	r24, r24
    2594:	c1 f7       	brne	.-16     	; 0x2586 <rprintf+0x286>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    2596:	82 01       	movw	r16, r4
    2598:	e0 ce       	rjmp	.-576    	; 0x235a <rprintf+0x5a>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    259a:	83 35       	cpi	r24, 0x53	; 83
    259c:	39 f3       	breq	.-50     	; 0x256c <rprintf+0x26c>
    259e:	85 35       	cpi	r24, 0x55	; 85
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <rprintf+0x2a4>
    25a2:	ff ce       	rjmp	.-514    	; 0x23a2 <rprintf+0xa2>

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    25a4:	8a e0       	ldi	r24, 0x0A	; 10
    25a6:	88 2e       	mov	r8, r24
    25a8:	91 2c       	mov	r9, r1
    25aa:	a1 2c       	mov	r10, r1
    25ac:	b1 2c       	mov	r11, r1
        u_val = (unsigned long)s_val;
       }
      else //Unsigned types
       {
#ifdef USE_LONG
        if(islong) { u_val = va_arg(ap,unsigned long); }
    25ae:	99 23       	and	r25, r25
    25b0:	09 f0       	breq	.+2      	; 0x25b4 <rprintf+0x2b4>
    25b2:	1b cf       	rjmp	.-458    	; 0x23ea <rprintf+0xea>
        else { u_val = va_arg(ap,unsigned int); }
    25b4:	32 e0       	ldi	r19, 0x02	; 2
    25b6:	43 2e       	mov	r4, r19
    25b8:	51 2c       	mov	r5, r1
    25ba:	40 0e       	add	r4, r16
    25bc:	51 1e       	adc	r5, r17
    25be:	f8 01       	movw	r30, r16
    25c0:	80 81       	ld	r24, Z
    25c2:	91 81       	ldd	r25, Z+1	; 0x01
    25c4:	6c 01       	movw	r12, r24
    25c6:	ee 24       	eor	r14, r14
    25c8:	ff 24       	eor	r15, r15
    25ca:	19 cf       	rjmp	.-462    	; 0x23fe <rprintf+0xfe>
        if(width) width--; //calculate number of padding chars
#endif
      } while (u_val);

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
    25cc:	67 2c       	mov	r6, r7
    25ce:	5b cf       	rjmp	.-330    	; 0x2486 <rprintf+0x186>

000025d0 <__subsf3>:
    25d0:	50 58       	subi	r21, 0x80	; 128

000025d2 <__addsf3>:
    25d2:	bb 27       	eor	r27, r27
    25d4:	aa 27       	eor	r26, r26
    25d6:	0e d0       	rcall	.+28     	; 0x25f4 <__addsf3x>
    25d8:	4d c1       	rjmp	.+666    	; 0x2874 <__fp_round>
    25da:	3e d1       	rcall	.+636    	; 0x2858 <__fp_pscA>
    25dc:	30 f0       	brcs	.+12     	; 0x25ea <__addsf3+0x18>
    25de:	43 d1       	rcall	.+646    	; 0x2866 <__fp_pscB>
    25e0:	20 f0       	brcs	.+8      	; 0x25ea <__addsf3+0x18>
    25e2:	31 f4       	brne	.+12     	; 0x25f0 <__addsf3+0x1e>
    25e4:	9f 3f       	cpi	r25, 0xFF	; 255
    25e6:	11 f4       	brne	.+4      	; 0x25ec <__addsf3+0x1a>
    25e8:	1e f4       	brtc	.+6      	; 0x25f0 <__addsf3+0x1e>
    25ea:	33 c1       	rjmp	.+614    	; 0x2852 <__fp_nan>
    25ec:	0e f4       	brtc	.+2      	; 0x25f0 <__addsf3+0x1e>
    25ee:	e0 95       	com	r30
    25f0:	e7 fb       	bst	r30, 7
    25f2:	29 c1       	rjmp	.+594    	; 0x2846 <__fp_inf>

000025f4 <__addsf3x>:
    25f4:	e9 2f       	mov	r30, r25
    25f6:	4f d1       	rcall	.+670    	; 0x2896 <__fp_split3>
    25f8:	80 f3       	brcs	.-32     	; 0x25da <__addsf3+0x8>
    25fa:	ba 17       	cp	r27, r26
    25fc:	62 07       	cpc	r22, r18
    25fe:	73 07       	cpc	r23, r19
    2600:	84 07       	cpc	r24, r20
    2602:	95 07       	cpc	r25, r21
    2604:	18 f0       	brcs	.+6      	; 0x260c <__addsf3x+0x18>
    2606:	71 f4       	brne	.+28     	; 0x2624 <__addsf3x+0x30>
    2608:	9e f5       	brtc	.+102    	; 0x2670 <__addsf3x+0x7c>
    260a:	67 c1       	rjmp	.+718    	; 0x28da <__fp_zero>
    260c:	0e f4       	brtc	.+2      	; 0x2610 <__addsf3x+0x1c>
    260e:	e0 95       	com	r30
    2610:	0b 2e       	mov	r0, r27
    2612:	ba 2f       	mov	r27, r26
    2614:	a0 2d       	mov	r26, r0
    2616:	0b 01       	movw	r0, r22
    2618:	b9 01       	movw	r22, r18
    261a:	90 01       	movw	r18, r0
    261c:	0c 01       	movw	r0, r24
    261e:	ca 01       	movw	r24, r20
    2620:	a0 01       	movw	r20, r0
    2622:	11 24       	eor	r1, r1
    2624:	ff 27       	eor	r31, r31
    2626:	59 1b       	sub	r21, r25
    2628:	99 f0       	breq	.+38     	; 0x2650 <__addsf3x+0x5c>
    262a:	59 3f       	cpi	r21, 0xF9	; 249
    262c:	50 f4       	brcc	.+20     	; 0x2642 <__addsf3x+0x4e>
    262e:	50 3e       	cpi	r21, 0xE0	; 224
    2630:	68 f1       	brcs	.+90     	; 0x268c <__addsf3x+0x98>
    2632:	1a 16       	cp	r1, r26
    2634:	f0 40       	sbci	r31, 0x00	; 0
    2636:	a2 2f       	mov	r26, r18
    2638:	23 2f       	mov	r18, r19
    263a:	34 2f       	mov	r19, r20
    263c:	44 27       	eor	r20, r20
    263e:	58 5f       	subi	r21, 0xF8	; 248
    2640:	f3 cf       	rjmp	.-26     	; 0x2628 <__addsf3x+0x34>
    2642:	46 95       	lsr	r20
    2644:	37 95       	ror	r19
    2646:	27 95       	ror	r18
    2648:	a7 95       	ror	r26
    264a:	f0 40       	sbci	r31, 0x00	; 0
    264c:	53 95       	inc	r21
    264e:	c9 f7       	brne	.-14     	; 0x2642 <__addsf3x+0x4e>
    2650:	7e f4       	brtc	.+30     	; 0x2670 <__addsf3x+0x7c>
    2652:	1f 16       	cp	r1, r31
    2654:	ba 0b       	sbc	r27, r26
    2656:	62 0b       	sbc	r22, r18
    2658:	73 0b       	sbc	r23, r19
    265a:	84 0b       	sbc	r24, r20
    265c:	ba f0       	brmi	.+46     	; 0x268c <__addsf3x+0x98>
    265e:	91 50       	subi	r25, 0x01	; 1
    2660:	a1 f0       	breq	.+40     	; 0x268a <__addsf3x+0x96>
    2662:	ff 0f       	add	r31, r31
    2664:	bb 1f       	adc	r27, r27
    2666:	66 1f       	adc	r22, r22
    2668:	77 1f       	adc	r23, r23
    266a:	88 1f       	adc	r24, r24
    266c:	c2 f7       	brpl	.-16     	; 0x265e <__addsf3x+0x6a>
    266e:	0e c0       	rjmp	.+28     	; 0x268c <__addsf3x+0x98>
    2670:	ba 0f       	add	r27, r26
    2672:	62 1f       	adc	r22, r18
    2674:	73 1f       	adc	r23, r19
    2676:	84 1f       	adc	r24, r20
    2678:	48 f4       	brcc	.+18     	; 0x268c <__addsf3x+0x98>
    267a:	87 95       	ror	r24
    267c:	77 95       	ror	r23
    267e:	67 95       	ror	r22
    2680:	b7 95       	ror	r27
    2682:	f7 95       	ror	r31
    2684:	9e 3f       	cpi	r25, 0xFE	; 254
    2686:	08 f0       	brcs	.+2      	; 0x268a <__addsf3x+0x96>
    2688:	b3 cf       	rjmp	.-154    	; 0x25f0 <__addsf3+0x1e>
    268a:	93 95       	inc	r25
    268c:	88 0f       	add	r24, r24
    268e:	08 f0       	brcs	.+2      	; 0x2692 <__addsf3x+0x9e>
    2690:	99 27       	eor	r25, r25
    2692:	ee 0f       	add	r30, r30
    2694:	97 95       	ror	r25
    2696:	87 95       	ror	r24
    2698:	08 95       	ret

0000269a <__divsf3>:
    269a:	0c d0       	rcall	.+24     	; 0x26b4 <__divsf3x>
    269c:	eb c0       	rjmp	.+470    	; 0x2874 <__fp_round>
    269e:	e3 d0       	rcall	.+454    	; 0x2866 <__fp_pscB>
    26a0:	40 f0       	brcs	.+16     	; 0x26b2 <__divsf3+0x18>
    26a2:	da d0       	rcall	.+436    	; 0x2858 <__fp_pscA>
    26a4:	30 f0       	brcs	.+12     	; 0x26b2 <__divsf3+0x18>
    26a6:	21 f4       	brne	.+8      	; 0x26b0 <__divsf3+0x16>
    26a8:	5f 3f       	cpi	r21, 0xFF	; 255
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <__divsf3+0x18>
    26ac:	cc c0       	rjmp	.+408    	; 0x2846 <__fp_inf>
    26ae:	51 11       	cpse	r21, r1
    26b0:	15 c1       	rjmp	.+554    	; 0x28dc <__fp_szero>
    26b2:	cf c0       	rjmp	.+414    	; 0x2852 <__fp_nan>

000026b4 <__divsf3x>:
    26b4:	f0 d0       	rcall	.+480    	; 0x2896 <__fp_split3>
    26b6:	98 f3       	brcs	.-26     	; 0x269e <__divsf3+0x4>

000026b8 <__divsf3_pse>:
    26b8:	99 23       	and	r25, r25
    26ba:	c9 f3       	breq	.-14     	; 0x26ae <__divsf3+0x14>
    26bc:	55 23       	and	r21, r21
    26be:	b1 f3       	breq	.-20     	; 0x26ac <__divsf3+0x12>
    26c0:	95 1b       	sub	r25, r21
    26c2:	55 0b       	sbc	r21, r21
    26c4:	bb 27       	eor	r27, r27
    26c6:	aa 27       	eor	r26, r26
    26c8:	62 17       	cp	r22, r18
    26ca:	73 07       	cpc	r23, r19
    26cc:	84 07       	cpc	r24, r20
    26ce:	38 f0       	brcs	.+14     	; 0x26de <__divsf3_pse+0x26>
    26d0:	9f 5f       	subi	r25, 0xFF	; 255
    26d2:	5f 4f       	sbci	r21, 0xFF	; 255
    26d4:	22 0f       	add	r18, r18
    26d6:	33 1f       	adc	r19, r19
    26d8:	44 1f       	adc	r20, r20
    26da:	aa 1f       	adc	r26, r26
    26dc:	a9 f3       	breq	.-22     	; 0x26c8 <__divsf3_pse+0x10>
    26de:	33 d0       	rcall	.+102    	; 0x2746 <__divsf3_pse+0x8e>
    26e0:	0e 2e       	mov	r0, r30
    26e2:	3a f0       	brmi	.+14     	; 0x26f2 <__divsf3_pse+0x3a>
    26e4:	e0 e8       	ldi	r30, 0x80	; 128
    26e6:	30 d0       	rcall	.+96     	; 0x2748 <__divsf3_pse+0x90>
    26e8:	91 50       	subi	r25, 0x01	; 1
    26ea:	50 40       	sbci	r21, 0x00	; 0
    26ec:	e6 95       	lsr	r30
    26ee:	00 1c       	adc	r0, r0
    26f0:	ca f7       	brpl	.-14     	; 0x26e4 <__divsf3_pse+0x2c>
    26f2:	29 d0       	rcall	.+82     	; 0x2746 <__divsf3_pse+0x8e>
    26f4:	fe 2f       	mov	r31, r30
    26f6:	27 d0       	rcall	.+78     	; 0x2746 <__divsf3_pse+0x8e>
    26f8:	66 0f       	add	r22, r22
    26fa:	77 1f       	adc	r23, r23
    26fc:	88 1f       	adc	r24, r24
    26fe:	bb 1f       	adc	r27, r27
    2700:	26 17       	cp	r18, r22
    2702:	37 07       	cpc	r19, r23
    2704:	48 07       	cpc	r20, r24
    2706:	ab 07       	cpc	r26, r27
    2708:	b0 e8       	ldi	r27, 0x80	; 128
    270a:	09 f0       	breq	.+2      	; 0x270e <__divsf3_pse+0x56>
    270c:	bb 0b       	sbc	r27, r27
    270e:	80 2d       	mov	r24, r0
    2710:	bf 01       	movw	r22, r30
    2712:	ff 27       	eor	r31, r31
    2714:	93 58       	subi	r25, 0x83	; 131
    2716:	5f 4f       	sbci	r21, 0xFF	; 255
    2718:	2a f0       	brmi	.+10     	; 0x2724 <__divsf3_pse+0x6c>
    271a:	9e 3f       	cpi	r25, 0xFE	; 254
    271c:	51 05       	cpc	r21, r1
    271e:	68 f0       	brcs	.+26     	; 0x273a <__divsf3_pse+0x82>
    2720:	92 c0       	rjmp	.+292    	; 0x2846 <__fp_inf>
    2722:	dc c0       	rjmp	.+440    	; 0x28dc <__fp_szero>
    2724:	5f 3f       	cpi	r21, 0xFF	; 255
    2726:	ec f3       	brlt	.-6      	; 0x2722 <__divsf3_pse+0x6a>
    2728:	98 3e       	cpi	r25, 0xE8	; 232
    272a:	dc f3       	brlt	.-10     	; 0x2722 <__divsf3_pse+0x6a>
    272c:	86 95       	lsr	r24
    272e:	77 95       	ror	r23
    2730:	67 95       	ror	r22
    2732:	b7 95       	ror	r27
    2734:	f7 95       	ror	r31
    2736:	9f 5f       	subi	r25, 0xFF	; 255
    2738:	c9 f7       	brne	.-14     	; 0x272c <__divsf3_pse+0x74>
    273a:	88 0f       	add	r24, r24
    273c:	91 1d       	adc	r25, r1
    273e:	96 95       	lsr	r25
    2740:	87 95       	ror	r24
    2742:	97 f9       	bld	r25, 7
    2744:	08 95       	ret
    2746:	e1 e0       	ldi	r30, 0x01	; 1
    2748:	66 0f       	add	r22, r22
    274a:	77 1f       	adc	r23, r23
    274c:	88 1f       	adc	r24, r24
    274e:	bb 1f       	adc	r27, r27
    2750:	62 17       	cp	r22, r18
    2752:	73 07       	cpc	r23, r19
    2754:	84 07       	cpc	r24, r20
    2756:	ba 07       	cpc	r27, r26
    2758:	20 f0       	brcs	.+8      	; 0x2762 <__divsf3_pse+0xaa>
    275a:	62 1b       	sub	r22, r18
    275c:	73 0b       	sbc	r23, r19
    275e:	84 0b       	sbc	r24, r20
    2760:	ba 0b       	sbc	r27, r26
    2762:	ee 1f       	adc	r30, r30
    2764:	88 f7       	brcc	.-30     	; 0x2748 <__divsf3_pse+0x90>
    2766:	e0 95       	com	r30
    2768:	08 95       	ret

0000276a <__fixsfsi>:
    276a:	04 d0       	rcall	.+8      	; 0x2774 <__fixunssfsi>
    276c:	68 94       	set
    276e:	b1 11       	cpse	r27, r1
    2770:	b5 c0       	rjmp	.+362    	; 0x28dc <__fp_szero>
    2772:	08 95       	ret

00002774 <__fixunssfsi>:
    2774:	98 d0       	rcall	.+304    	; 0x28a6 <__fp_splitA>
    2776:	88 f0       	brcs	.+34     	; 0x279a <__fixunssfsi+0x26>
    2778:	9f 57       	subi	r25, 0x7F	; 127
    277a:	90 f0       	brcs	.+36     	; 0x27a0 <__fixunssfsi+0x2c>
    277c:	b9 2f       	mov	r27, r25
    277e:	99 27       	eor	r25, r25
    2780:	b7 51       	subi	r27, 0x17	; 23
    2782:	a0 f0       	brcs	.+40     	; 0x27ac <__fixunssfsi+0x38>
    2784:	d1 f0       	breq	.+52     	; 0x27ba <__fixunssfsi+0x46>
    2786:	66 0f       	add	r22, r22
    2788:	77 1f       	adc	r23, r23
    278a:	88 1f       	adc	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	1a f0       	brmi	.+6      	; 0x2796 <__fixunssfsi+0x22>
    2790:	ba 95       	dec	r27
    2792:	c9 f7       	brne	.-14     	; 0x2786 <__fixunssfsi+0x12>
    2794:	12 c0       	rjmp	.+36     	; 0x27ba <__fixunssfsi+0x46>
    2796:	b1 30       	cpi	r27, 0x01	; 1
    2798:	81 f0       	breq	.+32     	; 0x27ba <__fixunssfsi+0x46>
    279a:	9f d0       	rcall	.+318    	; 0x28da <__fp_zero>
    279c:	b1 e0       	ldi	r27, 0x01	; 1
    279e:	08 95       	ret
    27a0:	9c c0       	rjmp	.+312    	; 0x28da <__fp_zero>
    27a2:	67 2f       	mov	r22, r23
    27a4:	78 2f       	mov	r23, r24
    27a6:	88 27       	eor	r24, r24
    27a8:	b8 5f       	subi	r27, 0xF8	; 248
    27aa:	39 f0       	breq	.+14     	; 0x27ba <__fixunssfsi+0x46>
    27ac:	b9 3f       	cpi	r27, 0xF9	; 249
    27ae:	cc f3       	brlt	.-14     	; 0x27a2 <__fixunssfsi+0x2e>
    27b0:	86 95       	lsr	r24
    27b2:	77 95       	ror	r23
    27b4:	67 95       	ror	r22
    27b6:	b3 95       	inc	r27
    27b8:	d9 f7       	brne	.-10     	; 0x27b0 <__fixunssfsi+0x3c>
    27ba:	3e f4       	brtc	.+14     	; 0x27ca <__fixunssfsi+0x56>
    27bc:	90 95       	com	r25
    27be:	80 95       	com	r24
    27c0:	70 95       	com	r23
    27c2:	61 95       	neg	r22
    27c4:	7f 4f       	sbci	r23, 0xFF	; 255
    27c6:	8f 4f       	sbci	r24, 0xFF	; 255
    27c8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ca:	08 95       	ret

000027cc <__floatunsisf>:
    27cc:	e8 94       	clt
    27ce:	09 c0       	rjmp	.+18     	; 0x27e2 <__floatsisf+0x12>

000027d0 <__floatsisf>:
    27d0:	97 fb       	bst	r25, 7
    27d2:	3e f4       	brtc	.+14     	; 0x27e2 <__floatsisf+0x12>
    27d4:	90 95       	com	r25
    27d6:	80 95       	com	r24
    27d8:	70 95       	com	r23
    27da:	61 95       	neg	r22
    27dc:	7f 4f       	sbci	r23, 0xFF	; 255
    27de:	8f 4f       	sbci	r24, 0xFF	; 255
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	99 23       	and	r25, r25
    27e4:	a9 f0       	breq	.+42     	; 0x2810 <__floatsisf+0x40>
    27e6:	f9 2f       	mov	r31, r25
    27e8:	96 e9       	ldi	r25, 0x96	; 150
    27ea:	bb 27       	eor	r27, r27
    27ec:	93 95       	inc	r25
    27ee:	f6 95       	lsr	r31
    27f0:	87 95       	ror	r24
    27f2:	77 95       	ror	r23
    27f4:	67 95       	ror	r22
    27f6:	b7 95       	ror	r27
    27f8:	f1 11       	cpse	r31, r1
    27fa:	f8 cf       	rjmp	.-16     	; 0x27ec <__floatsisf+0x1c>
    27fc:	fa f4       	brpl	.+62     	; 0x283c <__floatsisf+0x6c>
    27fe:	bb 0f       	add	r27, r27
    2800:	11 f4       	brne	.+4      	; 0x2806 <__floatsisf+0x36>
    2802:	60 ff       	sbrs	r22, 0
    2804:	1b c0       	rjmp	.+54     	; 0x283c <__floatsisf+0x6c>
    2806:	6f 5f       	subi	r22, 0xFF	; 255
    2808:	7f 4f       	sbci	r23, 0xFF	; 255
    280a:	8f 4f       	sbci	r24, 0xFF	; 255
    280c:	9f 4f       	sbci	r25, 0xFF	; 255
    280e:	16 c0       	rjmp	.+44     	; 0x283c <__floatsisf+0x6c>
    2810:	88 23       	and	r24, r24
    2812:	11 f0       	breq	.+4      	; 0x2818 <__floatsisf+0x48>
    2814:	96 e9       	ldi	r25, 0x96	; 150
    2816:	11 c0       	rjmp	.+34     	; 0x283a <__floatsisf+0x6a>
    2818:	77 23       	and	r23, r23
    281a:	21 f0       	breq	.+8      	; 0x2824 <__floatsisf+0x54>
    281c:	9e e8       	ldi	r25, 0x8E	; 142
    281e:	87 2f       	mov	r24, r23
    2820:	76 2f       	mov	r23, r22
    2822:	05 c0       	rjmp	.+10     	; 0x282e <__floatsisf+0x5e>
    2824:	66 23       	and	r22, r22
    2826:	71 f0       	breq	.+28     	; 0x2844 <__floatsisf+0x74>
    2828:	96 e8       	ldi	r25, 0x86	; 134
    282a:	86 2f       	mov	r24, r22
    282c:	70 e0       	ldi	r23, 0x00	; 0
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	2a f0       	brmi	.+10     	; 0x283c <__floatsisf+0x6c>
    2832:	9a 95       	dec	r25
    2834:	66 0f       	add	r22, r22
    2836:	77 1f       	adc	r23, r23
    2838:	88 1f       	adc	r24, r24
    283a:	da f7       	brpl	.-10     	; 0x2832 <__floatsisf+0x62>
    283c:	88 0f       	add	r24, r24
    283e:	96 95       	lsr	r25
    2840:	87 95       	ror	r24
    2842:	97 f9       	bld	r25, 7
    2844:	08 95       	ret

00002846 <__fp_inf>:
    2846:	97 f9       	bld	r25, 7
    2848:	9f 67       	ori	r25, 0x7F	; 127
    284a:	80 e8       	ldi	r24, 0x80	; 128
    284c:	70 e0       	ldi	r23, 0x00	; 0
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	08 95       	ret

00002852 <__fp_nan>:
    2852:	9f ef       	ldi	r25, 0xFF	; 255
    2854:	80 ec       	ldi	r24, 0xC0	; 192
    2856:	08 95       	ret

00002858 <__fp_pscA>:
    2858:	00 24       	eor	r0, r0
    285a:	0a 94       	dec	r0
    285c:	16 16       	cp	r1, r22
    285e:	17 06       	cpc	r1, r23
    2860:	18 06       	cpc	r1, r24
    2862:	09 06       	cpc	r0, r25
    2864:	08 95       	ret

00002866 <__fp_pscB>:
    2866:	00 24       	eor	r0, r0
    2868:	0a 94       	dec	r0
    286a:	12 16       	cp	r1, r18
    286c:	13 06       	cpc	r1, r19
    286e:	14 06       	cpc	r1, r20
    2870:	05 06       	cpc	r0, r21
    2872:	08 95       	ret

00002874 <__fp_round>:
    2874:	09 2e       	mov	r0, r25
    2876:	03 94       	inc	r0
    2878:	00 0c       	add	r0, r0
    287a:	11 f4       	brne	.+4      	; 0x2880 <__fp_round+0xc>
    287c:	88 23       	and	r24, r24
    287e:	52 f0       	brmi	.+20     	; 0x2894 <__fp_round+0x20>
    2880:	bb 0f       	add	r27, r27
    2882:	40 f4       	brcc	.+16     	; 0x2894 <__fp_round+0x20>
    2884:	bf 2b       	or	r27, r31
    2886:	11 f4       	brne	.+4      	; 0x288c <__fp_round+0x18>
    2888:	60 ff       	sbrs	r22, 0
    288a:	04 c0       	rjmp	.+8      	; 0x2894 <__fp_round+0x20>
    288c:	6f 5f       	subi	r22, 0xFF	; 255
    288e:	7f 4f       	sbci	r23, 0xFF	; 255
    2890:	8f 4f       	sbci	r24, 0xFF	; 255
    2892:	9f 4f       	sbci	r25, 0xFF	; 255
    2894:	08 95       	ret

00002896 <__fp_split3>:
    2896:	57 fd       	sbrc	r21, 7
    2898:	90 58       	subi	r25, 0x80	; 128
    289a:	44 0f       	add	r20, r20
    289c:	55 1f       	adc	r21, r21
    289e:	59 f0       	breq	.+22     	; 0x28b6 <__fp_splitA+0x10>
    28a0:	5f 3f       	cpi	r21, 0xFF	; 255
    28a2:	71 f0       	breq	.+28     	; 0x28c0 <__fp_splitA+0x1a>
    28a4:	47 95       	ror	r20

000028a6 <__fp_splitA>:
    28a6:	88 0f       	add	r24, r24
    28a8:	97 fb       	bst	r25, 7
    28aa:	99 1f       	adc	r25, r25
    28ac:	61 f0       	breq	.+24     	; 0x28c6 <__fp_splitA+0x20>
    28ae:	9f 3f       	cpi	r25, 0xFF	; 255
    28b0:	79 f0       	breq	.+30     	; 0x28d0 <__fp_splitA+0x2a>
    28b2:	87 95       	ror	r24
    28b4:	08 95       	ret
    28b6:	12 16       	cp	r1, r18
    28b8:	13 06       	cpc	r1, r19
    28ba:	14 06       	cpc	r1, r20
    28bc:	55 1f       	adc	r21, r21
    28be:	f2 cf       	rjmp	.-28     	; 0x28a4 <__fp_split3+0xe>
    28c0:	46 95       	lsr	r20
    28c2:	f1 df       	rcall	.-30     	; 0x28a6 <__fp_splitA>
    28c4:	08 c0       	rjmp	.+16     	; 0x28d6 <__fp_splitA+0x30>
    28c6:	16 16       	cp	r1, r22
    28c8:	17 06       	cpc	r1, r23
    28ca:	18 06       	cpc	r1, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	f1 cf       	rjmp	.-30     	; 0x28b2 <__fp_splitA+0xc>
    28d0:	86 95       	lsr	r24
    28d2:	71 05       	cpc	r23, r1
    28d4:	61 05       	cpc	r22, r1
    28d6:	08 94       	sec
    28d8:	08 95       	ret

000028da <__fp_zero>:
    28da:	e8 94       	clt

000028dc <__fp_szero>:
    28dc:	bb 27       	eor	r27, r27
    28de:	66 27       	eor	r22, r22
    28e0:	77 27       	eor	r23, r23
    28e2:	cb 01       	movw	r24, r22
    28e4:	97 f9       	bld	r25, 7
    28e6:	08 95       	ret

000028e8 <__gesf2>:
    28e8:	a8 d0       	rcall	.+336    	; 0x2a3a <__fp_cmp>
    28ea:	08 f4       	brcc	.+2      	; 0x28ee <__gesf2+0x6>
    28ec:	8f ef       	ldi	r24, 0xFF	; 255
    28ee:	08 95       	ret

000028f0 <__mulsf3>:
    28f0:	0b d0       	rcall	.+22     	; 0x2908 <__mulsf3x>
    28f2:	c0 cf       	rjmp	.-128    	; 0x2874 <__fp_round>
    28f4:	b1 df       	rcall	.-158    	; 0x2858 <__fp_pscA>
    28f6:	28 f0       	brcs	.+10     	; 0x2902 <__mulsf3+0x12>
    28f8:	b6 df       	rcall	.-148    	; 0x2866 <__fp_pscB>
    28fa:	18 f0       	brcs	.+6      	; 0x2902 <__mulsf3+0x12>
    28fc:	95 23       	and	r25, r21
    28fe:	09 f0       	breq	.+2      	; 0x2902 <__mulsf3+0x12>
    2900:	a2 cf       	rjmp	.-188    	; 0x2846 <__fp_inf>
    2902:	a7 cf       	rjmp	.-178    	; 0x2852 <__fp_nan>
    2904:	11 24       	eor	r1, r1
    2906:	ea cf       	rjmp	.-44     	; 0x28dc <__fp_szero>

00002908 <__mulsf3x>:
    2908:	c6 df       	rcall	.-116    	; 0x2896 <__fp_split3>
    290a:	a0 f3       	brcs	.-24     	; 0x28f4 <__mulsf3+0x4>

0000290c <__mulsf3_pse>:
    290c:	95 9f       	mul	r25, r21
    290e:	d1 f3       	breq	.-12     	; 0x2904 <__mulsf3+0x14>
    2910:	95 0f       	add	r25, r21
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	55 1f       	adc	r21, r21
    2916:	62 9f       	mul	r22, r18
    2918:	f0 01       	movw	r30, r0
    291a:	72 9f       	mul	r23, r18
    291c:	bb 27       	eor	r27, r27
    291e:	f0 0d       	add	r31, r0
    2920:	b1 1d       	adc	r27, r1
    2922:	63 9f       	mul	r22, r19
    2924:	aa 27       	eor	r26, r26
    2926:	f0 0d       	add	r31, r0
    2928:	b1 1d       	adc	r27, r1
    292a:	aa 1f       	adc	r26, r26
    292c:	64 9f       	mul	r22, r20
    292e:	66 27       	eor	r22, r22
    2930:	b0 0d       	add	r27, r0
    2932:	a1 1d       	adc	r26, r1
    2934:	66 1f       	adc	r22, r22
    2936:	82 9f       	mul	r24, r18
    2938:	22 27       	eor	r18, r18
    293a:	b0 0d       	add	r27, r0
    293c:	a1 1d       	adc	r26, r1
    293e:	62 1f       	adc	r22, r18
    2940:	73 9f       	mul	r23, r19
    2942:	b0 0d       	add	r27, r0
    2944:	a1 1d       	adc	r26, r1
    2946:	62 1f       	adc	r22, r18
    2948:	83 9f       	mul	r24, r19
    294a:	a0 0d       	add	r26, r0
    294c:	61 1d       	adc	r22, r1
    294e:	22 1f       	adc	r18, r18
    2950:	74 9f       	mul	r23, r20
    2952:	33 27       	eor	r19, r19
    2954:	a0 0d       	add	r26, r0
    2956:	61 1d       	adc	r22, r1
    2958:	23 1f       	adc	r18, r19
    295a:	84 9f       	mul	r24, r20
    295c:	60 0d       	add	r22, r0
    295e:	21 1d       	adc	r18, r1
    2960:	82 2f       	mov	r24, r18
    2962:	76 2f       	mov	r23, r22
    2964:	6a 2f       	mov	r22, r26
    2966:	11 24       	eor	r1, r1
    2968:	9f 57       	subi	r25, 0x7F	; 127
    296a:	50 40       	sbci	r21, 0x00	; 0
    296c:	8a f0       	brmi	.+34     	; 0x2990 <__mulsf3_pse+0x84>
    296e:	e1 f0       	breq	.+56     	; 0x29a8 <__mulsf3_pse+0x9c>
    2970:	88 23       	and	r24, r24
    2972:	4a f0       	brmi	.+18     	; 0x2986 <__mulsf3_pse+0x7a>
    2974:	ee 0f       	add	r30, r30
    2976:	ff 1f       	adc	r31, r31
    2978:	bb 1f       	adc	r27, r27
    297a:	66 1f       	adc	r22, r22
    297c:	77 1f       	adc	r23, r23
    297e:	88 1f       	adc	r24, r24
    2980:	91 50       	subi	r25, 0x01	; 1
    2982:	50 40       	sbci	r21, 0x00	; 0
    2984:	a9 f7       	brne	.-22     	; 0x2970 <__mulsf3_pse+0x64>
    2986:	9e 3f       	cpi	r25, 0xFE	; 254
    2988:	51 05       	cpc	r21, r1
    298a:	70 f0       	brcs	.+28     	; 0x29a8 <__mulsf3_pse+0x9c>
    298c:	5c cf       	rjmp	.-328    	; 0x2846 <__fp_inf>
    298e:	a6 cf       	rjmp	.-180    	; 0x28dc <__fp_szero>
    2990:	5f 3f       	cpi	r21, 0xFF	; 255
    2992:	ec f3       	brlt	.-6      	; 0x298e <__mulsf3_pse+0x82>
    2994:	98 3e       	cpi	r25, 0xE8	; 232
    2996:	dc f3       	brlt	.-10     	; 0x298e <__mulsf3_pse+0x82>
    2998:	86 95       	lsr	r24
    299a:	77 95       	ror	r23
    299c:	67 95       	ror	r22
    299e:	b7 95       	ror	r27
    29a0:	f7 95       	ror	r31
    29a2:	e7 95       	ror	r30
    29a4:	9f 5f       	subi	r25, 0xFF	; 255
    29a6:	c1 f7       	brne	.-16     	; 0x2998 <__mulsf3_pse+0x8c>
    29a8:	fe 2b       	or	r31, r30
    29aa:	88 0f       	add	r24, r24
    29ac:	91 1d       	adc	r25, r1
    29ae:	96 95       	lsr	r25
    29b0:	87 95       	ror	r24
    29b2:	97 f9       	bld	r25, 7
    29b4:	08 95       	ret
    29b6:	11 f4       	brne	.+4      	; 0x29bc <__mulsf3_pse+0xb0>
    29b8:	0e f4       	brtc	.+2      	; 0x29bc <__mulsf3_pse+0xb0>
    29ba:	4b cf       	rjmp	.-362    	; 0x2852 <__fp_nan>
    29bc:	62 c0       	rjmp	.+196    	; 0x2a82 <__fp_mpack>

000029be <sqrt>:
    29be:	73 df       	rcall	.-282    	; 0x28a6 <__fp_splitA>
    29c0:	d0 f3       	brcs	.-12     	; 0x29b6 <__mulsf3_pse+0xaa>
    29c2:	99 23       	and	r25, r25
    29c4:	d9 f3       	breq	.-10     	; 0x29bc <__mulsf3_pse+0xb0>
    29c6:	ce f3       	brts	.-14     	; 0x29ba <__mulsf3_pse+0xae>
    29c8:	9f 57       	subi	r25, 0x7F	; 127
    29ca:	55 0b       	sbc	r21, r21
    29cc:	87 ff       	sbrs	r24, 7
    29ce:	67 d0       	rcall	.+206    	; 0x2a9e <__fp_norm2>
    29d0:	00 24       	eor	r0, r0
    29d2:	a0 e6       	ldi	r26, 0x60	; 96
    29d4:	40 ea       	ldi	r20, 0xA0	; 160
    29d6:	90 01       	movw	r18, r0
    29d8:	80 58       	subi	r24, 0x80	; 128
    29da:	56 95       	lsr	r21
    29dc:	97 95       	ror	r25
    29de:	28 f4       	brcc	.+10     	; 0x29ea <sqrt+0x2c>
    29e0:	80 5c       	subi	r24, 0xC0	; 192
    29e2:	66 0f       	add	r22, r22
    29e4:	77 1f       	adc	r23, r23
    29e6:	88 1f       	adc	r24, r24
    29e8:	20 f0       	brcs	.+8      	; 0x29f2 <sqrt+0x34>
    29ea:	26 17       	cp	r18, r22
    29ec:	37 07       	cpc	r19, r23
    29ee:	48 07       	cpc	r20, r24
    29f0:	30 f4       	brcc	.+12     	; 0x29fe <sqrt+0x40>
    29f2:	62 1b       	sub	r22, r18
    29f4:	73 0b       	sbc	r23, r19
    29f6:	84 0b       	sbc	r24, r20
    29f8:	20 29       	or	r18, r0
    29fa:	31 29       	or	r19, r1
    29fc:	4a 2b       	or	r20, r26
    29fe:	a6 95       	lsr	r26
    2a00:	17 94       	ror	r1
    2a02:	07 94       	ror	r0
    2a04:	20 25       	eor	r18, r0
    2a06:	31 25       	eor	r19, r1
    2a08:	4a 27       	eor	r20, r26
    2a0a:	58 f7       	brcc	.-42     	; 0x29e2 <sqrt+0x24>
    2a0c:	66 0f       	add	r22, r22
    2a0e:	77 1f       	adc	r23, r23
    2a10:	88 1f       	adc	r24, r24
    2a12:	20 f0       	brcs	.+8      	; 0x2a1c <sqrt+0x5e>
    2a14:	26 17       	cp	r18, r22
    2a16:	37 07       	cpc	r19, r23
    2a18:	48 07       	cpc	r20, r24
    2a1a:	30 f4       	brcc	.+12     	; 0x2a28 <sqrt+0x6a>
    2a1c:	62 0b       	sbc	r22, r18
    2a1e:	73 0b       	sbc	r23, r19
    2a20:	84 0b       	sbc	r24, r20
    2a22:	20 0d       	add	r18, r0
    2a24:	31 1d       	adc	r19, r1
    2a26:	41 1d       	adc	r20, r1
    2a28:	a0 95       	com	r26
    2a2a:	81 f7       	brne	.-32     	; 0x2a0c <sqrt+0x4e>
    2a2c:	b9 01       	movw	r22, r18
    2a2e:	84 2f       	mov	r24, r20
    2a30:	91 58       	subi	r25, 0x81	; 129
    2a32:	88 0f       	add	r24, r24
    2a34:	96 95       	lsr	r25
    2a36:	87 95       	ror	r24
    2a38:	08 95       	ret

00002a3a <__fp_cmp>:
    2a3a:	99 0f       	add	r25, r25
    2a3c:	00 08       	sbc	r0, r0
    2a3e:	55 0f       	add	r21, r21
    2a40:	aa 0b       	sbc	r26, r26
    2a42:	e0 e8       	ldi	r30, 0x80	; 128
    2a44:	fe ef       	ldi	r31, 0xFE	; 254
    2a46:	16 16       	cp	r1, r22
    2a48:	17 06       	cpc	r1, r23
    2a4a:	e8 07       	cpc	r30, r24
    2a4c:	f9 07       	cpc	r31, r25
    2a4e:	c0 f0       	brcs	.+48     	; 0x2a80 <__fp_cmp+0x46>
    2a50:	12 16       	cp	r1, r18
    2a52:	13 06       	cpc	r1, r19
    2a54:	e4 07       	cpc	r30, r20
    2a56:	f5 07       	cpc	r31, r21
    2a58:	98 f0       	brcs	.+38     	; 0x2a80 <__fp_cmp+0x46>
    2a5a:	62 1b       	sub	r22, r18
    2a5c:	73 0b       	sbc	r23, r19
    2a5e:	84 0b       	sbc	r24, r20
    2a60:	95 0b       	sbc	r25, r21
    2a62:	39 f4       	brne	.+14     	; 0x2a72 <__fp_cmp+0x38>
    2a64:	0a 26       	eor	r0, r26
    2a66:	61 f0       	breq	.+24     	; 0x2a80 <__fp_cmp+0x46>
    2a68:	23 2b       	or	r18, r19
    2a6a:	24 2b       	or	r18, r20
    2a6c:	25 2b       	or	r18, r21
    2a6e:	21 f4       	brne	.+8      	; 0x2a78 <__fp_cmp+0x3e>
    2a70:	08 95       	ret
    2a72:	0a 26       	eor	r0, r26
    2a74:	09 f4       	brne	.+2      	; 0x2a78 <__fp_cmp+0x3e>
    2a76:	a1 40       	sbci	r26, 0x01	; 1
    2a78:	a6 95       	lsr	r26
    2a7a:	8f ef       	ldi	r24, 0xFF	; 255
    2a7c:	81 1d       	adc	r24, r1
    2a7e:	81 1d       	adc	r24, r1
    2a80:	08 95       	ret

00002a82 <__fp_mpack>:
    2a82:	9f 3f       	cpi	r25, 0xFF	; 255
    2a84:	31 f0       	breq	.+12     	; 0x2a92 <__fp_mpack_finite+0xc>

00002a86 <__fp_mpack_finite>:
    2a86:	91 50       	subi	r25, 0x01	; 1
    2a88:	20 f4       	brcc	.+8      	; 0x2a92 <__fp_mpack_finite+0xc>
    2a8a:	87 95       	ror	r24
    2a8c:	77 95       	ror	r23
    2a8e:	67 95       	ror	r22
    2a90:	b7 95       	ror	r27
    2a92:	88 0f       	add	r24, r24
    2a94:	91 1d       	adc	r25, r1
    2a96:	96 95       	lsr	r25
    2a98:	87 95       	ror	r24
    2a9a:	97 f9       	bld	r25, 7
    2a9c:	08 95       	ret

00002a9e <__fp_norm2>:
    2a9e:	91 50       	subi	r25, 0x01	; 1
    2aa0:	50 40       	sbci	r21, 0x00	; 0
    2aa2:	66 0f       	add	r22, r22
    2aa4:	77 1f       	adc	r23, r23
    2aa6:	88 1f       	adc	r24, r24
    2aa8:	d2 f7       	brpl	.-12     	; 0x2a9e <__fp_norm2>
    2aaa:	08 95       	ret

00002aac <__udivmodsi4>:
    2aac:	a1 e2       	ldi	r26, 0x21	; 33
    2aae:	1a 2e       	mov	r1, r26
    2ab0:	aa 1b       	sub	r26, r26
    2ab2:	bb 1b       	sub	r27, r27
    2ab4:	fd 01       	movw	r30, r26
    2ab6:	0d c0       	rjmp	.+26     	; 0x2ad2 <__udivmodsi4_ep>

00002ab8 <__udivmodsi4_loop>:
    2ab8:	aa 1f       	adc	r26, r26
    2aba:	bb 1f       	adc	r27, r27
    2abc:	ee 1f       	adc	r30, r30
    2abe:	ff 1f       	adc	r31, r31
    2ac0:	a2 17       	cp	r26, r18
    2ac2:	b3 07       	cpc	r27, r19
    2ac4:	e4 07       	cpc	r30, r20
    2ac6:	f5 07       	cpc	r31, r21
    2ac8:	20 f0       	brcs	.+8      	; 0x2ad2 <__udivmodsi4_ep>
    2aca:	a2 1b       	sub	r26, r18
    2acc:	b3 0b       	sbc	r27, r19
    2ace:	e4 0b       	sbc	r30, r20
    2ad0:	f5 0b       	sbc	r31, r21

00002ad2 <__udivmodsi4_ep>:
    2ad2:	66 1f       	adc	r22, r22
    2ad4:	77 1f       	adc	r23, r23
    2ad6:	88 1f       	adc	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	1a 94       	dec	r1
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <__udivmodsi4_loop>
    2ade:	60 95       	com	r22
    2ae0:	70 95       	com	r23
    2ae2:	80 95       	com	r24
    2ae4:	90 95       	com	r25
    2ae6:	9b 01       	movw	r18, r22
    2ae8:	ac 01       	movw	r20, r24
    2aea:	bd 01       	movw	r22, r26
    2aec:	cf 01       	movw	r24, r30
    2aee:	08 95       	ret

00002af0 <_exit>:
    2af0:	f8 94       	cli

00002af2 <__stop_program>:
    2af2:	ff cf       	rjmp	.-2      	; 0x2af2 <__stop_program>
