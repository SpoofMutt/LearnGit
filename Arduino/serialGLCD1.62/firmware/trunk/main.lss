
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000150  00800100  00002a7a  00002b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021d  00800250  00800250  00002c5e  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00002c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00003314  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00003368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000319  00000000  00000000  000033a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001945  00000000  00000000  000036c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003dc  00000000  00000000  00005006  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002026  00000000  00000000  000053e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000250  00000000  00000000  00007408  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000437  00000000  00000000  00007658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000240a  00000000  00000000  00007a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  00009e99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__ctors_end>
       4:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
       8:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
       c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      10:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      14:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      18:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      1c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      20:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      24:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      28:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      2c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      30:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      34:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      38:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_14>
      3c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      40:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      44:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      48:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__vector_18>
      4c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      50:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      54:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      58:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      5c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      60:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      64:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__bad_interrupt>
      68:	aa 10       	cpse	r10, r10
      6a:	b7 12       	cpse	r11, r23
      6c:	90 12       	cpse	r9, r16
      6e:	a1 12       	cpse	r10, r17
      70:	7e 12       	cpse	r7, r30
      72:	64 12       	cpse	r6, r20
      74:	5f 12       	cpse	r5, r31
      76:	48 12       	cpse	r4, r24
      78:	22 12       	cpse	r2, r18
      7a:	58 10       	cpse	r5, r8
      7c:	a6 11       	cpse	r26, r6
      7e:	92 11       	cpse	r25, r2
      80:	7c 11       	cpse	r23, r12
      82:	62 11       	cpse	r22, r2
      84:	58 10       	cpse	r5, r8
      86:	4a 11       	cpse	r20, r10
      88:	3b 11       	cpse	r19, r11
      8a:	58 10       	cpse	r5, r8
      8c:	23 11       	cpse	r18, r3
      8e:	58 10       	cpse	r5, r8
      90:	10 11       	cpse	r17, r0
      92:	02 11       	cpse	r16, r2
      94:	e9 10       	cpse	r14, r9
      96:	58 10       	cpse	r5, r8
      98:	dd 10       	cpse	r13, r13
      9a:	d1 10       	cpse	r13, r1
      9c:	c5 10       	cpse	r12, r5
      9e:	7c 10       	cpse	r7, r12
      a0:	85 10       	cpse	r8, r5
      a2:	b4 10       	cpse	r11, r4
      a4:	0c 12       	cpse	r0, r28
      a6:	c0 11       	cpse	r28, r0
      a8:	b7 11       	cpse	r27, r7
      aa:	b0 11       	cpse	r27, r0

000000ac <text_array>:
      ac:	05 08 01 00 00 00 00 00 00 6f 6f 00 00 00 07 00     .........oo.....
      bc:	07 00 14 7f 14 7f 14 00 26 6b 2a 10 43 33 08 64     ........&k*.C3.d
      cc:	63 32 4d 49 36 50 00 00 07 00 00 00 1c 22 41 00     c2MI6P......."A.
      dc:	00 41 22 1c 00 11 0a 1f 0a 11 10 10 7c 10 10 00     .A".........|...
      ec:	00 a0 60 00 10 10 10 10 10 00 00 60 60 00 40 30     ..`........``.@0
      fc:	08 06 01 3e 51 49 45 3e 00 42 7f 40 00 42 61 51     ...>QIE>.B.@.BaQ
     10c:	49 46 22 41 49 49 36 08 0c 0a 7f 08 27 45 45 45     IF"AII6.....'EEE
     11c:	39 3c 4a 49 49 30 01 61 19 07 01 36 49 49 49 36     9<JII0.a...6III6
     12c:	06 49 49 29 1e 00 00 6c 6c 00 00 00 ac 6c 00 08     .II)...ll....l..
     13c:	14 22 41 00 14 14 14 14 14 00 41 22 14 08 02 01     ."A.......A"....
     14c:	51 09 06 3e 41 5d 5d 46 7c 12 11 12 7c 7f 49 49     Q..>A]]F|...|.II
     15c:	49 36 3e 41 41 41 22 7f 41 41 41 3e 7f 49 49 49     I6>AAA".AAA>.III
     16c:	41 7f 09 09 09 01 3e 41 41 51 72 7f 08 08 08 7f     A.....>AAQr.....
     17c:	41 41 7f 41 41 21 41 3f 01 01 7f 08 14 22 41 7f     AA.AA!A?....."A.
     18c:	40 40 40 40 7f 02 04 02 7f 7f 06 08 30 7f 3e 41     @@@@........0.>A
     19c:	41 41 3e 7f 09 09 09 06 3e 41 41 61 7e 7f 09 19     AA>.....>AAa~...
     1ac:	29 46 26 49 49 49 32 01 01 7f 01 01 3f 40 40 40     )F&III2.....?@@@
     1bc:	3f 1f 20 40 20 1f 3f 40 30 40 3f 63 14 08 14 63     ?. @ .?@0@?c...c
     1cc:	03 04 78 04 03 61 51 49 45 43 00 00 7f 41 00 01     ..x..aQIEC...A..
     1dc:	06 08 30 40 00 00 41 7f 00 04 02 01 02 04 80 80     ..0@..A.........
     1ec:	80 80 80 01 02 04 00 00 20 54 54 54 78 7f 48 44     ........ TTTx.HD
     1fc:	44 38 38 44 44 44 28 38 44 44 48 7f 38 54 54 54     D88DDD(8DDH.8TTT
     20c:	18 08 7e 09 01 02 18 a4 a4 a4 78 7f 08 08 08 70     ..~.......x....p
     21c:	00 48 7a 40 00 40 80 80 88 7a 7f 10 10 28 44 00     .Hz@.@...z...(D.
     22c:	41 7f 40 00 7c 04 38 04 78 7c 04 04 04 78 38 44     A.@.|.8.x|...x8D
     23c:	44 44 38 fc 24 24 24 18 18 24 24 fc 80 7c 08 04     DD8.$$$..$$..|..
     24c:	04 08 48 54 54 54 20 00 08 3c 48 20 3c 40 40 40     ..HTTT ..<H <@@@
     25c:	7c 0c 30 40 30 0c 1c 60 18 60 1c 44 28 10 28 44     |.0@0..`.`.D(.(D
     26c:	1c a0 a0 a0 7c 44 64 54 4c 44 00 08 36 41 41 20     ....|DdTLD..6AA 
     27c:	40 ff 40 20 41 41 36 08 00 10 08 18 10 08           @.@ AA6.......

0000028a <aux_text_array>:
     28a:	0a 10 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2a2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 0c 0c 00     ................
     2b2:	00 00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00     ................
     2c2:	00 00 00 00 00 00 00 80 98 d8 fc 9f 99 f8 ff 9f     ................
     2d2:	18 01 0d 0f 01 01 0f 07 01 01 00 00 38 7c 6c ff     ............8|l.
     2e2:	cc cc 80 00 00 00 06 0c 0c 3f 0c 0f 07 00 00 8e     .........?......
     2f2:	91 51 51 4e a0 a0 90 10 00 00 00 00 00 07 08 08     .QQN............
     302:	08 07 00 00 80 ee 3f 73 e3 c3 06 c0 c0 00 03 07     ......?s........
     312:	0e 0c 0c 0f 0f 0f 09 00 00 00 00 0f 0f 00 00 00     ................
	...
     32e:	00 00 f0 fe 0f 01 00 00 00 00 00 00 03 1f 3c 20     ..............< 
     33e:	00 00 00 00 00 01 0f fe f0 00 00 00 00 00 00 20     ............... 
     34e:	3c 1f 03 00 00 00 00 00 24 3c 18 ff 18 3c 24 00     <.......$<...<$.
	...
     36a:	c0 c0 c0 f8 f8 c0 c0 c0 00 00 00 00 00 07 07 00     ................
	...
     38a:	20 3e 1e 00 00 00 00 00 00 80 80 80 80 80 00 00      >..............
     39a:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     3b2:	00 0e 0e 00 00 00 00 00 00 00 00 e0 f8 1e 07 01     ................
     3c2:	00 00 10 1c 0f 03 00 00 00 00 00 00 f8 fe 07 63     ...............c
     3d2:	63 07 fe fc 00 00 01 07 0e 0c 0c 0e 07 03 00 00     c...............
     3e2:	00 06 03 ff ff 00 00 00 00 00 0c 0c 0c 0f 0f 0c     ................
     3f2:	0c 0c 00 00 06 03 03 83 c3 63 3e 1c 00 00 0c 0e     .........c>.....
     402:	0f 0d 0c 0c 0c 0c 00 00 06 03 63 63 63 e3 fe 9c     ..........ccc...
     412:	00 00 06 0c 0c 0c 0c 0c 07 07 00 00 c0 e0 b8 8c     ................
     422:	87 ff ff 80 00 00 01 01 01 01 01 0f 0f 01 00 00     ................
     432:	7f 3f 33 33 33 73 e3 c0 00 00 06 0c 0c 0c 0c 0e     .?333s..........
     442:	07 03 00 00 f8 fe 67 33 33 73 e6 c0 00 00 03 07     ......g33s......
     452:	0e 0c 0c 0e 07 03 00 00 03 03 03 83 f3 7f 1f 07     ................
     462:	00 00 00 08 0e 07 01 00 00 00 00 00 9c fe 63 63     ..............cc
     472:	63 63 fe 9c 00 00 07 07 0c 0c 0c 0c 07 07 00 00     cc..............
     482:	3c 7e e7 c3 c3 67 fe fc 00 00 00 06 0c 0c 0c 0e     <~...g..........
     492:	07 01 00 00 00 00 00 70 70 00 00 00 00 00 00 00     .......pp.......
     4a2:	00 0e 0e 00 00 00 00 00 00 00 00 70 70 00 00 00     ...........pp...
     4b2:	00 00 00 00 20 3e 1e 00 00 00 00 00 c0 c0 e0 20     .... >......... 
     4c2:	30 30 10 18 00 00 00 00 01 01 03 03 02 06 00 00     00..............
     4d2:	30 30 30 30 30 30 30 30 00 00 03 03 03 03 03 03     00000000........
     4e2:	03 03 00 00 18 10 30 30 20 e0 c0 c0 00 00 06 02     ......00 .......
     4f2:	03 03 01 01 00 00 00 00 06 03 c3 e3 33 3f 0e 00     ............3?..
     502:	00 00 00 00 0d 0d 00 00 00 00 00 f0 f8 1c ce e6     ................
     512:	66 6e fc f8 00 03 0f 1c 39 33 33 33 3b 13 00 00     fn......9333;...
     522:	00 e0 fe 9f 9f fe e0 00 00 00 0c 0f 07 01 01 07     ................
     532:	0f 0c 00 00 ff ff 63 63 63 63 fe 9e 00 00 0f 0f     ......cccc......
     542:	0c 0c 0c 0c 0f 07 00 00 f8 fe 06 03 03 03 03 06     ................
     552:	00 00 01 07 06 0c 0c 0c 0c 06 00 00 ff ff 03 03     ................
     562:	03 06 fe f8 00 00 0f 0f 0c 0c 0c 06 07 01 00 00     ................
     572:	ff ff 63 63 63 63 63 03 00 00 0f 0f 0c 0c 0c 0c     ..ccccc.........
     582:	0c 0c 00 00 ff ff 63 63 63 63 63 03 00 00 0f 0f     ......ccccc.....
	...
     59a:	f8 fe 06 03 c3 c3 c3 c6 00 00 01 07 06 0c 0c 0c     ................
     5aa:	0f 07 00 00 ff ff 60 60 60 60 ff ff 00 00 0f 0f     ......````......
     5ba:	00 00 00 00 0f 0f 00 00 00 03 03 ff ff 03 03 00     ................
     5ca:	00 00 00 0c 0c 0f 0f 0c 0c 00 00 00 00 00 00 03     ................
     5da:	03 03 ff ff 00 00 06 0c 0c 0c 0c 0c 07 07 00 00     ................
     5ea:	ff ff 70 78 fe 87 03 01 00 00 0f 0f 00 00 01 07     ..px............
     5fa:	0f 0c 00 00 ff ff 00 00 00 00 00 00 00 00 0f 0f     ................
     60a:	0c 0c 0c 0c 0c 0c 00 00 ff ff 1f f8 f8 1f ff ff     ................
     61a:	00 00 0f 0f 00 00 00 00 0f 0f 00 00 ff ff 0f 78     ...............x
     62a:	e0 00 ff ff 00 00 0f 0f 00 00 01 0f 0f 0f 00 00     ................
     63a:	f8 fe 07 03 03 07 fe f8 00 00 01 07 0e 0c 0c 0e     ................
     64a:	07 01 00 00 ff ff 63 63 63 63 3e 3e 00 00 0f 0f     ......cccc>>....
	...
     662:	f8 fe 07 03 03 07 fe f8 00 00 01 07 0e 0c 0c 1e     ................
     672:	37 03 00 00 ff ff 63 63 e3 e3 fe 1e 00 00 0f 0f     7.....cc........
     682:	00 00 00 01 0f 0f 08 00 1c 3e 73 63 63 e3 c6 80     .........>scc...
     692:	00 00 06 0c 0c 0c 0c 0c 07 07 00 00 03 03 03 ff     ................
     6a2:	ff 03 03 03 00 00 00 00 00 0f 0f 00 00 00 00 00     ................
     6b2:	ff ff 00 00 00 00 ff ff 00 00 03 07 0e 0c 0c 0e     ................
     6c2:	07 03 00 00 03 7f fe 80 80 fe 7f 03 00 00 00 00     ................
     6d2:	0f 0f 0f 0f 00 00 00 0f ff f0 00 f8 f8 00 f0 ff     ................
     6e2:	0f 00 0f 0f 0f 00 00 0f 0f 0f 00 00 01 07 9f fc     ................
     6f2:	fc 9f 07 01 00 00 08 0e 0f 01 01 0f 0e 08 00 01     ................
     702:	07 1f 3c f0 f0 3c 1f 07 01 00 00 00 00 0f 0f 00     ..<..<..........
     712:	00 00 00 00 03 03 c3 e3 7b 3f 0f 07 00 00 0e 0f     ........{?......
     722:	0f 0d 0c 0c 0c 0c 00 00 00 00 ff ff 01 01 00 00     ................
     732:	00 00 00 00 3f 3f 20 20 00 00 00 00 01 07 1c 70     ....??  .......p
     742:	c0 00 00 00 00 00 00 00 00 00 01 07 1c 10 00 00     ................
     752:	00 01 01 ff ff 00 00 00 00 00 00 20 20 3f 3f 00     ...........  ??.
     762:	00 00 00 08 0c 0e 07 03 07 0e 0c 08 00 00 00 00     ................
	...
     782:	00 80 80 80 80 80 80 80 80 80 80 00 00 00 01 03     ................
     792:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7a2:	00 b0 98 d8 d8 d8 f8 f0 00 00 07 0f 0d 0c 0c 06     ................
     7b2:	0f 0f 00 00 ff ff 30 18 18 38 f0 e0 00 00 0f 0f     ......0..8......
     7c2:	06 0c 0c 0e 07 03 00 00 e0 f0 38 18 18 18 18 30     ..........8....0
     7d2:	00 00 03 07 0e 0c 0c 0c 0c 06 00 00 e0 f0 38 18     ..............8.
     7e2:	18 30 ff ff 00 00 03 07 0e 0c 0c 06 0f 0f 00 00     .0..............
     7f2:	e0 f0 d8 d8 d8 d8 f0 e0 00 00 03 07 0e 0c 0c 0c     ................
     802:	0c 06 00 00 18 18 fe ff 1b 1b 1b 00 00 00 00 00     ................
     812:	0f 0f 00 00 00 00 00 00 e0 f0 38 18 18 30 f8 f8     ..........8..0..
     822:	00 00 03 37 6e 6c 6c 66 7f 3f 00 00 ff ff 30 18     ...7nllf.?....0.
     832:	18 18 f8 f0 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
     842:	00 18 18 fb fb 00 00 00 00 00 0c 0c 0c 0f 0f 0c     ................
     852:	0c 0c 00 00 00 18 18 fb fb 00 00 00 00 00 60 60     ..............``
     862:	60 7f 3f 00 00 00 00 00 ff ff c0 f0 b8 18 08 00     `.?.............
     872:	00 00 0f 0f 00 01 03 0f 0c 08 00 00 03 03 ff ff     ................
	...
     88a:	07 0f 0c 0c 0c 00 00 00 f8 f8 18 f8 f0 18 f8 f0     ................
     89a:	00 00 0f 0f 00 0f 0f 00 0f 0f 00 00 f8 f8 30 18     ..............0.
     8aa:	18 18 f8 f0 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
     8ba:	e0 f0 38 18 18 38 f0 e0 00 00 03 07 0e 0c 0c 0e     ..8..8..........
     8ca:	07 03 00 00 f8 f8 30 18 18 38 f0 e0 00 00 7f 7f     ......0..8......
     8da:	06 0c 0c 0e 07 03 00 00 e0 f0 38 18 18 30 f8 f8     ..........8..0..
     8ea:	00 00 03 07 0e 0c 0c 06 7f 7f 00 00 00 f8 f8 30     ...............0
     8fa:	18 18 18 18 00 00 00 0f 0f 00 00 00 00 00 00 00     ................
     90a:	70 f8 d8 d8 d8 d8 98 30 00 00 06 0c 0c 0c 0c 0d     p......0........
     91a:	0f 07 00 00 18 18 fe fe 18 18 18 00 00 00 00 00     ................
     92a:	07 0f 0c 0c 0c 00 00 00 f8 f8 00 00 00 00 f8 f8     ................
     93a:	00 00 07 0f 0c 0c 0c 06 0f 0f 00 00 18 f8 f0 00     ................
     94a:	00 f0 f8 18 00 00 00 00 07 0f 0f 07 00 00 00 38     ...............8
     95a:	f8 80 00 e0 e0 00 80 f8 38 00 03 0f 0f 01 01 0f     ........8.......
     96a:	0f 03 00 00 08 18 78 e0 e0 78 18 08 00 00 08 0c     ......x..x......
     97a:	0f 03 03 0f 0c 08 00 00 08 78 f8 c0 80 f8 f8 18     .........x......
     98a:	00 00 00 60 61 7f 1f 07 00 00 00 00 18 18 18 98     ...`a...........
     99a:	d8 78 38 18 00 00 0c 0e 0f 0d 0c 0c 0c 0c 00 00     .x8.............
     9aa:	00 80 80 7e 7f 01 01 00 00 00 00 00 00 3f 7f 40     ...~.........?.@
     9ba:	40 00 00 10 18 1c 1e ff ff 1e 1c 18 10 00 00 00     @...............
     9ca:	00 ff ff 00 00 00 00 00 00 01 01 7f 7e 80 80 00     ............~...
     9da:	00 00 00 40 40 7f 3f 00 00 00 00 00 c0 60 60 60     ...@@.?......```
     9ea:	c0 c0 c0 60 00 00 00 00 00 00 00 00 00 00 00 00     ...`............

000009fa <__ctors_end>:
     9fa:	11 24       	eor	r1, r1
     9fc:	1f be       	out	0x3f, r1	; 63
     9fe:	cf ef       	ldi	r28, 0xFF	; 255
     a00:	d4 e0       	ldi	r29, 0x04	; 4
     a02:	de bf       	out	0x3e, r29	; 62
     a04:	cd bf       	out	0x3d, r28	; 61

00000a06 <__do_copy_data>:
     a06:	12 e0       	ldi	r17, 0x02	; 2
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b1 e0       	ldi	r27, 0x01	; 1
     a0c:	ea e7       	ldi	r30, 0x7A	; 122
     a0e:	fa e2       	ldi	r31, 0x2A	; 42
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <.do_copy_data_start>

00000a12 <.do_copy_data_loop>:
     a12:	05 90       	lpm	r0, Z+
     a14:	0d 92       	st	X+, r0

00000a16 <.do_copy_data_start>:
     a16:	a0 35       	cpi	r26, 0x50	; 80
     a18:	b1 07       	cpc	r27, r17
     a1a:	d9 f7       	brne	.-10     	; 0xa12 <.do_copy_data_loop>

00000a1c <__do_clear_bss>:
     a1c:	14 e0       	ldi	r17, 0x04	; 4
     a1e:	a0 e5       	ldi	r26, 0x50	; 80
     a20:	b2 e0       	ldi	r27, 0x02	; 2
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <.do_clear_bss_start>

00000a24 <.do_clear_bss_loop>:
     a24:	1d 92       	st	X+, r1

00000a26 <.do_clear_bss_start>:
     a26:	ad 36       	cpi	r26, 0x6D	; 109
     a28:	b1 07       	cpc	r27, r17
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <.do_clear_bss_loop>
     a2c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <main>
     a30:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <_exit>

00000a34 <__bad_interrupt>:
     a34:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a38 <__vector_18>:

//this include file stores all the revelant aux font data. you can make new ones with the bmp2header_font utility in the utilities folder
#include "aux_font.h"			  			  

ISR (SIG_USART_RECV)//USART Receive Interrupt
{
     a38:	1f 92       	push	r1
     a3a:	0f 92       	push	r0
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	0f 92       	push	r0
     a40:	11 24       	eor	r1, r1
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
	cli();//Disable Interrupts
     a4a:	f8 94       	cli

	RX_array[RX_in++] = UDR0;	//get recieved byte
     a4c:	80 91 50 02 	lds	r24, 0x0250
     a50:	90 91 c6 00 	lds	r25, 0x00C6
     a54:	e8 2f       	mov	r30, r24
     a56:	f0 e0       	ldi	r31, 0x00	; 0
     a58:	e5 59       	subi	r30, 0x95	; 149
     a5a:	fd 4f       	sbci	r31, 0xFD	; 253
     a5c:	90 83       	st	Z, r25
     a5e:	8f 5f       	subi	r24, 0xFF	; 255
     a60:	80 93 50 02 	sts	0x0250, r24
	if (RX_in >= RX_BUFFER_SIZE) RX_in = 0;	//wrap RX_in	
     a64:	80 91 50 02 	lds	r24, 0x0250
	RX_bytes++;			//keep count of bytes recieved
     a68:	80 91 53 02 	lds	r24, 0x0253
     a6c:	8f 5f       	subi	r24, 0xFF	; 255
     a6e:	80 93 53 02 	sts	0x0253, r24
	
	//test for buffer close to full
	if (RX_bytes > (unsigned char)(RX_BUFFER_SIZE *.75))
     a72:	80 91 53 02 	lds	r24, 0x0253
     a76:	81 3c       	cpi	r24, 0xC1	; 193
     a78:	50 f0       	brcs	.+20     	; 0xa8e <__vector_18+0x56>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     a7a:	80 91 c0 00 	lds	r24, 0x00C0
     a7e:	85 ff       	sbrs	r24, 5
     a80:	fc cf       	rjmp	.-8      	; 0xa7a <__vector_18+0x42>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     a82:	83 e1       	ldi	r24, 0x13	; 19
     a84:	80 93 c6 00 	sts	0x00C6, r24
	
	//test for buffer close to full
	if (RX_bytes > (unsigned char)(RX_BUFFER_SIZE *.75))
	{
		put_char(XOFF);		//send XOFF
		RX_pause=1;		//flag reception suspended
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	80 93 54 02 	sts	0x0254, r24
	}
	
	sei();//Enable Interrupts	
     a8e:	78 94       	sei
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <__vector_14>:

ISR (TIMER0_COMPA_vect) //
{
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
	unsigned char y;
	
	//cli();//Disable Interrupts
	
	TCCR0B = 0;
     ab0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;//disable timer ints
     ab2:	10 92 6e 00 	sts	0x006E, r1
	
	TIFR0 = 0x02;//clear the interrupt
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	85 bb       	out	0x15, r24	; 21
	TCNT0 = 0;
     aba:	16 bc       	out	0x26, r1	; 38
		
	y = PINB;
	if (y & (1<<BL_EN))//on
     abc:	1a 99       	sbic	0x03, 2	; 3
     abe:	11 c0       	rjmp	.+34     	; 0xae2 <__vector_14+0x40>
		OCR0A = BL_dutycycle;
	}
	
	else//off
	{
		PORTB |= (1<<BL_EN);
     ac0:	2a 9a       	sbi	0x05, 2	; 5
		OCR0A = 100 - BL_dutycycle;
     ac2:	84 e6       	ldi	r24, 0x64	; 100
     ac4:	90 91 3d 01 	lds	r25, 0x013D
     ac8:	89 1b       	sub	r24, r25
     aca:	87 bd       	out	0x27, r24	; 39
	}
	
	//PORTB |= (1<<BL_EN);
	
	TIMSK0 = 0x02;//enable OCR0A
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = 0x02;
     ad2:	85 bd       	out	0x25, r24	; 37
	//sei();//Enable Interrupts
}
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	0f 90       	pop	r0
     ada:	0f be       	out	0x3f, r0	; 63
     adc:	0f 90       	pop	r0
     ade:	1f 90       	pop	r1
     ae0:	18 95       	reti
	TCNT0 = 0;
		
	y = PINB;
	if (y & (1<<BL_EN))//on
	{
		PORTB &= (~(1<<BL_EN));
     ae2:	2a 98       	cbi	0x05, 2	; 5
		OCR0A = BL_dutycycle;
     ae4:	80 91 3d 01 	lds	r24, 0x013D
     ae8:	87 bd       	out	0x27, r24	; 39
     aea:	f0 cf       	rjmp	.-32     	; 0xacc <__vector_14+0x2a>

00000aec <ioinit>:
void ioinit (void)
{
	
    //1 = output, 0 = input
   
	DDRB = 0b00000000; //PB0 and PB1 are inputs by default
     aec:	14 b8       	out	0x04, r1	; 4
	DDRD = 0b00000000; //PD2-PD7 are also inputs.  Ports B and D are the data bus.
     aee:	1a b8       	out	0x0a, r1	; 10
	
	PORTB |= (1<<BL_EN);//Backlight off
     af0:	2a 9a       	sbi	0x05, 2	; 5
	DDRB |= (1<<BL_EN);//set PB2 as output
     af2:	22 9a       	sbi	0x04, 2	; 4
	
	
	DDRC = ((1<<EN) | (1<<RS) | (1<<R_W) | (1<<RESET) | (1<<CS1) | (1<<CS2));
     af4:	8f e3       	ldi	r24, 0x3F	; 63
     af6:	87 b9       	out	0x07, r24	; 7
	PORTC = LCD_IDLE;
     af8:	88 e0       	ldi	r24, 0x08	; 8
     afa:	88 b9       	out	0x08, r24	; 8
		
	//Init timer 2
    	TCCR2B = (1<<CS21); //Set Prescaler to 8. CS21=1
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	80 93 b1 00 	sts	0x00B1, r24

	//Set up Timer 0
	TCCR0A = 0x02;//CTC mode
     b02:	84 bd       	out	0x24, r24	; 36
	//TCCR0B = 0x02;
	TIMSK0 = 0x02;//enable OCR0A
     b04:	80 93 6e 00 	sts	0x006E, r24
	//OCR0B = 255 - BL_dutycycle;
	
	//OCR0A = 255 - (100 - BL_dutycycle);
	OCR0A = BL_dutycycle;
     b08:	80 91 3d 01 	lds	r24, 0x013D
     b0c:	87 bd       	out	0x27, r24	; 39

}
     b0e:	08 95       	ret

00000b10 <delay_us>:
//General short delays
void delay_us(uint8_t x)
{
	char temp;
	
	if (x == 0) temp = 1;
     b10:	88 23       	and	r24, r24
     b12:	71 f4       	brne	.+28     	; 0xb30 <delay_us+0x20>
     b14:	9f ef       	ldi	r25, 0xFF	; 255
	else temp = x;
	
	TIFR2 |= 0x01;			//Clear any interrupt flags on Timer2
     b16:	b8 9a       	sbi	0x17, 0	; 23
    
    TCNT2 = 256 - temp; 		//256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
     b18:	90 93 b2 00 	sts	0x00B2, r25

	while(!(TIFR2 & 0x01));
     b1c:	b8 9b       	sbis	0x17, 0	; 23
     b1e:	fe cf       	rjmp	.-4      	; 0xb1c <delay_us+0xc>
	
	if (x == 0) return;		//this is for display timing	
     b20:	88 23       	and	r24, r24
     b22:	29 f0       	breq	.+10     	; 0xb2e <delay_us+0x1e>
	
	//The prescaler doesn't allow for a setting of 16, just 8 or 32. So, we do this twice.
	TIFR2 |= 0x01;
     b24:	b8 9a       	sbi	0x17, 0	; 23
    
    TCNT2 = 256 - temp; 		//256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
     b26:	90 93 b2 00 	sts	0x00B2, r25

	while(!(TIFR2 & 0x01));
     b2a:	b8 9b       	sbis	0x17, 0	; 23
     b2c:	fe cf       	rjmp	.-4      	; 0xb2a <delay_us+0x1a>
     b2e:	08 95       	ret
//General short delays
void delay_us(uint8_t x)
{
	char temp;
	
	if (x == 0) temp = 1;
     b30:	98 2f       	mov	r25, r24
     b32:	91 95       	neg	r25
     b34:	f0 cf       	rjmp	.-32     	; 0xb16 <delay_us+0x6>

00000b36 <delay_ms>:

}

//General short delays
void delay_ms(uint16_t x)
{
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	ec 01       	movw	r28, r24
	for (; x > 0 ; x--)
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	71 f0       	breq	.+28     	; 0xb5c <delay_ms+0x26>
    {
        delay_us(250);
     b40:	8a ef       	ldi	r24, 0xFA	; 250
     b42:	0e 94 88 05 	call	0xb10	; 0xb10 <delay_us>
        delay_us(250);
     b46:	8a ef       	ldi	r24, 0xFA	; 250
     b48:	0e 94 88 05 	call	0xb10	; 0xb10 <delay_us>
        delay_us(250);
     b4c:	8a ef       	ldi	r24, 0xFA	; 250
     b4e:	0e 94 88 05 	call	0xb10	; 0xb10 <delay_us>
        delay_us(250);
     b52:	8a ef       	ldi	r24, 0xFA	; 250
     b54:	0e 94 88 05 	call	0xb10	; 0xb10 <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for (; x > 0 ; x--)
     b58:	21 97       	sbiw	r28, 0x01	; 1
     b5a:	91 f7       	brne	.-28     	; 0xb40 <delay_ms+0xa>
        delay_us(250);
        delay_us(250);
        delay_us(250);
    }
	
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     b62:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     b66:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
     b70:	88 e9       	ldi	r24, 0x98	; 152
     b72:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     b76:	86 e0       	ldi	r24, 0x06	; 6
     b78:	80 93 c2 00 	sts	0x00C2, r24
	sei();
     b7c:	78 94       	sei
}
     b7e:	08 95       	ret

00000b80 <RX_get_byte>:

char RX_get_byte(void)	//retrieves a character from the RX_buffer and does book-keeping
{
	char x;

	while(RX_bytes==0);				//wait for data to be available
     b80:	80 91 53 02 	lds	r24, 0x0253
     b84:	88 23       	and	r24, r24
     b86:	e1 f3       	breq	.-8      	; 0xb80 <RX_get_byte>
	x = RX_array[RX_read++];			//get char from buffer and increment read pointer
     b88:	80 91 51 02 	lds	r24, 0x0251
     b8c:	90 91 52 02 	lds	r25, 0x0252
     b90:	fc 01       	movw	r30, r24
     b92:	e5 59       	subi	r30, 0x95	; 149
     b94:	fd 4f       	sbci	r31, 0xFD	; 253
     b96:	e0 81       	ld	r30, Z
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	90 93 52 02 	sts	0x0252, r25
     b9e:	80 93 51 02 	sts	0x0251, r24
	if(RX_read >= RX_BUFFER_SIZE) RX_read = 0;	//if the read pointer reaches the end of the buffer, wrap back to the beginning
     ba2:	8f 3f       	cpi	r24, 0xFF	; 255
     ba4:	91 05       	cpc	r25, r1
     ba6:	29 f0       	breq	.+10     	; 0xbb2 <RX_get_byte+0x32>
     ba8:	20 f0       	brcs	.+8      	; 0xbb2 <RX_get_byte+0x32>
     baa:	10 92 52 02 	sts	0x0252, r1
     bae:	10 92 51 02 	sts	0x0251, r1
	cli();						//interrupts must be disabled when changing RX_bytes, since it can be chabged here and in the ISR
     bb2:	f8 94       	cli
	RX_bytes--;
     bb4:	80 91 53 02 	lds	r24, 0x0253
     bb8:	81 50       	subi	r24, 0x01	; 1
     bba:	80 93 53 02 	sts	0x0253, r24
	sei();
     bbe:	78 94       	sei
	
	//check to see if we need to re-enable reception 

	if (RX_pause==1)		//if USART reception is suspended
     bc0:	80 91 54 02 	lds	r24, 0x0254
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	11 f0       	breq	.+4      	; 0xbcc <RX_get_byte+0x4c>
		{
			put_char(XON);	//resume reception
			RX_pause=0;	//flag it
		}	
	return x;
}
     bc8:	8e 2f       	mov	r24, r30
     bca:	08 95       	ret
	sei();
	
	//check to see if we need to re-enable reception 

	if (RX_pause==1)		//if USART reception is suspended
		if (RX_bytes < (unsigned char)(RX_BUFFER_SIZE *.25) )		//if RX_buffer is suitably empty
     bcc:	80 91 53 02 	lds	r24, 0x0253
     bd0:	80 34       	cpi	r24, 0x40	; 64
     bd2:	d0 f7       	brcc	.-12     	; 0xbc8 <RX_get_byte+0x48>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     bd4:	80 91 c0 00 	lds	r24, 0x00C0
     bd8:	85 ff       	sbrs	r24, 5
     bda:	fc cf       	rjmp	.-8      	; 0xbd4 <RX_get_byte+0x54>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     bdc:	81 e1       	ldi	r24, 0x11	; 17
     bde:	80 93 c6 00 	sts	0x00C6, r24

	if (RX_pause==1)		//if USART reception is suspended
		if (RX_bytes < (unsigned char)(RX_BUFFER_SIZE *.25) )		//if RX_buffer is suitably empty
		{
			put_char(XON);	//resume reception
			RX_pause=0;	//flag it
     be2:	10 92 54 02 	sts	0x0254, r1
     be6:	f0 cf       	rjmp	.-32     	; 0xbc8 <RX_get_byte+0x48>

00000be8 <put_char>:
		}	
	return x;
}

void put_char(char byte)
{
     be8:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     bea:	80 91 c0 00 	lds	r24, 0x00C0
     bee:	85 ff       	sbrs	r24, 5
     bf0:	fc cf       	rjmp	.-8      	; 0xbea <put_char+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     bf2:	90 93 c6 00 	sts	0x00C6, r25
}
     bf6:	08 95       	ret

00000bf8 <delay>:

//delay for display timing
void delay(void)
{
     bf8:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     bfa:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	8e 31       	cpi	r24, 0x1E	; 30
     c00:	e1 f7       	brne	.-8      	; 0xbfa <delay+0x2>
	{
		asm volatile ("nop");
		
	}	
}
     c02:	08 95       	ret

00000c04 <set_data>:
{
	//PORTB
	//DB0 = PB0
	//DB1 = PB1
	
	PORTB &= 0xFC;
     c04:	95 b1       	in	r25, 0x05	; 5
     c06:	9c 7f       	andi	r25, 0xFC	; 252
     c08:	95 b9       	out	0x05, r25	; 5
	//DB4 = PD4
	//DB5 = PD5
	//DB6 = PD6
	//DB7 = PD7
	
	PORTD &= 0x03;
     c0a:	9b b1       	in	r25, 0x0b	; 11
     c0c:	93 70       	andi	r25, 0x03	; 3
     c0e:	9b b9       	out	0x0b, r25	; 11
	
	PORTB |= (data & 0x03);
     c10:	25 b1       	in	r18, 0x05	; 5
     c12:	98 2f       	mov	r25, r24
     c14:	93 70       	andi	r25, 0x03	; 3
     c16:	92 2b       	or	r25, r18
     c18:	95 b9       	out	0x05, r25	; 5
	PORTD |= (data & 0xFC);
     c1a:	9b b1       	in	r25, 0x0b	; 11
     c1c:	8c 7f       	andi	r24, 0xFC	; 252
     c1e:	98 2b       	or	r25, r24
     c20:	9b b9       	out	0x0b, r25	; 11

}
     c22:	08 95       	ret

00000c24 <write_command_LCD>:
	}
}

//write_command_LCD
void write_command_LCD(char byte, char chip)
{
     c24:	98 2f       	mov	r25, r24
	//byte is the command to write, chip determines which chips get written to 1=1,2=2, anything else=both

	DDRB |= 0x03; //PB0 and PB1 are outs
     c26:	84 b1       	in	r24, 0x04	; 4
     c28:	83 60       	ori	r24, 0x03	; 3
     c2a:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.
     c2c:	8a b1       	in	r24, 0x0a	; 10
     c2e:	8c 6f       	ori	r24, 0xFC	; 252
     c30:	8a b9       	out	0x0a, r24	; 10
	
	if (chip==1) 
     c32:	61 30       	cpi	r22, 0x01	; 1
     c34:	39 f1       	breq	.+78     	; 0xc84 <write_command_LCD+0x60>
		PORTC = LCD_COMMAND1;
	else if (chip == 2)
     c36:	62 30       	cpi	r22, 0x02	; 2
     c38:	11 f1       	breq	.+68     	; 0xc7e <write_command_LCD+0x5a>
		PORTC = LCD_COMMAND2;
	     else
		PORTC = LCD_COMMAND12;
     c3a:	88 e3       	ldi	r24, 0x38	; 56
     c3c:	88 b9       	out	0x08, r24	; 8
 		
	set_data(byte);
     c3e:	89 2f       	mov	r24, r25
     c40:	0e 94 02 06 	call	0xc04	; 0xc04 <set_data>
     c44:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     c46:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     c48:	8f 5f       	subi	r24, 0xFF	; 255
     c4a:	8e 31       	cpi	r24, 0x1E	; 30
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <write_command_LCD+0x22>
		PORTC = LCD_COMMAND12;
 		
	set_data(byte);
	delay();

	CLK_LCD;
     c4e:	40 9a       	sbi	0x08, 0	; 8
     c50:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     c52:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	8e 31       	cpi	r24, 0x1E	; 30
     c58:	e1 f7       	brne	.-8      	; 0xc52 <write_command_LCD+0x2e>
		PORTC = LCD_COMMAND12;
 		
	set_data(byte);
	delay();

	CLK_LCD;
     c5a:	40 98       	cbi	0x08, 0	; 8
     c5c:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     c5e:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     c60:	8f 5f       	subi	r24, 0xFF	; 255
     c62:	8e 31       	cpi	r24, 0x1E	; 30
     c64:	e1 f7       	brne	.-8      	; 0xc5e <write_command_LCD+0x3a>
 		
	set_data(byte);
	delay();

	CLK_LCD;
	PORTC = LCD_IDLE;	
     c66:	88 e0       	ldi	r24, 0x08	; 8
     c68:	88 b9       	out	0x08, r24	; 8
     c6a:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     c6c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     c6e:	8f 5f       	subi	r24, 0xFF	; 255
     c70:	8e 31       	cpi	r24, 0x1E	; 30
     c72:	e1 f7       	brne	.-8      	; 0xc6c <write_command_LCD+0x48>

	CLK_LCD;
	PORTC = LCD_IDLE;	
	delay();

	DDRB &= 0xFC;	//PB0 and PB1 as inputs
     c74:	84 b1       	in	r24, 0x04	; 4
     c76:	8c 7f       	andi	r24, 0xFC	; 252
     c78:	84 b9       	out	0x04, r24	; 4
	DDRD = 0;
     c7a:	1a b8       	out	0x0a, r1	; 10
}
     c7c:	08 95       	ret
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.
	
	if (chip==1) 
		PORTC = LCD_COMMAND1;
	else if (chip == 2)
		PORTC = LCD_COMMAND2;
     c7e:	88 e1       	ldi	r24, 0x18	; 24
     c80:	88 b9       	out	0x08, r24	; 8
     c82:	dd cf       	rjmp	.-70     	; 0xc3e <write_command_LCD+0x1a>

	DDRB |= 0x03; //PB0 and PB1 are outs
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.
	
	if (chip==1) 
		PORTC = LCD_COMMAND1;
     c84:	88 e2       	ldi	r24, 0x28	; 40
     c86:	88 b9       	out	0x08, r24	; 8
     c88:	da cf       	rjmp	.-76     	; 0xc3e <write_command_LCD+0x1a>

00000c8a <write_data_LCD>:
	DDRD = 0;
}
 
//write_data_LCD
void write_data_LCD(char byte, char chip)
{
     c8a:	98 2f       	mov	r25, r24
	//byte is the data to write, chip determines which chips get written to 1=1,2=2 anything else=both
	
	DDRB |= 0x03; //PB0 and PB1 are outs
     c8c:	84 b1       	in	r24, 0x04	; 4
     c8e:	83 60       	ori	r24, 0x03	; 3
     c90:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.	
     c92:	8a b1       	in	r24, 0x0a	; 10
     c94:	8c 6f       	ori	r24, 0xFC	; 252
     c96:	8a b9       	out	0x0a, r24	; 10

	if (chip==1) 
     c98:	61 30       	cpi	r22, 0x01	; 1
     c9a:	39 f1       	breq	.+78     	; 0xcea <write_data_LCD+0x60>
		PORTC = LCD_DATA1;
	else if (chip == 2)
     c9c:	62 30       	cpi	r22, 0x02	; 2
     c9e:	11 f1       	breq	.+68     	; 0xce4 <write_data_LCD+0x5a>
		PORTC = LCD_DATA2;
	     else
		PORTC = LCD_DATA12;
     ca0:	8a e3       	ldi	r24, 0x3A	; 58
     ca2:	88 b9       	out	0x08, r24	; 8

	set_data(byte);
     ca4:	89 2f       	mov	r24, r25
     ca6:	0e 94 02 06 	call	0xc04	; 0xc04 <set_data>
     caa:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     cac:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     cae:	8f 5f       	subi	r24, 0xFF	; 255
     cb0:	8e 31       	cpi	r24, 0x1E	; 30
     cb2:	e1 f7       	brne	.-8      	; 0xcac <write_data_LCD+0x22>
		PORTC = LCD_DATA12;

	set_data(byte);
	delay();

	CLK_LCD;
     cb4:	40 9a       	sbi	0x08, 0	; 8
     cb6:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     cb8:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	8e 31       	cpi	r24, 0x1E	; 30
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <write_data_LCD+0x2e>
		PORTC = LCD_DATA12;

	set_data(byte);
	delay();

	CLK_LCD;
     cc0:	40 98       	cbi	0x08, 0	; 8
     cc2:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     cc4:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	8e 31       	cpi	r24, 0x1E	; 30
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <write_data_LCD+0x3a>

	set_data(byte);
	delay();

	CLK_LCD;
	PORTC = LCD_IDLE;	
     ccc:	88 e0       	ldi	r24, 0x08	; 8
     cce:	88 b9       	out	0x08, r24	; 8
     cd0:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     cd2:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     cd4:	8f 5f       	subi	r24, 0xFF	; 255
     cd6:	8e 31       	cpi	r24, 0x1E	; 30
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <write_data_LCD+0x48>

	CLK_LCD;
	PORTC = LCD_IDLE;	
	delay();
	
	DDRB &= 0xFC;	//PB0 and PB1 as inputs
     cda:	84 b1       	in	r24, 0x04	; 4
     cdc:	8c 7f       	andi	r24, 0xFC	; 252
     cde:	84 b9       	out	0x04, r24	; 4
	DDRD = 0;
     ce0:	1a b8       	out	0x0a, r1	; 10
}
     ce2:	08 95       	ret
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.	

	if (chip==1) 
		PORTC = LCD_DATA1;
	else if (chip == 2)
		PORTC = LCD_DATA2;
     ce4:	8a e1       	ldi	r24, 0x1A	; 26
     ce6:	88 b9       	out	0x08, r24	; 8
     ce8:	dd cf       	rjmp	.-70     	; 0xca4 <write_data_LCD+0x1a>
	
	DDRB |= 0x03; //PB0 and PB1 are outs
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.	

	if (chip==1) 
		PORTC = LCD_DATA1;
     cea:	8a e2       	ldi	r24, 0x2A	; 42
     cec:	88 b9       	out	0x08, r24	; 8
     cee:	da cf       	rjmp	.-76     	; 0xca4 <write_data_LCD+0x1a>

00000cf0 <write_block>:


//this writes a block of contiguous bytes to a single page
//automatically takes care of crossing from one chip to the next
void write_block(char x, char page, char length, char* buf)
{
     cf0:	af 92       	push	r10
     cf2:	bf 92       	push	r11
     cf4:	df 92       	push	r13
     cf6:	ef 92       	push	r14
     cf8:	ff 92       	push	r15
     cfa:	0f 93       	push	r16
     cfc:	1f 93       	push	r17
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	0f 92       	push	r0
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
     d08:	08 2f       	mov	r16, r24
     d0a:	86 2f       	mov	r24, r22
     d0c:	14 2f       	mov	r17, r20
     d0e:	79 01       	movw	r14, r18
	char side;
	char i, s, n1, n2, o;

	side=1;
	o=0;			//offset in data
	set_page(page);		//set proper page
     d10:	88 6b       	ori	r24, 0xB8	; 184
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
	if (x>63)		//account for x being larger than 63 
     d18:	00 34       	cpi	r16, 0x40	; 64
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <write_block+0x2e>
     d1c:	58 c0       	rjmp	.+176    	; 0xdce <write_block+0xde>
     d1e:	21 e0       	ldi	r18, 0x01	; 1
     d20:	29 83       	std	Y+1, r18	; 0x01
	{
		x-= 64;
		side=2;
	}

	s = (64-x);		//distance to edge
     d22:	40 e4       	ldi	r20, 0x40	; 64
     d24:	40 1b       	sub	r20, r16

	if (length>s)		
     d26:	41 17       	cp	r20, r17
     d28:	08 f4       	brcc	.+2      	; 0xd2c <write_block+0x3c>
     d2a:	4d c0       	rjmp	.+154    	; 0xdc6 <write_block+0xd6>
     d2c:	dd 24       	eor	r13, r13
	{
		n1=length;
		n2=0;
	}

	set_x(x);
     d2e:	80 2f       	mov	r24, r16
     d30:	80 64       	ori	r24, 0x40	; 64
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>

	DDRB |= 0x03; //PB0 and PB1 are outs
     d38:	84 b1       	in	r24, 0x04	; 4
     d3a:	83 60       	ori	r24, 0x03	; 3
     d3c:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.	
     d3e:	8a b1       	in	r24, 0x0a	; 10
     d40:	8c 6f       	ori	r24, 0xFC	; 252
     d42:	8a b9       	out	0x0a, r24	; 10

	//write the data
	if  (side==1) 					//select proper chip
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	09 f4       	brne	.+2      	; 0xd4c <write_block+0x5c>
     d4a:	78 c0       	rjmp	.+240    	; 0xe3c <write_block+0x14c>
		PORTC = LCD_DATA1;	
	else
		PORTC = LCD_DATA2;
     d4c:	8a e1       	ldi	r24, 0x1A	; 26
     d4e:	88 b9       	out	0x08, r24	; 8


	for(i=0;i<n1;i++)
     d50:	11 23       	and	r17, r17
     d52:	09 f4       	brne	.+2      	; 0xd56 <write_block+0x66>
     d54:	78 c0       	rjmp	.+240    	; 0xe46 <write_block+0x156>

	//write the data
	if  (side==1) 					//select proper chip
		PORTC = LCD_DATA1;	
	else
		PORTC = LCD_DATA2;
     d56:	0e 2d       	mov	r16, r14
     d58:	c7 01       	movw	r24, r14
     d5a:	5c 01       	movw	r10, r24


	for(i=0;i<n1;i++)
	{
		set_data(buf[o++]);			//put data on bus
     d5c:	f5 01       	movw	r30, r10
     d5e:	80 81       	ld	r24, Z
     d60:	0e 94 02 06 	call	0xc04	; 0xc04 <set_data>
     d64:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     d66:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     d68:	8f 5f       	subi	r24, 0xFF	; 255
     d6a:	8e 31       	cpi	r24, 0x1E	; 30
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <write_block+0x76>

	for(i=0;i<n1;i++)
	{
		set_data(buf[o++]);			//put data on bus
		delay();
		CLK_LCD;				//clock it in
     d6e:	40 9a       	sbi	0x08, 0	; 8
     d70:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     d72:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	8e 31       	cpi	r24, 0x1E	; 30
     d78:	e1 f7       	brne	.-8      	; 0xd72 <write_block+0x82>

	for(i=0;i<n1;i++)
	{
		set_data(buf[o++]);			//put data on bus
		delay();
		CLK_LCD;				//clock it in
     d7a:	40 98       	cbi	0x08, 0	; 8
     d7c:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     d7e:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	8e 31       	cpi	r24, 0x1E	; 30
     d84:	e1 f7       	brne	.-8      	; 0xd7e <write_block+0x8e>
     d86:	08 94       	sec
     d88:	a1 1c       	adc	r10, r1
     d8a:	b1 1c       	adc	r11, r1
		PORTC = LCD_DATA1;	
	else
		PORTC = LCD_DATA2;


	for(i=0;i<n1;i++)
     d8c:	8a 2d       	mov	r24, r10
     d8e:	80 1b       	sub	r24, r16
     d90:	81 17       	cp	r24, r17
     d92:	20 f3       	brcs	.-56     	; 0xd5c <write_block+0x6c>
     d94:	01 2f       	mov	r16, r17
		set_data(buf[o++]);			//put data on bus
		delay();
		CLK_LCD;				//clock it in
	}

	PORTC = LCD_IDLE;	
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	88 b9       	out	0x08, r24	; 8
     d9a:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     d9c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     d9e:	8f 5f       	subi	r24, 0xFF	; 255
     da0:	8e 31       	cpi	r24, 0x1E	; 30
     da2:	e1 f7       	brne	.-8      	; 0xd9c <write_block+0xac>
	}

	PORTC = LCD_IDLE;	
	delay();

	if(n2>0)
     da4:	dd 20       	and	r13, r13
     da6:	b9 f4       	brne	.+46     	; 0xdd6 <write_block+0xe6>
		PORTC = LCD_IDLE;	
		delay();

	}//if n2>0

	DDRB &= 0xFC;	//PB0 and PB1 as inputs
     da8:	84 b1       	in	r24, 0x04	; 4
     daa:	8c 7f       	andi	r24, 0xFC	; 252
     dac:	84 b9       	out	0x04, r24	; 4
	DDRD = 0;	
     dae:	1a b8       	out	0x0a, r1	; 10
}
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	df 90       	pop	r13
     dc0:	bf 90       	pop	r11
     dc2:	af 90       	pop	r10
     dc4:	08 95       	ret
	s = (64-x);		//distance to edge

	if (length>s)		
	{
		n1=s;		//how much to read in the first loop
		n2=length-s;	//how much to read in the second loop
     dc6:	d1 2e       	mov	r13, r17
     dc8:	d4 1a       	sub	r13, r20
     dca:	14 2f       	mov	r17, r20
     dcc:	b0 cf       	rjmp	.-160    	; 0xd2e <write_block+0x3e>
	side=1;
	o=0;			//offset in data
	set_page(page);		//set proper page
	if (x>63)		//account for x being larger than 63 
	{
		x-= 64;
     dce:	00 54       	subi	r16, 0x40	; 64
     dd0:	32 e0       	ldi	r19, 0x02	; 2
     dd2:	39 83       	std	Y+1, r19	; 0x01
     dd4:	a6 cf       	rjmp	.-180    	; 0xd22 <write_block+0x32>
	PORTC = LCD_IDLE;	
	delay();

	if(n2>0)
	{
		set_x(0);
     dd6:	80 e4       	ldi	r24, 0x40	; 64
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>

		DDRB |= 0x03; //PB0 and PB1 are outs
     dde:	84 b1       	in	r24, 0x04	; 4
     de0:	83 60       	ori	r24, 0x03	; 3
     de2:	84 b9       	out	0x04, r24	; 4
		DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.	
     de4:	8a b1       	in	r24, 0x0a	; 10
     de6:	8c 6f       	ori	r24, 0xFC	; 252
     de8:	8a b9       	out	0x0a, r24	; 10

		if  (side==1) 				//select proper chip(opposite of before, since we ran over)
     dea:	f9 81       	ldd	r31, Y+1	; 0x01
     dec:	f1 30       	cpi	r31, 0x01	; 1
     dee:	69 f1       	breq	.+90     	; 0xe4a <write_block+0x15a>
			PORTC = LCD_DATA2;	
		else
			PORTC = LCD_DATA1;
     df0:	8a e2       	ldi	r24, 0x2A	; 42
     df2:	88 b9       	out	0x08, r24	; 8
     df4:	10 e0       	ldi	r17, 0x00	; 0


		for(i=0;i<n2;i++)
		{
			set_data(buf[o++]);		//put data on bus
     df6:	f7 01       	movw	r30, r14
     df8:	e0 0f       	add	r30, r16
     dfa:	f1 1d       	adc	r31, r1
     dfc:	0f 5f       	subi	r16, 0xFF	; 255
     dfe:	80 81       	ld	r24, Z
     e00:	0e 94 02 06 	call	0xc04	; 0xc04 <set_data>
     e04:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e06:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	8e 31       	cpi	r24, 0x1E	; 30
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <write_block+0x116>

		for(i=0;i<n2;i++)
		{
			set_data(buf[o++]);		//put data on bus
			delay();
			CLK_LCD;			//clock it in
     e0e:	40 9a       	sbi	0x08, 0	; 8
     e10:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e12:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e14:	8f 5f       	subi	r24, 0xFF	; 255
     e16:	8e 31       	cpi	r24, 0x1E	; 30
     e18:	e1 f7       	brne	.-8      	; 0xe12 <write_block+0x122>

		for(i=0;i<n2;i++)
		{
			set_data(buf[o++]);		//put data on bus
			delay();
			CLK_LCD;			//clock it in
     e1a:	40 98       	cbi	0x08, 0	; 8
     e1c:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e1e:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	8e 31       	cpi	r24, 0x1E	; 30
     e24:	e1 f7       	brne	.-8      	; 0xe1e <write_block+0x12e>
			PORTC = LCD_DATA2;	
		else
			PORTC = LCD_DATA1;


		for(i=0;i<n2;i++)
     e26:	1f 5f       	subi	r17, 0xFF	; 255
     e28:	1d 15       	cp	r17, r13
     e2a:	28 f3       	brcs	.-54     	; 0xdf6 <write_block+0x106>
			set_data(buf[o++]);		//put data on bus
			delay();
			CLK_LCD;			//clock it in
		}
	
		PORTC = LCD_IDLE;	
     e2c:	88 e0       	ldi	r24, 0x08	; 8
     e2e:	88 b9       	out	0x08, r24	; 8
     e30:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e32:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	8e 31       	cpi	r24, 0x1E	; 30
     e38:	e1 f7       	brne	.-8      	; 0xe32 <write_block+0x142>
     e3a:	b6 cf       	rjmp	.-148    	; 0xda8 <write_block+0xb8>
	DDRB |= 0x03; //PB0 and PB1 are outs
	DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.	

	//write the data
	if  (side==1) 					//select proper chip
		PORTC = LCD_DATA1;	
     e3c:	8a e2       	ldi	r24, 0x2A	; 42
     e3e:	88 b9       	out	0x08, r24	; 8
	else
		PORTC = LCD_DATA2;


	for(i=0;i<n1;i++)
     e40:	11 23       	and	r17, r17
     e42:	09 f0       	breq	.+2      	; 0xe46 <write_block+0x156>
     e44:	88 cf       	rjmp	.-240    	; 0xd56 <write_block+0x66>
     e46:	00 e0       	ldi	r16, 0x00	; 0
     e48:	a6 cf       	rjmp	.-180    	; 0xd96 <write_block+0xa6>

		DDRB |= 0x03; //PB0 and PB1 are outs
		DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.	

		if  (side==1) 				//select proper chip(opposite of before, since we ran over)
			PORTC = LCD_DATA2;	
     e4a:	8a e1       	ldi	r24, 0x1A	; 26
     e4c:	88 b9       	out	0x08, r24	; 8
     e4e:	10 e0       	ldi	r17, 0x00	; 0
     e50:	d2 cf       	rjmp	.-92     	; 0xdf6 <write_block+0x106>

00000e52 <read_data_LCD>:
char read_data_LCD(char chip)
{
	char data1,data2;
	//chip determines which chip to read from
		
	if  (chip==1) 				//select proper chip
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	69 f1       	breq	.+90     	; 0xeb0 <read_data_LCD+0x5e>
		PORTC = LCD_READ1;	
	else
		PORTC = LCD_READ2;
     e56:	8e e1       	ldi	r24, 0x1E	; 30
     e58:	88 b9       	out	0x08, r24	; 8
     e5a:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e5c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	8e 31       	cpi	r24, 0x1E	; 30
     e62:	e1 f7       	brne	.-8      	; 0xe5c <read_data_LCD+0xa>
		PORTC = LCD_READ1;	
	else
		PORTC = LCD_READ2;
	
	delay();				//dummy clk
	PORTC |= (1 << EN);
     e64:	40 9a       	sbi	0x08, 0	; 8
     e66:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e68:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	8e 31       	cpi	r24, 0x1E	; 30
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <read_data_LCD+0x16>
		PORTC = LCD_READ2;
	
	delay();				//dummy clk
	PORTC |= (1 << EN);
	delay();
	PORTC &= ~(1 << EN);
     e70:	40 98       	cbi	0x08, 0	; 8
     e72:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e74:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e76:	8f 5f       	subi	r24, 0xFF	; 255
     e78:	8e 31       	cpi	r24, 0x1E	; 30
     e7a:	e1 f7       	brne	.-8      	; 0xe74 <read_data_LCD+0x22>
	PORTC |= (1 << EN);
	delay();
	PORTC &= ~(1 << EN);
	delay();

	PORTC |= (1 << EN);
     e7c:	40 9a       	sbi	0x08, 0	; 8
     e7e:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e80:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e82:	8f 5f       	subi	r24, 0xFF	; 255
     e84:	8e 31       	cpi	r24, 0x1E	; 30
     e86:	e1 f7       	brne	.-8      	; 0xe80 <read_data_LCD+0x2e>
	delay();

	PORTC |= (1 << EN);
	delay();

	data1 = PINB;				//read data
     e88:	23 b1       	in	r18, 0x03	; 3
	data1 &= 0x03;
	
	data2 = PIND;
     e8a:	99 b1       	in	r25, 0x09	; 9
	data2 &= 0xFC;
	
	data1 |= data2;
	
	PORTC &= ~(1 << EN);
     e8c:	40 98       	cbi	0x08, 0	; 8
     e8e:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e90:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     e92:	8f 5f       	subi	r24, 0xFF	; 255
     e94:	8e 31       	cpi	r24, 0x1E	; 30
     e96:	e1 f7       	brne	.-8      	; 0xe90 <read_data_LCD+0x3e>
	data1 |= data2;
	
	PORTC &= ~(1 << EN);
	delay();

	PORTC = LCD_IDLE;	
     e98:	88 e0       	ldi	r24, 0x08	; 8
     e9a:	88 b9       	out	0x08, r24	; 8
     e9c:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     e9e:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     ea0:	8f 5f       	subi	r24, 0xFF	; 255
     ea2:	8e 31       	cpi	r24, 0x1E	; 30
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <read_data_LCD+0x4c>

	PORTC |= (1 << EN);
	delay();

	data1 = PINB;				//read data
	data1 &= 0x03;
     ea6:	23 70       	andi	r18, 0x03	; 3
     ea8:	9c 7f       	andi	r25, 0xFC	; 252
	delay();

	PORTC = LCD_IDLE;	
	delay();
	return data1;
}
     eaa:	89 2f       	mov	r24, r25
     eac:	82 2b       	or	r24, r18
     eae:	08 95       	ret
{
	char data1,data2;
	//chip determines which chip to read from
		
	if  (chip==1) 				//select proper chip
		PORTC = LCD_READ1;	
     eb0:	8e e2       	ldi	r24, 0x2E	; 46
     eb2:	88 b9       	out	0x08, r24	; 8
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	d2 cf       	rjmp	.-92     	; 0xe5c <read_data_LCD+0xa>

00000eb8 <read_block>:
}

//reads [length] display bytes from page [page] starting at horizontal value [x] and puts the values in buf
//automatically accounts for crossing chips 
void read_block(char x, char page, char length, char* buf)
{
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	0f 92       	push	r0
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	08 2f       	mov	r16, r24
     ece:	86 2f       	mov	r24, r22
     ed0:	14 2f       	mov	r17, r20
     ed2:	69 01       	movw	r12, r18
	char data1,data2,side;
	char c,s, n1, n2, o;

	side=1;
	o=0;				//offset in data
	set_page(page);			//set proper page
     ed4:	88 6b       	ori	r24, 0xB8	; 184
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
	if (x>63)			//account for x being larger than 63 
     edc:	00 34       	cpi	r16, 0x40	; 64
     ede:	08 f0       	brcs	.+2      	; 0xee2 <read_block+0x2a>
     ee0:	64 c0       	rjmp	.+200    	; 0xfaa <read_block+0xf2>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	89 83       	std	Y+1, r24	; 0x01
	{
		x-= 64;
		side=2;
	}

	s = (64-x);			//distance to edge
     ee6:	40 e4       	ldi	r20, 0x40	; 64
     ee8:	40 1b       	sub	r20, r16

	if (length>s)		
     eea:	41 17       	cp	r20, r17
     eec:	08 f4       	brcc	.+2      	; 0xef0 <read_block+0x38>
     eee:	4d c0       	rjmp	.+154    	; 0xf8a <read_block+0xd2>
     ef0:	ff 24       	eor	r15, r15
	{
		n1=length;
		n2=0;
	}

	set_x(x);			//set x	
     ef2:	80 2f       	mov	r24, r16
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
				
	if  (side==1) 			//select proper chip
     efc:	f9 81       	ldd	r31, Y+1	; 0x01
     efe:	f1 30       	cpi	r31, 0x01	; 1
     f00:	09 f4       	brne	.+2      	; 0xf04 <read_block+0x4c>
     f02:	4f c0       	rjmp	.+158    	; 0xfa2 <read_block+0xea>
		PORTC = LCD_READ1;	
	else
		PORTC = LCD_READ2;
     f04:	8e e1       	ldi	r24, 0x1E	; 30
     f06:	88 b9       	out	0x08, r24	; 8
     f08:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     f0a:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	8e 31       	cpi	r24, 0x1E	; 30
     f10:	e1 f7       	brne	.-8      	; 0xf0a <read_block+0x52>
		PORTC = LCD_READ1;	
	else
		PORTC = LCD_READ2;

	delay();			//dummy clk
	PORTC |= (1 << EN);
     f12:	40 9a       	sbi	0x08, 0	; 8
     f14:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     f16:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	8e 31       	cpi	r24, 0x1E	; 30
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <read_block+0x5e>
		PORTC = LCD_READ2;

	delay();			//dummy clk
	PORTC |= (1 << EN);
	delay();
	PORTC &= ~(1 << EN);
     f1e:	40 98       	cbi	0x08, 0	; 8
     f20:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     f22:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	8e 31       	cpi	r24, 0x1E	; 30
     f28:	e1 f7       	brne	.-8      	; 0xf22 <read_block+0x6a>
	PORTC |= (1 << EN);
	delay();
	PORTC &= ~(1 << EN);
	delay();

	for(c=0;c < n1;c++)		//loop for all the bytes	
     f2a:	11 23       	and	r17, r17
     f2c:	09 f4       	brne	.+2      	; 0xf30 <read_block+0x78>
     f2e:	81 c0       	rjmp	.+258    	; 0x1032 <read_block+0x17a>
     f30:	4c 2d       	mov	r20, r12
     f32:	c6 01       	movw	r24, r12
     f34:	fc 01       	movw	r30, r24
		{
			PORTC |= (1 << EN);
     f36:	40 9a       	sbi	0x08, 0	; 8
     f38:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     f3a:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     f3c:	8f 5f       	subi	r24, 0xFF	; 255
     f3e:	8e 31       	cpi	r24, 0x1E	; 30
     f40:	e1 f7       	brne	.-8      	; 0xf3a <read_block+0x82>
	for(c=0;c < n1;c++)		//loop for all the bytes	
		{
			PORTC |= (1 << EN);
			delay();

			data1 = PINB;	//read data
     f42:	93 b1       	in	r25, 0x03	; 3
			data1 &= 0x03;
     f44:	93 70       	andi	r25, 0x03	; 3
	
			data2 = PIND;
     f46:	89 b1       	in	r24, 0x09	; 9
			data2 &= 0xFC;
	
			data1 |= data2;
			buf[o++] = data1;
     f48:	8c 7f       	andi	r24, 0xFC	; 252
     f4a:	89 2b       	or	r24, r25
     f4c:	80 83       	st	Z, r24

			PORTC &= ~(1 << EN);
     f4e:	40 98       	cbi	0x08, 0	; 8
     f50:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     f52:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	8e 31       	cpi	r24, 0x1E	; 30
     f58:	e1 f7       	brne	.-8      	; 0xf52 <read_block+0x9a>
     f5a:	31 96       	adiw	r30, 0x01	; 1
	PORTC |= (1 << EN);
	delay();
	PORTC &= ~(1 << EN);
	delay();

	for(c=0;c < n1;c++)		//loop for all the bytes	
     f5c:	8e 2f       	mov	r24, r30
     f5e:	84 1b       	sub	r24, r20
     f60:	81 17       	cp	r24, r17
     f62:	48 f3       	brcs	.-46     	; 0xf36 <read_block+0x7e>
     f64:	01 2f       	mov	r16, r17
			PORTC &= ~(1 << EN);
			delay();

		}

	PORTC = LCD_IDLE;	
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	88 b9       	out	0x08, r24	; 8
     f6a:	10 e0       	ldi	r17, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     f6c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     f6e:	1f 5f       	subi	r17, 0xFF	; 255
     f70:	1e 31       	cpi	r17, 0x1E	; 30
     f72:	e1 f7       	brne	.-8      	; 0xf6c <read_block+0xb4>
		}

	PORTC = LCD_IDLE;	
	delay();	

	if (n2>0)
     f74:	ff 20       	and	r15, r15
     f76:	e9 f4       	brne	.+58     	; 0xfb2 <read_block+0xfa>
			}

		PORTC = LCD_IDLE;	
		delay();	
	}//if n2>0
}
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	df 90       	pop	r13
     f86:	cf 90       	pop	r12
     f88:	08 95       	ret
	s = (64-x);			//distance to edge

	if (length>s)		
	{
		n1=s;			//how much to read in the first loop
		n2=length-s;		//how much to read in the second loop
     f8a:	f1 2e       	mov	r15, r17
     f8c:	f4 1a       	sub	r15, r20
     f8e:	14 2f       	mov	r17, r20
	{
		n1=length;
		n2=0;
	}

	set_x(x);			//set x	
     f90:	80 2f       	mov	r24, r16
     f92:	80 64       	ori	r24, 0x40	; 64
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
				
	if  (side==1) 			//select proper chip
     f9a:	f9 81       	ldd	r31, Y+1	; 0x01
     f9c:	f1 30       	cpi	r31, 0x01	; 1
     f9e:	09 f0       	breq	.+2      	; 0xfa2 <read_block+0xea>
     fa0:	b1 cf       	rjmp	.-158    	; 0xf04 <read_block+0x4c>
		PORTC = LCD_READ1;	
     fa2:	8e e2       	ldi	r24, 0x2E	; 46
     fa4:	88 b9       	out	0x08, r24	; 8
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	b0 cf       	rjmp	.-160    	; 0xf0a <read_block+0x52>
	side=1;
	o=0;				//offset in data
	set_page(page);			//set proper page
	if (x>63)			//account for x being larger than 63 
	{
		x-= 64;
     faa:	00 54       	subi	r16, 0x40	; 64
     fac:	e2 e0       	ldi	r30, 0x02	; 2
     fae:	e9 83       	std	Y+1, r30	; 0x01
     fb0:	9a cf       	rjmp	.-204    	; 0xee6 <read_block+0x2e>
	PORTC = LCD_IDLE;	
	delay();	

	if (n2>0)
	{	
		set_x(0);			// we got here because we overran the previous side. always start @ 0
     fb2:	80 e4       	ldi	r24, 0x40	; 64
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
		if  (side==1) 			//select proper chip, note this is opposite of normal because this read catches overrun from previous side
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	b1 f1       	breq	.+108    	; 0x102c <read_block+0x174>
			PORTC = LCD_READ2;	
		else
			PORTC = LCD_READ1;
     fc0:	8e e2       	ldi	r24, 0x2E	; 46
     fc2:	88 b9       	out	0x08, r24	; 8
     fc4:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     fc6:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	8e 31       	cpi	r24, 0x1E	; 30
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <read_block+0x10e>
			PORTC = LCD_READ2;	
		else
			PORTC = LCD_READ1;
		
		delay();			//dummy clk
		PORTC |= (1 << EN);
     fce:	40 9a       	sbi	0x08, 0	; 8
     fd0:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     fd2:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	8e 31       	cpi	r24, 0x1E	; 30
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <read_block+0x11a>
			PORTC = LCD_READ1;
		
		delay();			//dummy clk
		PORTC |= (1 << EN);
		delay();
		PORTC &= ~(1 << EN);
     fda:	40 98       	cbi	0x08, 0	; 8
     fdc:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     fde:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     fe0:	8f 5f       	subi	r24, 0xFF	; 255
     fe2:	8e 31       	cpi	r24, 0x1E	; 30
     fe4:	e1 f7       	brne	.-8      	; 0xfde <read_block+0x126>
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	32 2f       	mov	r19, r18
     fea:	30 0f       	add	r19, r16
		PORTC &= ~(1 << EN);
		delay();

		for(c=0;c < n2;c++)		//loop for all the bytes	
			{
				PORTC |= (1 << EN);
     fec:	40 9a       	sbi	0x08, 0	; 8
     fee:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
     ff0:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
     ff2:	8f 5f       	subi	r24, 0xFF	; 255
     ff4:	8e 31       	cpi	r24, 0x1E	; 30
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <read_block+0x138>
		for(c=0;c < n2;c++)		//loop for all the bytes	
			{
				PORTC |= (1 << EN);
				delay();

				data1 = PINB;	//read data
     ff8:	83 b1       	in	r24, 0x03	; 3
				data1 &= 0x03;
     ffa:	83 70       	andi	r24, 0x03	; 3
	
				data2 = PIND;
     ffc:	99 b1       	in	r25, 0x09	; 9
				data2 &= 0xFC;
	
				data1 |= data2;
				buf[o++] = data1;
     ffe:	f6 01       	movw	r30, r12
    1000:	e3 0f       	add	r30, r19
    1002:	f1 1d       	adc	r31, r1
    1004:	9c 7f       	andi	r25, 0xFC	; 252
    1006:	98 2b       	or	r25, r24
    1008:	90 83       	st	Z, r25

				PORTC &= ~(1 << EN);
    100a:	40 98       	cbi	0x08, 0	; 8
    100c:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    100e:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
    1010:	8f 5f       	subi	r24, 0xFF	; 255
    1012:	8e 31       	cpi	r24, 0x1E	; 30
    1014:	e1 f7       	brne	.-8      	; 0x100e <read_block+0x156>
		PORTC |= (1 << EN);
		delay();
		PORTC &= ~(1 << EN);
		delay();

		for(c=0;c < n2;c++)		//loop for all the bytes	
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	2f 15       	cp	r18, r15
    101a:	30 f3       	brcs	.-52     	; 0xfe8 <read_block+0x130>
				PORTC &= ~(1 << EN);
				delay();

			}

		PORTC = LCD_IDLE;	
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	88 b9       	out	0x08, r24	; 8
    1020:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1022:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
    1024:	8f 5f       	subi	r24, 0xFF	; 255
    1026:	8e 31       	cpi	r24, 0x1E	; 30
    1028:	e1 f7       	brne	.-8      	; 0x1022 <read_block+0x16a>
    102a:	a6 cf       	rjmp	.-180    	; 0xf78 <read_block+0xc0>

	if (n2>0)
	{	
		set_x(0);			// we got here because we overran the previous side. always start @ 0
		if  (side==1) 			//select proper chip, note this is opposite of normal because this read catches overrun from previous side
			PORTC = LCD_READ2;	
    102c:	18 b9       	out	0x08, r17	; 8
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	ca cf       	rjmp	.-108    	; 0xfc6 <read_block+0x10e>
	PORTC |= (1 << EN);
	delay();
	PORTC &= ~(1 << EN);
	delay();

	for(c=0;c < n1;c++)		//loop for all the bytes	
    1032:	00 e0       	ldi	r16, 0x00	; 0
    1034:	98 cf       	rjmp	.-208    	; 0xf66 <read_block+0xae>

00001036 <clear_screen>:
	PORTD |= (data & 0xFC);

}

void clear_screen(char option)
{
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
	char x, y;

	if (option==0)	//actual erase of screen
    103c:	88 23       	and	r24, r24
    103e:	09 f0       	breq	.+2      	; 0x1042 <clear_screen+0xc>
    1040:	44 c0       	rjmp	.+136    	; 0x10ca <clear_screen+0x94>
    1042:	10 e0       	ldi	r17, 0x00	; 0
			DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
			else set_data(0);

			PORTC = LCD_DATA12;			//write data to both chips
    1044:	0a e3       	ldi	r16, 0x3A	; 58
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
			{
				delay();
				CLK_LCD;
			}
			PORTC = LCD_IDLE;
    1046:	88 e0       	ldi	r24, 0x08	; 8
    1048:	f8 2e       	mov	r15, r24
	{		
		
		for (x = 0; x < 8; x++)
		{
			//set x address (page)
			set_page(x);
    104a:	81 2f       	mov	r24, r17
    104c:	88 6b       	ori	r24, 0xB8	; 184
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
			
			//Set y address to zero
			set_x(0x00);
    1054:	80 e4       	ldi	r24, 0x40	; 64
    1056:	60 e0       	ldi	r22, 0x00	; 0
    1058:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
			
			//y address increments after every write
			//write data
			//need to set data bus to outputs
			DDRB |= 0x03; //PB0 and PB1 are outs
    105c:	84 b1       	in	r24, 0x04	; 4
    105e:	83 60       	ori	r24, 0x03	; 3
    1060:	84 b9       	out	0x04, r24	; 4
			DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.
    1062:	8a b1       	in	r24, 0x0a	; 10
    1064:	8c 6f       	ori	r24, 0xFC	; 252
    1066:	8a b9       	out	0x0a, r24	; 10
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
    1068:	80 91 55 02 	lds	r24, 0x0255
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	49 f1       	breq	.+82     	; 0x10c2 <clear_screen+0x8c>
			else set_data(0);
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	0e 94 02 06 	call	0xc04	; 0xc04 <set_data>

			PORTC = LCD_DATA12;			//write data to both chips
    1076:	08 b9       	out	0x08, r16	; 8
    1078:	90 e0       	ldi	r25, 0x00	; 0
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
    107a:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    107c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
    107e:	8f 5f       	subi	r24, 0xFF	; 255
    1080:	8e 31       	cpi	r24, 0x1E	; 30
    1082:	e1 f7       	brne	.-8      	; 0x107c <clear_screen+0x46>

			PORTC = LCD_DATA12;			//write data to both chips
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
			{
				delay();
				CLK_LCD;
    1084:	40 9a       	sbi	0x08, 0	; 8
    1086:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1088:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	8e 31       	cpi	r24, 0x1E	; 30
    108e:	e1 f7       	brne	.-8      	; 0x1088 <clear_screen+0x52>

			PORTC = LCD_DATA12;			//write data to both chips
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
			{
				delay();
				CLK_LCD;
    1090:	40 98       	cbi	0x08, 0	; 8
    1092:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 30; y++)
	{
		asm volatile ("nop");
    1094:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 30; y++)
    1096:	8f 5f       	subi	r24, 0xFF	; 255
    1098:	8e 31       	cpi	r24, 0x1E	; 30
    109a:	e1 f7       	brne	.-8      	; 0x1094 <clear_screen+0x5e>
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
			else set_data(0);

			PORTC = LCD_DATA12;			//write data to both chips
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
    109c:	9f 5f       	subi	r25, 0xFF	; 255
    109e:	90 34       	cpi	r25, 0x40	; 64
    10a0:	61 f7       	brne	.-40     	; 0x107a <clear_screen+0x44>
			{
				delay();
				CLK_LCD;
			}
			PORTC = LCD_IDLE;
    10a2:	f8 b8       	out	0x08, r15	; 8

			//set the data bus back to inputs
			DDRB &= 0xFC;	//PB0 and PB1 as inputs
    10a4:	84 b1       	in	r24, 0x04	; 4
    10a6:	8c 7f       	andi	r24, 0xFC	; 252
    10a8:	84 b9       	out	0x04, r24	; 4
			DDRD = 0;
    10aa:	1a b8       	out	0x0a, r1	; 10
			x_offset = 0;
    10ac:	10 92 57 02 	sts	0x0257, r1
			y_offset = 0;
    10b0:	10 92 58 02 	sts	0x0258, r1
	char x, y;

	if (option==0)	//actual erase of screen
	{		
		
		for (x = 0; x < 8; x++)
    10b4:	1f 5f       	subi	r17, 0xFF	; 255
    10b6:	18 30       	cpi	r17, 0x08	; 8
    10b8:	41 f6       	brne	.-112    	; 0x104a <clear_screen+0x14>
			for (x=0;x<128;x++)
				buffer[x]=~buffer[x];	//invert the data
			write_block(0,y,128,buffer);	//write data back to screen
		}
	}//end if(option)
}
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	08 95       	ret
			//write data
			//need to set data bus to outputs
			DDRB |= 0x03; //PB0 and PB1 are outs
			DDRD |= 0xFC; //PD2-PD7 are also outs.  Ports B and D are the data bus.
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	0e 94 02 06 	call	0xc04	; 0xc04 <set_data>
    10c8:	d6 cf       	rjmp	.-84     	; 0x1076 <clear_screen+0x40>
	char x, y;

	if (option==0)	//actual erase of screen
	{		
		
		for (x = 0; x < 8; x++)
    10ca:	10 e0       	ldi	r17, 0x00	; 0
	}//end normal clear
	else	//reverse mode switch, do a logical inversion of the screen
	{
		for(y=0;y<8;y++)	//loop for each page
		{
			read_block(0,y,128,buffer);	//read in display data
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	61 2f       	mov	r22, r17
    10d0:	40 e8       	ldi	r20, 0x80	; 128
    10d2:	2c e6       	ldi	r18, 0x6C	; 108
    10d4:	33 e0       	ldi	r19, 0x03	; 3
    10d6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <read_block>
    10da:	90 e0       	ldi	r25, 0x00	; 0
			for (x=0;x<128;x++)
				buffer[x]=~buffer[x];	//invert the data
    10dc:	e9 2f       	mov	r30, r25
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	e4 59       	subi	r30, 0x94	; 148
    10e2:	fc 4f       	sbci	r31, 0xFC	; 252
    10e4:	80 81       	ld	r24, Z
    10e6:	80 95       	com	r24
    10e8:	80 83       	st	Z, r24
	else	//reverse mode switch, do a logical inversion of the screen
	{
		for(y=0;y<8;y++)	//loop for each page
		{
			read_block(0,y,128,buffer);	//read in display data
			for (x=0;x<128;x++)
    10ea:	9f 5f       	subi	r25, 0xFF	; 255
    10ec:	90 38       	cpi	r25, 0x80	; 128
    10ee:	b1 f7       	brne	.-20     	; 0x10dc <clear_screen+0xa6>
				buffer[x]=~buffer[x];	//invert the data
			write_block(0,y,128,buffer);	//write data back to screen
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	61 2f       	mov	r22, r17
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	2c e6       	ldi	r18, 0x6C	; 108
    10f8:	33 e0       	ldi	r19, 0x03	; 3
    10fa:	0e 94 78 06 	call	0xcf0	; 0xcf0 <write_block>
			y_offset = 0;
		}//end page loop normal clear
	}//end normal clear
	else	//reverse mode switch, do a logical inversion of the screen
	{
		for(y=0;y<8;y++)	//loop for each page
    10fe:	1f 5f       	subi	r17, 0xFF	; 255
    1100:	18 30       	cpi	r17, 0x08	; 8
    1102:	21 f7       	brne	.-56     	; 0x10cc <clear_screen+0x96>
    1104:	da cf       	rjmp	.-76     	; 0x10ba <clear_screen+0x84>

00001106 <bitblt>:
//width is width in pixels
//height is height in pixels
//mode determines how the bits in the image combine with the bits already present on the display 
//mode 0=AND, 1=NAND, 2=OR, 3=NOR, 4=XOR, 5=NXOR, 6=fill(used for block erase, data[0] sets fill byte), 7=copy(overwrites background)
void bitblt(char x, char y, char width, char height, char mode, char* data)
{
    1106:	2f 92       	push	r2
    1108:	3f 92       	push	r3
    110a:	4f 92       	push	r4
    110c:	5f 92       	push	r5
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	2e 97       	sbiw	r28, 0x0e	; 14
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	de bf       	out	0x3e, r29	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	cd bf       	out	0x3d, r28	; 61
    113a:	88 87       	std	Y+8, r24	; 0x08
    113c:	34 2e       	mov	r3, r20
    113e:	a2 2e       	mov	r10, r18
    1140:	b0 2e       	mov	r11, r16
    1142:	87 01       	movw	r16, r14
	unsigned char row, column, shift, shift2, mask1, mask2, n, n2, temp, RX_temp;
	int offset, offset2;

	//make sure legal dimensions
	if ((height<1) || (height >64))
    1144:	82 2f       	mov	r24, r18
    1146:	81 50       	subi	r24, 0x01	; 1
    1148:	80 34       	cpi	r24, 0x40	; 64
    114a:	38 f1       	brcs	.+78     	; 0x119a <bitblt+0x94>
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    114c:	22 23       	and	r18, r18
    114e:	61 f0       	breq	.+24     	; 0x1168 <bitblt+0x62>
    1150:	10 e0       	ldi	r17, 0x00	; 0
			for(column=0;column<width;column++)
    1152:	33 20       	and	r3, r3
    1154:	31 f0       	breq	.+12     	; 0x1162 <bitblt+0x5c>
	int offset, offset2;

	//make sure legal dimensions
	if ((height<1) || (height >64))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    1156:	00 e0       	ldi	r16, 0x00	; 0
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
    1158:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>

	//make sure legal dimensions
	if ((height<1) || (height >64))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
    115c:	0f 5f       	subi	r16, 0xFF	; 255
    115e:	03 15       	cp	r16, r3
    1160:	d8 f3       	brcs	.-10     	; 0x1158 <bitblt+0x52>
	int offset, offset2;

	//make sure legal dimensions
	if ((height<1) || (height >64))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    1162:	1f 5f       	subi	r17, 0xFF	; 255
    1164:	1a 15       	cp	r17, r10
    1166:	a8 f3       	brcs	.-22     	; 0x1152 <bitblt+0x4c>
				if ((mode % 2 == 1) && (mode < 6))
					buffer[column] = ~buffer[column];	//if we wanted an inverted operation, do it
			}//end column loop
		write_block(x,(row+(y/8)),width,buffer);	//write new row to display
	}//row loop
}
    1168:	2e 96       	adiw	r28, 0x0e	; 14
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	bf 90       	pop	r11
    1186:	af 90       	pop	r10
    1188:	9f 90       	pop	r9
    118a:	8f 90       	pop	r8
    118c:	7f 90       	pop	r7
    118e:	6f 90       	pop	r6
    1190:	5f 90       	pop	r5
    1192:	4f 90       	pop	r4
    1194:	3f 90       	pop	r3
    1196:	2f 90       	pop	r2
    1198:	08 95       	ret
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
    119a:	84 2f       	mov	r24, r20
    119c:	81 50       	subi	r24, 0x01	; 1
    119e:	87 fd       	sbrc	r24, 7
    11a0:	69 c1       	rjmp	.+722    	; 0x1474 <bitblt+0x36e>
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
		return;	
	}
	shift = y % 8;				//calculate how much to shift the data bytes to line them up with the pages
    11a2:	86 2f       	mov	r24, r22
    11a4:	87 70       	andi	r24, 0x07	; 7
	shift2 = 8 - shift;
    11a6:	58 e0       	ldi	r21, 0x08	; 8
    11a8:	25 2e       	mov	r2, r21
    11aa:	28 1a       	sub	r2, r24
	n = ((height-1+shift)/8)+1;		//number of pages(rows) the image occupies(need to loop through all of these, each gets pixels changed)
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	c8 2e       	mov	r12, r24
    11b0:	dd 24       	eor	r13, r13
    11b2:	08 94       	sec
    11b4:	c1 08       	sbc	r12, r1
    11b6:	d1 08       	sbc	r13, r1
    11b8:	c6 01       	movw	r24, r12
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	08 94       	sec
    11c0:	c1 1c       	adc	r12, r1
    11c2:	d1 1c       	adc	r13, r1
    11c4:	97 fd       	sbrc	r25, 7
    11c6:	66 c1       	rjmp	.+716    	; 0x1494 <bitblt+0x38e>
    11c8:	95 95       	asr	r25
    11ca:	87 95       	ror	r24
    11cc:	95 95       	asr	r25
    11ce:	87 95       	ror	r24
    11d0:	95 95       	asr	r25
    11d2:	87 95       	ror	r24
    11d4:	48 2f       	mov	r20, r24
    11d6:	4f 5f       	subi	r20, 0xFF	; 255
    11d8:	4c 83       	std	Y+4, r20	; 0x04
	n2 = height/8;				//number of rows in image
    11da:	a6 94       	lsr	r10
    11dc:	a6 94       	lsr	r10
    11de:	a6 94       	lsr	r10
    11e0:	ab 82       	std	Y+3, r10	; 0x03
	if (height % 8 != 0)
    11e2:	c9 01       	movw	r24, r18
    11e4:	87 70       	andi	r24, 0x07	; 7
    11e6:	90 70       	andi	r25, 0x00	; 0
    11e8:	89 2b       	or	r24, r25
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <bitblt+0xec>
		n2++;
    11ec:	8a 2d       	mov	r24, r10
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
    11f0:	8b 83       	std	Y+3, r24	; 0x03
	
	mask1 =	0xFF << shift;			//mask1 needs to have 0's for each pixel in the top row NOT occupied by new image data	
    11f2:	4f ef       	ldi	r20, 0xFF	; 255
    11f4:	50 e0       	ldi	r21, 0x00	; 0
    11f6:	ca 01       	movw	r24, r20
    11f8:	0c 2c       	mov	r0, r12
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <bitblt+0xfa>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <bitblt+0xf6>
    1204:	8e 83       	std	Y+6, r24	; 0x06
	mask2 = 0xFF >> (8-( (height+y) % 8) );	//mask2 needs to have 0's for each pixel in the bottom row NOT occupied by new image data
    1206:	26 0f       	add	r18, r22
    1208:	31 1d       	adc	r19, r1
    120a:	27 70       	andi	r18, 0x07	; 7
    120c:	30 70       	andi	r19, 0x00	; 0
	
	if ( ((height+y) % 8) == 0)
    120e:	21 15       	cp	r18, r1
    1210:	31 05       	cpc	r19, r1
    1212:	09 f0       	breq	.+2      	; 0x1216 <bitblt+0x110>
    1214:	24 c1       	rjmp	.+584    	; 0x145e <bitblt+0x358>
    1216:	9f ef       	ldi	r25, 0xFF	; 255
    1218:	9d 83       	std	Y+5, r25	; 0x05
		mask2=0xff;			//special case of exact fit in last row
		
		offset=0;			//start at the beginning of data
		offset2=-width;			//offset2 points a the previous row
    121a:	83 2d       	mov	r24, r3
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	ee 24       	eor	r14, r14
    1220:	ff 24       	eor	r15, r15
    1222:	e8 1a       	sub	r14, r24
    1224:	f9 0a       	sbc	r15, r25
    1226:	66 95       	lsr	r22
    1228:	66 95       	lsr	r22
    122a:	66 95       	lsr	r22
    122c:	69 83       	std	Y+1, r22	; 0x01
    122e:	1c 86       	std	Y+12, r1	; 0x0c
    1230:	1b 86       	std	Y+11, r1	; 0x0b
    1232:	66 24       	eor	r6, r6
    1234:	77 24       	eor	r7, r7
		//it is necessary to have 2 rows of data, current and previous to do bitblt
		//since 0<width<128 (display is only 128 wide), we can use the second 128 bytes in buffer to hold the previous row

		read_block(x,(row+(y/8)),width,buffer);				//read the row in(background image data)

			for(column=0;column<width;column++)			//loop for columns
    1236:	8b 2c       	mov	r8, r11
    1238:	99 24       	eor	r9, r9
    123a:	a1 e0       	ldi	r26, 0x01	; 1
    123c:	8a 22       	and	r8, r26
    123e:	99 24       	eor	r9, r9
				if (row == 0)		//some special treatment for first and last rows
				{
					//if this is the first row, we need to mask off the blank pixels at the top of the row(these pix have random data)
					temp &= mask1; //mask1 has shift blank pixels starting from LSB (LSB is the top of the stripe) 
				}
				else if (row == (n-1))
    1240:	bc 81       	ldd	r27, Y+4	; 0x04
    1242:	4b 2e       	mov	r4, r27
    1244:	55 24       	eor	r5, r5
    1246:	08 94       	sec
    1248:	41 08       	sbc	r4, r1
    124a:	51 08       	sbc	r5, r1
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
					else if (row == (n-1))
						buffer[column] &= ~mask2;	//last row, clear top bits of background
    124c:	ed 81       	ldd	r30, Y+5	; 0x05
    124e:	e0 95       	com	r30
    1250:	e9 87       	std	Y+9, r30	; 0x09
				 case 6:	//for copy and fill, we don't want the background bits to interfere with the image, so we clear them
				 case 7:
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
    1252:	fe 81       	ldd	r31, Y+6	; 0x06
    1254:	f0 95       	com	r31
    1256:	fa 87       	std	Y+10, r31	; 0x0a
//width is width in pixels
//height is height in pixels
//mode determines how the bits in the image combine with the bits already present on the display 
//mode 0=AND, 1=NAND, 2=OR, 3=NOR, 4=XOR, 5=NXOR, 6=fill(used for block erase, data[0] sets fill byte), 7=copy(overwrites background)
void bitblt(char x, char y, char width, char height, char mode, char* data)
{
    1258:	a6 2c       	mov	r10, r6
    125a:	29 81       	ldd	r18, Y+1	; 0x01
    125c:	26 0d       	add	r18, r6
    125e:	2f 83       	std	Y+7, r18	; 0x07
	{
		//if NULL was passed for data, take it from the serial port. 
		//it is necessary to have 2 rows of data, current and previous to do bitblt
		//since 0<width<128 (display is only 128 wide), we can use the second 128 bytes in buffer to hold the previous row

		read_block(x,(row+(y/8)),width,buffer);				//read the row in(background image data)
    1260:	88 85       	ldd	r24, Y+8	; 0x08
    1262:	62 2f       	mov	r22, r18
    1264:	43 2d       	mov	r20, r3
    1266:	2c e6       	ldi	r18, 0x6C	; 108
    1268:	33 e0       	ldi	r19, 0x03	; 3
    126a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <read_block>

			for(column=0;column<width;column++)			//loop for columns
    126e:	33 20       	and	r3, r3
    1270:	09 f4       	brne	.+2      	; 0x1274 <bitblt+0x16e>
    1272:	e6 c0       	rjmp	.+460    	; 0x1440 <bitblt+0x33a>
    1274:	6c ee       	ldi	r22, 0xEC	; 236
    1276:	73 e0       	ldi	r23, 0x03	; 3
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	20 c0       	rjmp	.+64     	; 0x12be <bitblt+0x1b8>
					temp = ( (data[0] << shift) | (data[0] >> shift2) );				

				if (row == 0)		//some special treatment for first and last rows
				{
					//if this is the first row, we need to mask off the blank pixels at the top of the row(these pix have random data)
					temp &= mask1; //mask1 has shift blank pixels starting from LSB (LSB is the top of the stripe) 
    127e:	be 81       	ldd	r27, Y+6	; 0x06
    1280:	2b 23       	and	r18, r27
					//if this is the last row, we need to maks off the blank pixels at the bottom of the image
					temp &= mask2; //mask2 has blank pixels starting at MSB (MSB is the bottom of the stripe)
				}
								
				//combine image data with background
				switch(mode)	
    1282:	f3 e0       	ldi	r31, 0x03	; 3
    1284:	fb 15       	cp	r31, r11
    1286:	08 f4       	brcc	.+2      	; 0x128a <bitblt+0x184>
    1288:	4e c0       	rjmp	.+156    	; 0x1326 <bitblt+0x220>
    128a:	32 e0       	ldi	r19, 0x02	; 2
    128c:	b3 16       	cp	r11, r19
    128e:	08 f4       	brcc	.+2      	; 0x1292 <bitblt+0x18c>
    1290:	6d c0       	rjmp	.+218    	; 0x136c <bitblt+0x266>
				 case 1:
					buffer[column] &= temp;			//AND it with buffer
				 break;
				 case 2:
				 case 3:
					buffer[column] |= temp;			//OR it with buffer
    1292:	fa 01       	movw	r30, r20
    1294:	e4 59       	subi	r30, 0x94	; 148
    1296:	fc 4f       	sbci	r31, 0xFC	; 252
    1298:	80 81       	ld	r24, Z
    129a:	28 2b       	or	r18, r24
    129c:	20 83       	st	Z, r18
					
					buffer[column] |= temp;			//OR it with buffer
				 break;
				}
			
				if ((mode % 2 == 1) && (mode < 6))
    129e:	81 14       	cp	r8, r1
    12a0:	91 04       	cpc	r9, r1
    12a2:	31 f0       	breq	.+12     	; 0x12b0 <bitblt+0x1aa>
    12a4:	b5 e0       	ldi	r27, 0x05	; 5
    12a6:	bb 15       	cp	r27, r11
    12a8:	18 f0       	brcs	.+6      	; 0x12b0 <bitblt+0x1aa>
					buffer[column] = ~buffer[column];	//if we wanted an inverted operation, do it
    12aa:	80 81       	ld	r24, Z
    12ac:	80 95       	com	r24
    12ae:	80 83       	st	Z, r24
    12b0:	4f 5f       	subi	r20, 0xFF	; 255
    12b2:	5f 4f       	sbci	r21, 0xFF	; 255
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
		//it is necessary to have 2 rows of data, current and previous to do bitblt
		//since 0<width<128 (display is only 128 wide), we can use the second 128 bytes in buffer to hold the previous row

		read_block(x,(row+(y/8)),width,buffer);				//read the row in(background image data)

			for(column=0;column<width;column++)			//loop for columns
    12b8:	43 15       	cp	r20, r3
    12ba:	08 f0       	brcs	.+2      	; 0x12be <bitblt+0x1b8>
    12bc:	c1 c0       	rjmp	.+386    	; 0x1440 <bitblt+0x33a>
			{
				if (data!=NULL)					//decide if data comes from ram or serial			
    12be:	01 15       	cp	r16, r1
    12c0:	11 05       	cpc	r17, r1
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <bitblt+0x1c0>
    12c4:	61 c0       	rjmp	.+194    	; 0x1388 <bitblt+0x282>
					temp = ( (data[offset++] << shift) | (data[offset2++] >> shift2) );	//data from ram
    12c6:	f8 01       	movw	r30, r16
    12c8:	ee 0d       	add	r30, r14
    12ca:	ff 1d       	adc	r31, r15
    12cc:	20 81       	ld	r18, Z
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	02 2c       	mov	r0, r2
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <bitblt+0x1d2>
    12d4:	35 95       	asr	r19
    12d6:	27 95       	ror	r18
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <bitblt+0x1ce>
    12dc:	eb 85       	ldd	r30, Y+11	; 0x0b
    12de:	fc 85       	ldd	r31, Y+12	; 0x0c
    12e0:	e0 0f       	add	r30, r16
    12e2:	f1 1f       	adc	r31, r17
    12e4:	80 81       	ld	r24, Z
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0c 2c       	mov	r0, r12
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <bitblt+0x1ea>
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	0a 94       	dec	r0
    12f2:	e2 f7       	brpl	.-8      	; 0x12ec <bitblt+0x1e6>
    12f4:	28 2b       	or	r18, r24
    12f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	9c 87       	std	Y+12, r25	; 0x0c
    12fe:	8b 87       	std	Y+11, r24	; 0x0b
    1300:	08 94       	sec
    1302:	e1 1c       	adc	r14, r1
    1304:	f1 1c       	adc	r15, r1
					}
					temp = ( (RX_temp << shift) | (buffer[128+column] >> shift2) );
					buffer[128+column] = RX_temp;					//store most recent byte for future use
				}
				
				if (mode==6)		//fill is a special case, just use data[0]
    1306:	f6 e0       	ldi	r31, 0x06	; 6
    1308:	bf 16       	cp	r11, r31
    130a:	f1 f0       	breq	.+60     	; 0x1348 <bitblt+0x242>
					temp = ( (data[0] << shift) | (data[0] >> shift2) );				

				if (row == 0)		//some special treatment for first and last rows
    130c:	aa 20       	and	r10, r10
    130e:	09 f4       	brne	.+2      	; 0x1312 <bitblt+0x20c>
    1310:	b6 cf       	rjmp	.-148    	; 0x127e <bitblt+0x178>
				{
					//if this is the first row, we need to mask off the blank pixels at the top of the row(these pix have random data)
					temp &= mask1; //mask1 has shift blank pixels starting from LSB (LSB is the top of the stripe) 
				}
				else if (row == (n-1))
    1312:	64 14       	cp	r6, r4
    1314:	75 04       	cpc	r7, r5
    1316:	09 f0       	breq	.+2      	; 0x131a <bitblt+0x214>
    1318:	b4 cf       	rjmp	.-152    	; 0x1282 <bitblt+0x17c>
				{
					//if this is the last row, we need to maks off the blank pixels at the bottom of the image
					temp &= mask2; //mask2 has blank pixels starting at MSB (MSB is the bottom of the stripe)
    131a:	ed 81       	ldd	r30, Y+5	; 0x05
    131c:	2e 23       	and	r18, r30
				}
								
				//combine image data with background
				switch(mode)	
    131e:	f3 e0       	ldi	r31, 0x03	; 3
    1320:	fb 15       	cp	r31, r11
    1322:	08 f0       	brcs	.+2      	; 0x1326 <bitblt+0x220>
    1324:	b2 cf       	rjmp	.-156    	; 0x128a <bitblt+0x184>
    1326:	85 e0       	ldi	r24, 0x05	; 5
    1328:	8b 15       	cp	r24, r11
    132a:	38 f5       	brcc	.+78     	; 0x137a <bitblt+0x274>
				 break;
				 case 6:	//for copy and fill, we don't want the background bits to interfere with the image, so we clear them
				 case 7:
				 default:
					
					if (row == 0)
    132c:	aa 20       	and	r10, r10
    132e:	09 f0       	breq	.+2      	; 0x1332 <bitblt+0x22c>
    1330:	77 c0       	rjmp	.+238    	; 0x1420 <bitblt+0x31a>
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
    1332:	fa 01       	movw	r30, r20
    1334:	e4 59       	subi	r30, 0x94	; 148
    1336:	fc 4f       	sbci	r31, 0xFC	; 252
    1338:	80 81       	ld	r24, Z
    133a:	9a 85       	ldd	r25, Y+10	; 0x0a
    133c:	89 23       	and	r24, r25
    133e:	80 83       	st	Z, r24
					else if (row == (n-1))
						buffer[column] &= ~mask2;	//last row, clear top bits of background
					else
						buffer[column] = 0;		//middle row, clear all of the background
					
					buffer[column] |= temp;			//OR it with buffer
    1340:	80 81       	ld	r24, Z
    1342:	28 2b       	or	r18, r24
    1344:	20 83       	st	Z, r18
    1346:	ab cf       	rjmp	.-170    	; 0x129e <bitblt+0x198>
					temp = ( (RX_temp << shift) | (buffer[128+column] >> shift2) );
					buffer[128+column] = RX_temp;					//store most recent byte for future use
				}
				
				if (mode==6)		//fill is a special case, just use data[0]
					temp = ( (data[0] << shift) | (data[0] >> shift2) );				
    1348:	d8 01       	movw	r26, r16
    134a:	8c 91       	ld	r24, X
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c 01       	movw	r18, r24
    1350:	02 2c       	mov	r0, r2
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <bitblt+0x252>
    1354:	35 95       	asr	r19
    1356:	27 95       	ror	r18
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <bitblt+0x24e>
    135c:	0c 2c       	mov	r0, r12
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <bitblt+0x25e>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <bitblt+0x25a>
    1368:	28 2b       	or	r18, r24
    136a:	d0 cf       	rjmp	.-96     	; 0x130c <bitblt+0x206>
				//combine image data with background
				switch(mode)	
				{
				 case 0:
				 case 1:
					buffer[column] &= temp;			//AND it with buffer
    136c:	fa 01       	movw	r30, r20
    136e:	e4 59       	subi	r30, 0x94	; 148
    1370:	fc 4f       	sbci	r31, 0xFC	; 252
    1372:	80 81       	ld	r24, Z
    1374:	28 23       	and	r18, r24
    1376:	20 83       	st	Z, r18
    1378:	92 cf       	rjmp	.-220    	; 0x129e <bitblt+0x198>
				 case 3:
					buffer[column] |= temp;			//OR it with buffer
				 break;
				 case 4:
				 case 5:
					buffer[column] ^= temp;			//XOR it with buffer
    137a:	fa 01       	movw	r30, r20
    137c:	e4 59       	subi	r30, 0x94	; 148
    137e:	fc 4f       	sbci	r31, 0xFC	; 252
    1380:	80 81       	ld	r24, Z
    1382:	28 27       	eor	r18, r24
    1384:	20 83       	st	Z, r18
    1386:	8b cf       	rjmp	.-234    	; 0x129e <bitblt+0x198>
			{
				if (data!=NULL)					//decide if data comes from ram or serial			
					temp = ( (data[offset++] << shift) | (data[offset2++] >> shift2) );	//data from ram
				else
				{	
					if (row<n2)					//only read the number of rows in the image
    1388:	9b 81       	ldd	r25, Y+3	; 0x03
    138a:	a9 16       	cp	r10, r25
    138c:	a8 f0       	brcs	.+42     	; 0x13b8 <bitblt+0x2b2>
							{
								put_char(XON);	//resume reception
								RX_pause=0;	//flag it
							}	
					}
					temp = ( (RX_temp << shift) | (buffer[128+column] >> shift2) );
    138e:	fa 81       	ldd	r31, Y+2	; 0x02
    1390:	2f 2f       	mov	r18, r31
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	0c 2c       	mov	r0, r12
    1396:	02 c0       	rjmp	.+4      	; 0x139c <bitblt+0x296>
    1398:	22 0f       	add	r18, r18
    139a:	33 1f       	adc	r19, r19
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <bitblt+0x292>
    13a0:	db 01       	movw	r26, r22
    13a2:	8c 91       	ld	r24, X
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2c       	mov	r0, r2
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <bitblt+0x2a8>
    13aa:	95 95       	asr	r25
    13ac:	87 95       	ror	r24
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <bitblt+0x2a4>
    13b2:	28 2b       	or	r18, r24
					buffer[128+column] = RX_temp;					//store most recent byte for future use
    13b4:	fc 93       	st	X, r31
    13b6:	a7 cf       	rjmp	.-178    	; 0x1306 <bitblt+0x200>
				else
				{	
					if (row<n2)					//only read the number of rows in the image
					{
						//we want bitblt to be fast, so inline RX_get_byte code to avoid the overhead of a function call
						while(RX_bytes==0);							//wait for data to be available
    13b8:	80 91 53 02 	lds	r24, 0x0253
    13bc:	88 23       	and	r24, r24
    13be:	e1 f3       	breq	.-8      	; 0x13b8 <bitblt+0x2b2>
						RX_temp = RX_array[RX_read++];				//get char from buffer and increment read pointer
    13c0:	80 91 51 02 	lds	r24, 0x0251
    13c4:	90 91 52 02 	lds	r25, 0x0252
    13c8:	dc 01       	movw	r26, r24
    13ca:	a5 59       	subi	r26, 0x95	; 149
    13cc:	bd 4f       	sbci	r27, 0xFD	; 253
    13ce:	bc 91       	ld	r27, X
    13d0:	ba 83       	std	Y+2, r27	; 0x02
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	90 93 52 02 	sts	0x0252, r25
    13d8:	80 93 51 02 	sts	0x0251, r24
						if(RX_read >= RX_BUFFER_SIZE) RX_read = 0;	//if the read pointer reaches the end of the buffer, wrap back to the beginning
    13dc:	8f 3f       	cpi	r24, 0xFF	; 255
    13de:	91 05       	cpc	r25, r1
    13e0:	29 f0       	breq	.+10     	; 0x13ec <bitblt+0x2e6>
    13e2:	20 f0       	brcs	.+8      	; 0x13ec <bitblt+0x2e6>
    13e4:	10 92 52 02 	sts	0x0252, r1
    13e8:	10 92 51 02 	sts	0x0251, r1
						cli();										//interrupts must be disabled when changing RX_bytes, since it can be chabged here and in the ISR
    13ec:	f8 94       	cli
						RX_bytes--;
    13ee:	80 91 53 02 	lds	r24, 0x0253
    13f2:	81 50       	subi	r24, 0x01	; 1
    13f4:	80 93 53 02 	sts	0x0253, r24
						sei();
    13f8:	78 94       	sei
						//check to see if we need to re-enable reception 

						if (RX_pause==1)		//if USART reception is suspended
    13fa:	80 91 54 02 	lds	r24, 0x0254
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	31 f6       	brne	.-116    	; 0x138e <bitblt+0x288>
							if (RX_bytes < (unsigned char)(RX_BUFFER_SIZE *.25) )		//if RX_buffer is suitably empty
    1402:	80 91 53 02 	lds	r24, 0x0253
    1406:	80 34       	cpi	r24, 0x40	; 64
    1408:	08 f0       	brcs	.+2      	; 0x140c <bitblt+0x306>
    140a:	c1 cf       	rjmp	.-126    	; 0x138e <bitblt+0x288>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    140c:	80 91 c0 00 	lds	r24, 0x00C0
    1410:	85 ff       	sbrs	r24, 5
    1412:	fc cf       	rjmp	.-8      	; 0x140c <bitblt+0x306>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    1414:	e1 e1       	ldi	r30, 0x11	; 17
    1416:	e0 93 c6 00 	sts	0x00C6, r30

						if (RX_pause==1)		//if USART reception is suspended
							if (RX_bytes < (unsigned char)(RX_BUFFER_SIZE *.25) )		//if RX_buffer is suitably empty
							{
								put_char(XON);	//resume reception
								RX_pause=0;	//flag it
    141a:	10 92 54 02 	sts	0x0254, r1
    141e:	b7 cf       	rjmp	.-146    	; 0x138e <bitblt+0x288>
				 case 7:
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
					else if (row == (n-1))
    1420:	64 14       	cp	r6, r4
    1422:	75 04       	cpc	r7, r5
    1424:	29 f0       	breq	.+10     	; 0x1430 <bitblt+0x32a>
						buffer[column] &= ~mask2;	//last row, clear top bits of background
					else
						buffer[column] = 0;		//middle row, clear all of the background
    1426:	fa 01       	movw	r30, r20
    1428:	e4 59       	subi	r30, 0x94	; 148
    142a:	fc 4f       	sbci	r31, 0xFC	; 252
    142c:	10 82       	st	Z, r1
    142e:	88 cf       	rjmp	.-240    	; 0x1340 <bitblt+0x23a>
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
					else if (row == (n-1))
						buffer[column] &= ~mask2;	//last row, clear top bits of background
    1430:	fa 01       	movw	r30, r20
    1432:	e4 59       	subi	r30, 0x94	; 148
    1434:	fc 4f       	sbci	r31, 0xFC	; 252
    1436:	80 81       	ld	r24, Z
    1438:	a9 85       	ldd	r26, Y+9	; 0x09
    143a:	8a 23       	and	r24, r26
    143c:	80 83       	st	Z, r24
    143e:	80 cf       	rjmp	.-256    	; 0x1340 <bitblt+0x23a>
				}
			
				if ((mode % 2 == 1) && (mode < 6))
					buffer[column] = ~buffer[column];	//if we wanted an inverted operation, do it
			}//end column loop
		write_block(x,(row+(y/8)),width,buffer);	//write new row to display
    1440:	88 85       	ldd	r24, Y+8	; 0x08
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	43 2d       	mov	r20, r3
    1446:	2c e6       	ldi	r18, 0x6C	; 108
    1448:	33 e0       	ldi	r19, 0x03	; 3
    144a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <write_block>
    144e:	08 94       	sec
    1450:	61 1c       	adc	r6, r1
    1452:	71 1c       	adc	r7, r1
		mask2=0xff;			//special case of exact fit in last row
		
		offset=0;			//start at the beginning of data
		offset2=-width;			//offset2 points a the previous row

	for(row = 0;row < n;row++)		//loop through all rows
    1454:	ec 81       	ldd	r30, Y+4	; 0x04
    1456:	6e 16       	cp	r6, r30
    1458:	08 f4       	brcc	.+2      	; 0x145c <bitblt+0x356>
    145a:	fe ce       	rjmp	.-516    	; 0x1258 <bitblt+0x152>
    145c:	85 ce       	rjmp	.-758    	; 0x1168 <bitblt+0x62>
	n2 = height/8;				//number of rows in image
	if (height % 8 != 0)
		n2++;
	
	mask1 =	0xFF << shift;			//mask1 needs to have 0's for each pixel in the top row NOT occupied by new image data	
	mask2 = 0xFF >> (8-( (height+y) % 8) );	//mask2 needs to have 0's for each pixel in the bottom row NOT occupied by new image data
    145e:	88 e0       	ldi	r24, 0x08	; 8
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	82 1b       	sub	r24, r18
    1464:	93 0b       	sbc	r25, r19
    1466:	02 c0       	rjmp	.+4      	; 0x146c <bitblt+0x366>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <bitblt+0x362>
    1470:	4d 83       	std	Y+5, r20	; 0x05
    1472:	d3 ce       	rjmp	.-602    	; 0x121a <bitblt+0x114>
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    1474:	22 23       	and	r18, r18
    1476:	09 f4       	brne	.+2      	; 0x147a <bitblt+0x374>
    1478:	77 ce       	rjmp	.-786    	; 0x1168 <bitblt+0x62>
    147a:	00 e0       	ldi	r16, 0x00	; 0
			for(column=0;column<width;column++)
    147c:	33 20       	and	r3, r3
    147e:	31 f0       	breq	.+12     	; 0x148c <bitblt+0x386>
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    1480:	10 e0       	ldi	r17, 0x00	; 0
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
    1482:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
    1486:	1f 5f       	subi	r17, 0xFF	; 255
    1488:	13 15       	cp	r17, r3
    148a:	d8 f3       	brcs	.-10     	; 0x1482 <bitblt+0x37c>
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    148c:	0f 5f       	subi	r16, 0xFF	; 255
    148e:	0a 15       	cp	r16, r10
    1490:	a8 f3       	brcs	.-22     	; 0x147c <bitblt+0x376>
    1492:	6a ce       	rjmp	.-812    	; 0x1168 <bitblt+0x62>
				RX_get_byte();			//read it, but do nothing
		return;	
	}
	shift = y % 8;				//calculate how much to shift the data bytes to line them up with the pages
	shift2 = 8 - shift;
	n = ((height-1+shift)/8)+1;		//number of pages(rows) the image occupies(need to loop through all of these, each gets pixels changed)
    1494:	07 96       	adiw	r24, 0x07	; 7
    1496:	98 ce       	rjmp	.-720    	; 0x11c8 <bitblt+0xc2>

00001498 <print_char>:


//prints a character to the screen
//at x_offset, y_offset(top/left corner of character). Automatically augments offsets for next write
void print_char(char txt)
{
    1498:	ef 92       	push	r14
    149a:	ff 92       	push	r15
    149c:	0f 93       	push	r16
    // x_offset counts pixels from the left side of the screen
    // y_offset counts pixels from the top of the screen

    short text_array_offset, j;
    char k;
	text_array_offset = (txt - 32) * font_bytes+3;	// txt-32 is the ascii offset to 'space', font_bytes is the # of bytes/character, and 3 for font width,height,space which are stores at the beginning of the array
    149e:	90 91 69 02 	lds	r25, 0x0269
    14a2:	49 2f       	mov	r20, r25
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	80 97       	sbiw	r24, 0x20	; 32
    14aa:	84 9f       	mul	r24, r20
    14ac:	90 01       	movw	r18, r0
    14ae:	85 9f       	mul	r24, r21
    14b0:	30 0d       	add	r19, r0
    14b2:	94 9f       	mul	r25, r20
    14b4:	30 0d       	add	r19, r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2d 5f       	subi	r18, 0xFD	; 253
    14ba:	3f 4f       	sbci	r19, 0xFF	; 255

	//get data for character
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
    14bc:	80 91 59 02 	lds	r24, 0x0259
    14c0:	88 23       	and	r24, r24
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <print_char+0x2e>
    14c4:	64 c0       	rjmp	.+200    	; 0x158e <print_char+0xf6>
	{
		if (reverse == 1)
    14c6:	80 91 55 02 	lds	r24, 0x0255
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <print_char+0x38>
    14ce:	a3 c0       	rjmp	.+326    	; 0x1616 <print_char+0x17e>
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    14d0:	c9 01       	movw	r24, r18
    14d2:	84 0f       	add	r24, r20
    14d4:	95 1f       	adc	r25, r21
    14d6:	28 17       	cp	r18, r24
    14d8:	39 07       	cpc	r19, r25
    14da:	9c f4       	brge	.+38     	; 0x1502 <print_char+0x6a>
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
	{
		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    14dc:	24 55       	subi	r18, 0x54	; 84
    14de:	3f 4f       	sbci	r19, 0xFF	; 255
    14e0:	40 e8       	ldi	r20, 0x80	; 128
    14e2:	bc 01       	movw	r22, r24
    14e4:	64 55       	subi	r22, 0x54	; 84
    14e6:	7f 4f       	sbci	r23, 0xFF	; 255
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = pgm_read_byte(&text_array[j]);
    14e8:	f9 01       	movw	r30, r18
    14ea:	84 91       	lpm	r24, Z+
    14ec:	e4 2f       	mov	r30, r20
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	e4 59       	subi	r30, 0x94	; 148
    14f2:	fc 4f       	sbci	r31, 0xFC	; 252
    14f4:	80 83       	st	Z, r24
    14f6:	4f 5f       	subi	r20, 0xFF	; 255
    14f8:	2f 5f       	subi	r18, 0xFF	; 255
    14fa:	3f 4f       	sbci	r19, 0xFF	; 255
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    14fc:	26 17       	cp	r18, r22
    14fe:	37 07       	cpc	r19, r23
    1500:	99 f7       	brne	.-26     	; 0x14e8 <print_char+0x50>
				buffer[k++] = pgm_read_byte(&aux_text_array[j]);
		}
	}
	//bitblt it
	
	bitblt(x_offset, y_offset, font_w, font_h, font_mode, buffer+128);
    1502:	80 91 57 02 	lds	r24, 0x0257
    1506:	60 91 58 02 	lds	r22, 0x0258
    150a:	40 91 6b 03 	lds	r20, 0x036B
    150e:	20 91 6a 02 	lds	r18, 0x026A
    1512:	00 91 4e 02 	lds	r16, 0x024E
    1516:	7c ee       	ldi	r23, 0xEC	; 236
    1518:	e7 2e       	mov	r14, r23
    151a:	73 e0       	ldi	r23, 0x03	; 3
    151c:	f7 2e       	mov	r15, r23
    151e:	0e 94 83 08 	call	0x1106	; 0x1106 <bitblt>
	
	x_offset+=font_w+font_space;
    1522:	20 91 6b 03 	lds	r18, 0x036B
    1526:	30 91 6c 04 	lds	r19, 0x046C
    152a:	83 2f       	mov	r24, r19
    152c:	82 0f       	add	r24, r18
    152e:	90 91 57 02 	lds	r25, 0x0257
    1532:	89 0f       	add	r24, r25
    1534:	80 93 57 02 	sts	0x0257, r24
	
//check x offset and do necessary wrapping
	
    if ((x_offset + font_w + font_space) > 127)
    1538:	48 2f       	mov	r20, r24
    153a:	50 e0       	ldi	r21, 0x00	; 0
    153c:	62 2f       	mov	r22, r18
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	63 0f       	add	r22, r19
    1542:	71 1d       	adc	r23, r1
    1544:	ca 01       	movw	r24, r20
    1546:	86 0f       	add	r24, r22
    1548:	97 1f       	adc	r25, r23
    154a:	80 38       	cpi	r24, 0x80	; 128
    154c:	91 05       	cpc	r25, r1
    154e:	dc f0       	brlt	.+54     	; 0x1586 <print_char+0xee>
	{
		x_offset = x_offset % (font_w+font_space);	//this makes sure text on the next line will line up with the previous line
    1550:	ca 01       	movw	r24, r20
    1552:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__divmodhi4>
    1556:	80 93 57 02 	sts	0x0257, r24
		if (y_offset > (64-font_h-font_h))
    155a:	70 91 58 02 	lds	r23, 0x0258
    155e:	60 91 6a 02 	lds	r22, 0x026A
    1562:	86 2f       	mov	r24, r22
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	47 2f       	mov	r20, r23
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	22 27       	eor	r18, r18
    156c:	33 27       	eor	r19, r19
    156e:	28 1b       	sub	r18, r24
    1570:	39 0b       	sbc	r19, r25
    1572:	28 1b       	sub	r18, r24
    1574:	39 0b       	sbc	r19, r25
    1576:	20 5c       	subi	r18, 0xC0	; 192
    1578:	3f 4f       	sbci	r19, 0xFF	; 255
    157a:	24 17       	cp	r18, r20
    157c:	35 07       	cpc	r19, r21
    157e:	34 f1       	brlt	.+76     	; 0x15cc <print_char+0x134>
			y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
		else 
			y_offset += font_h;
    1580:	67 0f       	add	r22, r23
    1582:	60 93 58 02 	sts	0x0258, r22
	}
}
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	08 95       	ret
		}
	}
	else	//using aux font
	{

		if (reverse == 1)
    158e:	80 91 55 02 	lds	r24, 0x0255
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	21 f1       	breq	.+72     	; 0x15de <print_char+0x146>
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    1596:	c9 01       	movw	r24, r18
    1598:	84 0f       	add	r24, r20
    159a:	95 1f       	adc	r25, r21
    159c:	28 17       	cp	r18, r24
    159e:	39 07       	cpc	r19, r25
    15a0:	0c f0       	brlt	.+2      	; 0x15a4 <print_char+0x10c>
    15a2:	af cf       	rjmp	.-162    	; 0x1502 <print_char+0x6a>
	else	//using aux font
	{

		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    15a4:	26 57       	subi	r18, 0x76	; 118
    15a6:	3d 4f       	sbci	r19, 0xFD	; 253
    15a8:	40 e8       	ldi	r20, 0x80	; 128
    15aa:	bc 01       	movw	r22, r24
    15ac:	66 57       	subi	r22, 0x76	; 118
    15ae:	7d 4f       	sbci	r23, 0xFD	; 253
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = pgm_read_byte(&aux_text_array[j]);
    15b0:	f9 01       	movw	r30, r18
    15b2:	84 91       	lpm	r24, Z+
    15b4:	e4 2f       	mov	r30, r20
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	e4 59       	subi	r30, 0x94	; 148
    15ba:	fc 4f       	sbci	r31, 0xFC	; 252
    15bc:	80 83       	st	Z, r24
    15be:	4f 5f       	subi	r20, 0xFF	; 255
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    15c4:	26 17       	cp	r18, r22
    15c6:	37 07       	cpc	r19, r23
    15c8:	99 f7       	brne	.-26     	; 0x15b0 <print_char+0x118>
    15ca:	9b cf       	rjmp	.-202    	; 0x1502 <print_char+0x6a>
	
    if ((x_offset + font_w + font_space) > 127)
	{
		x_offset = x_offset % (font_w+font_space);	//this makes sure text on the next line will line up with the previous line
		if (y_offset > (64-font_h-font_h))
			y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
    15cc:	87 2f       	mov	r24, r23
    15ce:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodqi4>
    15d2:	90 93 58 02 	sts	0x0258, r25
		else 
			y_offset += font_h;
	}
}
    15d6:	0f 91       	pop	r16
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	08 95       	ret
	else	//using aux font
	{

		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    15de:	c9 01       	movw	r24, r18
    15e0:	84 0f       	add	r24, r20
    15e2:	95 1f       	adc	r25, r21
    15e4:	28 17       	cp	r18, r24
    15e6:	39 07       	cpc	r19, r25
    15e8:	0c f0       	brlt	.+2      	; 0x15ec <print_char+0x154>
    15ea:	8b cf       	rjmp	.-234    	; 0x1502 <print_char+0x6a>
    15ec:	26 57       	subi	r18, 0x76	; 118
    15ee:	3d 4f       	sbci	r19, 0xFD	; 253
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	bc 01       	movw	r22, r24
    15f4:	66 57       	subi	r22, 0x76	; 118
    15f6:	7d 4f       	sbci	r23, 0xFD	; 253
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
    15f8:	f9 01       	movw	r30, r18
    15fa:	84 91       	lpm	r24, Z+
    15fc:	e4 2f       	mov	r30, r20
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	e4 59       	subi	r30, 0x94	; 148
    1602:	fc 4f       	sbci	r31, 0xFC	; 252
    1604:	80 95       	com	r24
    1606:	80 83       	st	Z, r24
    1608:	4f 5f       	subi	r20, 0xFF	; 255
    160a:	2f 5f       	subi	r18, 0xFF	; 255
    160c:	3f 4f       	sbci	r19, 0xFF	; 255
	else	//using aux font
	{

		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    160e:	26 17       	cp	r18, r22
    1610:	37 07       	cpc	r19, r23
    1612:	91 f7       	brne	.-28     	; 0x15f8 <print_char+0x160>
    1614:	76 cf       	rjmp	.-276    	; 0x1502 <print_char+0x6a>
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
	{
		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    1616:	c9 01       	movw	r24, r18
    1618:	84 0f       	add	r24, r20
    161a:	95 1f       	adc	r25, r21
    161c:	28 17       	cp	r18, r24
    161e:	39 07       	cpc	r19, r25
    1620:	0c f0       	brlt	.+2      	; 0x1624 <print_char+0x18c>
    1622:	6f cf       	rjmp	.-290    	; 0x1502 <print_char+0x6a>
    1624:	24 55       	subi	r18, 0x54	; 84
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	40 e8       	ldi	r20, 0x80	; 128
    162a:	bc 01       	movw	r22, r24
    162c:	64 55       	subi	r22, 0x54	; 84
    162e:	7f 4f       	sbci	r23, 0xFF	; 255
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
    1630:	f9 01       	movw	r30, r18
    1632:	84 91       	lpm	r24, Z+
    1634:	e4 2f       	mov	r30, r20
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	e4 59       	subi	r30, 0x94	; 148
    163a:	fc 4f       	sbci	r31, 0xFC	; 252
    163c:	80 95       	com	r24
    163e:	80 83       	st	Z, r24
    1640:	4f 5f       	subi	r20, 0xFF	; 255
    1642:	2f 5f       	subi	r18, 0xFF	; 255
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
	{
		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    1646:	26 17       	cp	r18, r22
    1648:	37 07       	cpc	r19, r23
    164a:	91 f7       	brne	.-28     	; 0x1630 <print_char+0x198>
    164c:	5a cf       	rjmp	.-332    	; 0x1502 <print_char+0x6a>

0000164e <read_byte>:
        }
}


char read_byte(char byte, char side)
{
    164e:	1f 93       	push	r17
    1650:	16 2f       	mov	r17, r22
	set_x(byte);
    1652:	80 64       	ori	r24, 0x40	; 64
    1654:	60 e0       	ldi	r22, 0x00	; 0
    1656:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
	return read_data_LCD(side);
    165a:	81 2f       	mov	r24, r17
    165c:	0e 94 29 07 	call	0xe52	; 0xe52 <read_data_LCD>
}
    1660:	1f 91       	pop	r17
    1662:	08 95       	ret

00001664 <pixel>:
	}//row loop
}

//mapping to Cartesian coordinates, (0,0) is in the lower left corner, (127,63) is in the upper right
void pixel(char S_R, char x, char y)
{
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	f8 2e       	mov	r15, r24
	static char temp_page, temp_side, temp_x = 0, temp_data1 = 0, temp_data2 = 0;
	
	//don't try to print something outside of our range
	if (x > 127) return;
    166e:	67 fd       	sbrc	r22, 7
    1670:	52 c0       	rjmp	.+164    	; 0x1716 <pixel+0xb2>
	if (y > 63) return;
    1672:	40 34       	cpi	r20, 0x40	; 64
    1674:	08 f0       	brcs	.+2      	; 0x1678 <pixel+0x14>
    1676:	4f c0       	rjmp	.+158    	; 0x1716 <pixel+0xb2>
	
	y=63-y;	
    1678:	5f e3       	ldi	r21, 0x3F	; 63
    167a:	54 1b       	sub	r21, r20

	if (reverse == 1) S_R ^= 1;
    167c:	80 91 55 02 	lds	r24, 0x0255
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	09 f4       	brne	.+2      	; 0x1686 <pixel+0x22>
    1684:	58 c0       	rjmp	.+176    	; 0x1736 <pixel+0xd2>
	
	if (x >= 64) temp_side = 2, temp_x = x - 64;
    1686:	60 34       	cpi	r22, 0x40	; 64
    1688:	08 f0       	brcs	.+2      	; 0x168c <pixel+0x28>
    168a:	4a c0       	rjmp	.+148    	; 0x1720 <pixel+0xbc>
	else temp_side = 1, temp_x = x;
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	80 93 65 02 	sts	0x0265, r24
    1692:	60 93 64 02 	sts	0x0264, r22
		
	temp_page = 7 - (y >> 3);
    1696:	95 2f       	mov	r25, r21
    1698:	96 95       	lsr	r25
    169a:	96 95       	lsr	r25
    169c:	96 95       	lsr	r25
    169e:	87 e0       	ldi	r24, 0x07	; 7
    16a0:	89 1b       	sub	r24, r25
    16a2:	80 93 66 02 	sts	0x0266, r24
		
	//data = (1 << (y - ((7 - temp_page) * 8)));
	temp_data1 = (1 << (7 - (y - ((7 - temp_page) * 8))));
    16a6:	27 e0       	ldi	r18, 0x07	; 7
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	b9 01       	movw	r22, r18
    16ac:	65 1b       	sub	r22, r21
    16ae:	71 09       	sbc	r23, r1
    16b0:	ab 01       	movw	r20, r22
    16b2:	28 1b       	sub	r18, r24
    16b4:	31 09       	sbc	r19, r1
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	22 0f       	add	r18, r18
    16bc:	33 1f       	adc	r19, r19
    16be:	22 0f       	add	r18, r18
    16c0:	33 1f       	adc	r19, r19
    16c2:	42 0f       	add	r20, r18
    16c4:	53 1f       	adc	r21, r19
    16c6:	21 e0       	ldi	r18, 0x01	; 1
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <pixel+0x6c>
    16cc:	22 0f       	add	r18, r18
    16ce:	33 1f       	adc	r19, r19
    16d0:	4a 95       	dec	r20
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <pixel+0x68>
    16d4:	12 2f       	mov	r17, r18
    16d6:	20 93 63 02 	sts	0x0263, r18
		
	set_page(temp_page);
    16da:	88 6b       	ori	r24, 0xB8	; 184
    16dc:	60 e0       	ldi	r22, 0x00	; 0
    16de:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
				
	//need to read the existing byte here, then or it with the new byte
	temp_data2 = read_byte(temp_x, temp_side);
    16e2:	00 91 64 02 	lds	r16, 0x0264
    16e6:	e0 90 65 02 	lds	r14, 0x0265
    16ea:	80 2f       	mov	r24, r16
    16ec:	6e 2d       	mov	r22, r14
    16ee:	0e 94 27 0b 	call	0x164e	; 0x164e <read_byte>
    16f2:	80 93 62 02 	sts	0x0262, r24
		
	if (S_R == 0)
    16f6:	ff 20       	and	r15, r15
    16f8:	d1 f4       	brne	.+52     	; 0x172e <pixel+0xca>
	{
		temp_data1 = ~temp_data1;
    16fa:	10 95       	com	r17
		temp_data1 &= temp_data2;
    16fc:	18 23       	and	r17, r24
    16fe:	10 93 63 02 	sts	0x0263, r17
	}
	else temp_data1 |= temp_data2;
		
	set_x(temp_x);//reset this...
    1702:	80 2f       	mov	r24, r16
    1704:	80 64       	ori	r24, 0x40	; 64
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
	write_data_LCD(temp_data1, temp_side);
    170c:	80 91 63 02 	lds	r24, 0x0263
    1710:	6e 2d       	mov	r22, r14
    1712:	0e 94 45 06 	call	0xc8a	; 0xc8a <write_data_LCD>
}
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	ef 90       	pop	r14
    171e:	08 95       	ret
	
	y=63-y;	

	if (reverse == 1) S_R ^= 1;
	
	if (x >= 64) temp_side = 2, temp_x = x - 64;
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	80 93 65 02 	sts	0x0265, r24
    1726:	60 54       	subi	r22, 0x40	; 64
    1728:	60 93 64 02 	sts	0x0264, r22
    172c:	b4 cf       	rjmp	.-152    	; 0x1696 <pixel+0x32>
	if (S_R == 0)
	{
		temp_data1 = ~temp_data1;
		temp_data1 &= temp_data2;
	}
	else temp_data1 |= temp_data2;
    172e:	18 2b       	or	r17, r24
    1730:	10 93 63 02 	sts	0x0263, r17
    1734:	e6 cf       	rjmp	.-52     	; 0x1702 <pixel+0x9e>
	if (x > 127) return;
	if (y > 63) return;
	
	y=63-y;	

	if (reverse == 1) S_R ^= 1;
    1736:	f8 26       	eor	r15, r24
    1738:	a6 cf       	rjmp	.-180    	; 0x1686 <pixel+0x22>

0000173a <line>:
}


//draws (S_R = 1) or erases (S_R = 0) a line from x0, y0 to x1, y1 using Bresenham's line algorithm.
void line(char S_R, char x0, char y0, char x1, char y1)
{
    173a:	4f 92       	push	r4
    173c:	5f 92       	push	r5
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	48 2e       	mov	r4, r24
    175c:	a4 2f       	mov	r26, r20
    175e:	72 2f       	mov	r23, r18
	
	unsigned char steep;
	unsigned char swp;

    steep = (abs(y1 - y0) > abs(x1 - x0));
    1760:	40 2f       	mov	r20, r16
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	ea 2f       	mov	r30, r26
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	e2 2e       	mov	r14, r18
    176a:	ff 24       	eor	r15, r15
    176c:	a6 2e       	mov	r10, r22
    176e:	bb 24       	eor	r11, r11
    1770:	55 24       	eor	r5, r5
    1772:	9a 01       	movw	r18, r20
    1774:	2e 1b       	sub	r18, r30
    1776:	3f 0b       	sbc	r19, r31
    1778:	37 fd       	sbrc	r19, 7
    177a:	80 c0       	rjmp	.+256    	; 0x187c <line+0x142>
    177c:	c7 01       	movw	r24, r14
    177e:	8a 19       	sub	r24, r10
    1780:	9b 09       	sbc	r25, r11
    1782:	97 fd       	sbrc	r25, 7
    1784:	83 c0       	rjmp	.+262    	; 0x188c <line+0x152>
    1786:	82 17       	cp	r24, r18
    1788:	93 07       	cpc	r25, r19
    178a:	74 f4       	brge	.+28     	; 0x17a8 <line+0x6e>
    178c:	55 24       	eor	r5, r5
    178e:	53 94       	inc	r5
    if (steep) 
    1790:	8a 2f       	mov	r24, r26
    1792:	a6 2f       	mov	r26, r22
    1794:	68 2f       	mov	r22, r24
    1796:	80 2f       	mov	r24, r16
    1798:	07 2f       	mov	r16, r23
    179a:	78 2f       	mov	r23, r24
    179c:	cf 01       	movw	r24, r30
    179e:	f5 01       	movw	r30, r10
    17a0:	5c 01       	movw	r10, r24
    17a2:	ca 01       	movw	r24, r20
    17a4:	a7 01       	movw	r20, r14
    17a6:	7c 01       	movw	r14, r24
		swp=x1;
		x1=y1;
		y1=swp;
	}

    if (x0 > x1) 
    17a8:	76 17       	cp	r23, r22
    17aa:	08 f4       	brcc	.+2      	; 0x17ae <line+0x74>
    17ac:	54 c0       	rjmp	.+168    	; 0x1856 <line+0x11c>
    17ae:	c7 01       	movw	r24, r14
    17b0:	75 01       	movw	r14, r10
    17b2:	5c 01       	movw	r10, r24
    17b4:	ca 01       	movw	r24, r20
    17b6:	af 01       	movw	r20, r30
    17b8:	fc 01       	movw	r30, r24
		y0=y1;
		y1=swp;
	}

	int deltax = x1 - x0;
	int deltay = abs(y1 - y0);
    17ba:	6f 01       	movw	r12, r30
    17bc:	c4 1a       	sub	r12, r20
    17be:	d5 0a       	sbc	r13, r21
    17c0:	d7 fc       	sbrc	r13, 7
    17c2:	51 c0       	rjmp	.+162    	; 0x1866 <line+0x12c>
	int error = deltax / 2;
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
    17c4:	a0 17       	cp	r26, r16
    17c6:	08 f4       	brcc	.+2      	; 0x17ca <line+0x90>
    17c8:	55 c0       	rjmp	.+170    	; 0x1874 <line+0x13a>
    17ca:	66 24       	eor	r6, r6
    17cc:	6a 94       	dec	r6
    17ce:	76 2c       	mov	r7, r6
        for (x = x0; x <= x1; ++x)
    17d0:	ae 14       	cp	r10, r14
    17d2:	bf 04       	cpc	r11, r15
    17d4:	7c f1       	brlt	.+94     	; 0x1834 <line+0xfa>
		swp=y0;
		y0=y1;
		y1=swp;
	}

	int deltax = x1 - x0;
    17d6:	45 01       	movw	r8, r10
    17d8:	8e 18       	sub	r8, r14
    17da:	9f 08       	sbc	r9, r15
	int deltay = abs(y1 - y0);
	int error = deltax / 2;
    17dc:	c4 01       	movw	r24, r8
    17de:	97 fc       	sbrc	r9, 7
    17e0:	59 c0       	rjmp	.+178    	; 0x1894 <line+0x15a>
    17e2:	ec 01       	movw	r28, r24
    17e4:	d5 95       	asr	r29
    17e6:	c7 95       	ror	r28
    17e8:	8a 01       	movw	r16, r20
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <line+0xd0>
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
        for (x = x0; x <= x1; ++x)
	{
            if (steep) pixel(S_R,y,x); else pixel(S_R,x,y);
    17ec:	84 2d       	mov	r24, r4
    17ee:	60 2f       	mov	r22, r16
    17f0:	4e 2d       	mov	r20, r14
    17f2:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>

            error = error - deltay;
    17f6:	cc 19       	sub	r28, r12
    17f8:	dd 09       	sbc	r29, r13
		if (error < 0) 
    17fa:	d7 fd       	sbrc	r29, 7
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <line+0xe6>
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
        for (x = x0; x <= x1; ++x)
    17fe:	08 94       	sec
    1800:	e1 1c       	adc	r14, r1
    1802:	f1 1c       	adc	r15, r1
    1804:	ae 14       	cp	r10, r14
    1806:	bf 04       	cpc	r11, r15
    1808:	ac f0       	brlt	.+42     	; 0x1834 <line+0xfa>
	{
            if (steep) pixel(S_R,y,x); else pixel(S_R,x,y);
    180a:	55 20       	and	r5, r5
    180c:	79 f7       	brne	.-34     	; 0x17ec <line+0xb2>
    180e:	84 2d       	mov	r24, r4
    1810:	6e 2d       	mov	r22, r14
    1812:	40 2f       	mov	r20, r16
    1814:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>

            error = error - deltay;
    1818:	cc 19       	sub	r28, r12
    181a:	dd 09       	sbc	r29, r13
		if (error < 0) 
    181c:	d7 ff       	sbrs	r29, 7
    181e:	ef cf       	rjmp	.-34     	; 0x17fe <line+0xc4>
		{
			y = y + ystep;
    1820:	06 0d       	add	r16, r6
    1822:	17 1d       	adc	r17, r7
			error = error + deltax;
    1824:	c8 0d       	add	r28, r8
    1826:	d9 1d       	adc	r29, r9
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
        for (x = x0; x <= x1; ++x)
    1828:	08 94       	sec
    182a:	e1 1c       	adc	r14, r1
    182c:	f1 1c       	adc	r15, r1
    182e:	ae 14       	cp	r10, r14
    1830:	bf 04       	cpc	r11, r15
    1832:	5c f7       	brge	.-42     	; 0x180a <line+0xd0>
		{
			y = y + ystep;
			error = error + deltax;
		}
        }
}
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	bf 90       	pop	r11
    1846:	af 90       	pop	r10
    1848:	9f 90       	pop	r9
    184a:	8f 90       	pop	r8
    184c:	7f 90       	pop	r7
    184e:	6f 90       	pop	r6
    1850:	5f 90       	pop	r5
    1852:	4f 90       	pop	r4
    1854:	08 95       	ret
		swp=x1;
		x1=y1;
		y1=swp;
	}

    if (x0 > x1) 
    1856:	80 2f       	mov	r24, r16
    1858:	0a 2f       	mov	r16, r26
    185a:	a8 2f       	mov	r26, r24
		y0=y1;
		y1=swp;
	}

	int deltax = x1 - x0;
	int deltay = abs(y1 - y0);
    185c:	6f 01       	movw	r12, r30
    185e:	c4 1a       	sub	r12, r20
    1860:	d5 0a       	sbc	r13, r21
    1862:	d7 fe       	sbrs	r13, 7
    1864:	af cf       	rjmp	.-162    	; 0x17c4 <line+0x8a>
    1866:	d0 94       	com	r13
    1868:	c1 94       	neg	r12
    186a:	d1 08       	sbc	r13, r1
    186c:	d3 94       	inc	r13
	int error = deltax / 2;
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
    186e:	a0 17       	cp	r26, r16
    1870:	08 f0       	brcs	.+2      	; 0x1874 <line+0x13a>
    1872:	ab cf       	rjmp	.-170    	; 0x17ca <line+0x90>
    1874:	a1 e0       	ldi	r26, 0x01	; 1
    1876:	6a 2e       	mov	r6, r26
    1878:	71 2c       	mov	r7, r1
    187a:	aa cf       	rjmp	.-172    	; 0x17d0 <line+0x96>
{
	
	unsigned char steep;
	unsigned char swp;

    steep = (abs(y1 - y0) > abs(x1 - x0));
    187c:	30 95       	com	r19
    187e:	21 95       	neg	r18
    1880:	3f 4f       	sbci	r19, 0xFF	; 255
    1882:	c7 01       	movw	r24, r14
    1884:	8a 19       	sub	r24, r10
    1886:	9b 09       	sbc	r25, r11
    1888:	97 ff       	sbrs	r25, 7
    188a:	7d cf       	rjmp	.-262    	; 0x1786 <line+0x4c>
    188c:	90 95       	com	r25
    188e:	81 95       	neg	r24
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	79 cf       	rjmp	.-270    	; 0x1786 <line+0x4c>
		y1=swp;
	}

	int deltax = x1 - x0;
	int deltay = abs(y1 - y0);
	int error = deltax / 2;
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	a5 cf       	rjmp	.-182    	; 0x17e2 <line+0xa8>

00001898 <circle>:
}


//draws (S_R = 1) or erases (S_R = 0) a circle at x, y with radius r, using midpoint circle algorithm
void circle(char S_R, int x0, int y0, int r)
{
    1898:	2f 92       	push	r2
    189a:	3f 92       	push	r3
    189c:	4f 92       	push	r4
    189e:	5f 92       	push	r5
    18a0:	6f 92       	push	r6
    18a2:	7f 92       	push	r7
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	cf 92       	push	r12
    18ae:	df 92       	push	r13
    18b0:	ef 92       	push	r14
    18b2:	ff 92       	push	r15
    18b4:	0f 93       	push	r16
    18b6:	1f 93       	push	r17
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	c8 2e       	mov	r12, r24
    18be:	46 2e       	mov	r4, r22
    18c0:	54 2e       	mov	r5, r20
    18c2:	79 01       	movw	r14, r18
	int ddF_x = 1;
	int ddF_y = -2 * r;
	int x = 0;
	int y = r;
 
  pixel(S_R, x0, y0 + r);
    18c4:	42 2f       	mov	r20, r18
    18c6:	45 0d       	add	r20, r5
    18c8:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
  pixel(S_R, x0, y0 - r);
    18cc:	45 2d       	mov	r20, r5
    18ce:	4e 19       	sub	r20, r14
    18d0:	8c 2d       	mov	r24, r12
    18d2:	64 2d       	mov	r22, r4
    18d4:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
  pixel(S_R, x0 + r, y0);
    18d8:	6e 2d       	mov	r22, r14
    18da:	64 0d       	add	r22, r4
    18dc:	8c 2d       	mov	r24, r12
    18de:	45 2d       	mov	r20, r5
    18e0:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
  pixel(S_R, x0 - r, y0);
    18e4:	64 2d       	mov	r22, r4
    18e6:	6e 19       	sub	r22, r14
    18e8:	8c 2d       	mov	r24, r12
    18ea:	45 2d       	mov	r20, r5
    18ec:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
 
  while(x < y)
    18f0:	1e 14       	cp	r1, r14
    18f2:	1f 04       	cpc	r1, r15
    18f4:	0c f0       	brlt	.+2      	; 0x18f8 <circle+0x60>
    18f6:	63 c0       	rjmp	.+198    	; 0x19be <circle+0x126>

//draws (S_R = 1) or erases (S_R = 0) a circle at x, y with radius r, using midpoint circle algorithm
void circle(char S_R, int x0, int y0, int r)
{
	
	int f = 1 - r;
    18f8:	c1 e0       	ldi	r28, 0x01	; 1
    18fa:	d0 e0       	ldi	r29, 0x00	; 0
    18fc:	ce 19       	sub	r28, r14
    18fe:	df 09       	sbc	r29, r15
	int ddF_x = 1;
	int ddF_y = -2 * r;
    1900:	c7 01       	movw	r24, r14
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	22 24       	eor	r2, r2
    1908:	33 24       	eor	r3, r3
    190a:	28 1a       	sub	r2, r24
    190c:	39 0a       	sbc	r3, r25
    190e:	47 01       	movw	r8, r14
    1910:	b1 e0       	ldi	r27, 0x01	; 1
    1912:	6b 2e       	mov	r6, r27
    1914:	71 2c       	mov	r7, r1
    1916:	aa 24       	eor	r10, r10
    1918:	bb 24       	eor	r11, r11
    191a:	06 c0       	rjmp	.+12     	; 0x1928 <circle+0x90>
      y--;
      ddF_y += 2;
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	68 0e       	add	r6, r24
    1922:	79 1e       	adc	r7, r25
    f += ddF_x;    
    1924:	c6 0d       	add	r28, r6
    1926:	d7 1d       	adc	r29, r7
  pixel(S_R, x0 + r, y0);
  pixel(S_R, x0 - r, y0);
 
  while(x < y)
  {
    if(f >= 0) 
    1928:	d7 fd       	sbrc	r29, 7
    192a:	09 c0       	rjmp	.+18     	; 0x193e <circle+0xa6>
    {
      y--;
    192c:	08 94       	sec
    192e:	81 08       	sbc	r8, r1
    1930:	91 08       	sbc	r9, r1
      ddF_y += 2;
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	28 0e       	add	r2, r24
    1938:	39 1e       	adc	r3, r25
      f += ddF_y;
    193a:	c2 0d       	add	r28, r2
    193c:	d3 1d       	adc	r29, r3
    }
    x++;
    193e:	08 94       	sec
    1940:	a1 1c       	adc	r10, r1
    1942:	b1 1c       	adc	r11, r1
}


//draws (S_R = 1) or erases (S_R = 0) a circle at x, y with radius r, using midpoint circle algorithm
void circle(char S_R, int x0, int y0, int r)
{
    1944:	da 2c       	mov	r13, r10
    1946:	d4 0c       	add	r13, r4
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;    
    pixel(S_R, x0 + x, y0 + y);
    1948:	18 2d       	mov	r17, r8
    194a:	15 0d       	add	r17, r5
    194c:	8c 2d       	mov	r24, r12
    194e:	6d 2d       	mov	r22, r13
    1950:	41 2f       	mov	r20, r17
    1952:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    1956:	e4 2c       	mov	r14, r4
    1958:	ea 18       	sub	r14, r10
    pixel(S_R, x0 - x, y0 + y);
    195a:	8c 2d       	mov	r24, r12
    195c:	6e 2d       	mov	r22, r14
    195e:	41 2f       	mov	r20, r17
    1960:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    pixel(S_R, x0 + x, y0 - y);
    1964:	15 2d       	mov	r17, r5
    1966:	18 19       	sub	r17, r8
    1968:	8c 2d       	mov	r24, r12
    196a:	6d 2d       	mov	r22, r13
    196c:	41 2f       	mov	r20, r17
    196e:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    pixel(S_R, x0 - x, y0 - y);
    1972:	8c 2d       	mov	r24, r12
    1974:	6e 2d       	mov	r22, r14
    1976:	41 2f       	mov	r20, r17
    1978:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    pixel(S_R, x0 + y, y0 + x);
    197c:	e8 2c       	mov	r14, r8
    197e:	e4 0c       	add	r14, r4
    1980:	1a 2d       	mov	r17, r10
    1982:	15 0d       	add	r17, r5
    1984:	8c 2d       	mov	r24, r12
    1986:	6e 2d       	mov	r22, r14
    1988:	41 2f       	mov	r20, r17
    198a:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    pixel(S_R, x0 - y, y0 + x);
    198e:	94 2d       	mov	r25, r4
    1990:	98 19       	sub	r25, r8
    1992:	09 2f       	mov	r16, r25
    1994:	8c 2d       	mov	r24, r12
    1996:	69 2f       	mov	r22, r25
    1998:	41 2f       	mov	r20, r17
    199a:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    199e:	15 2d       	mov	r17, r5
    19a0:	1a 19       	sub	r17, r10
    pixel(S_R, x0 + y, y0 - x);
    19a2:	8c 2d       	mov	r24, r12
    19a4:	6e 2d       	mov	r22, r14
    19a6:	41 2f       	mov	r20, r17
    19a8:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    pixel(S_R, x0 - y, y0 - x);
    19ac:	8c 2d       	mov	r24, r12
    19ae:	60 2f       	mov	r22, r16
    19b0:	41 2f       	mov	r20, r17
    19b2:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
  pixel(S_R, x0, y0 + r);
  pixel(S_R, x0, y0 - r);
  pixel(S_R, x0 + r, y0);
  pixel(S_R, x0 - r, y0);
 
  while(x < y)
    19b6:	a8 14       	cp	r10, r8
    19b8:	b9 04       	cpc	r11, r9
    19ba:	0c f4       	brge	.+2      	; 0x19be <circle+0x126>
    19bc:	af cf       	rjmp	.-162    	; 0x191c <circle+0x84>
    pixel(S_R, x0 + y, y0 + x);
    pixel(S_R, x0 - y, y0 + x);
    pixel(S_R, x0 + y, y0 - x);
    pixel(S_R, x0 - y, y0 - x);
  }
}
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	5f 90       	pop	r5
    19dc:	4f 90       	pop	r4
    19de:	3f 90       	pop	r3
    19e0:	2f 90       	pop	r2
    19e2:	08 95       	ret

000019e4 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    19e4:	f9 99       	sbic	0x1f, 1	; 31
    19e6:	fe cf       	rjmp	.-4      	; 0x19e4 <EEPROM_write>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    19e8:	92 bd       	out	0x22, r25	; 34
    19ea:	81 bd       	out	0x21, r24	; 33
EEDR = ucData;
    19ec:	60 bd       	out	0x20, r22	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    19ee:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    19f0:	f9 9a       	sbi	0x1f, 1	; 31
}
    19f2:	08 95       	ret

000019f4 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    19f4:	f9 99       	sbic	0x1f, 1	; 31
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <EEPROM_read>
;
/* Set up address register */
EEAR = uiAddress;
    19f8:	92 bd       	out	0x22, r25	; 34
    19fa:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    19fc:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    19fe:	80 b5       	in	r24, 0x20	; 32
}
    1a00:	08 95       	ret

00001a02 <set_backlight>:

void set_backlight(unsigned char dutycycle)
{
	//Set up Timer 0
	TCCR0A = 0x02;//CTC mode
    1a02:	22 e0       	ldi	r18, 0x02	; 2
    1a04:	24 bd       	out	0x24, r18	; 36
	//OCR0A = dutycycle;
	
	//SREG |= 0x80;
	
	
	if(BL_dutycycle >= 100)
    1a06:	90 91 3d 01 	lds	r25, 0x013D
    1a0a:	94 36       	cpi	r25, 0x64	; 100
    1a0c:	a0 f4       	brcc	.+40     	; 0x1a36 <set_backlight+0x34>
		TIMSK0 = 0;//disable timer ints
		
		//Backlight on
		PORTB &= (~(1<<BL_EN));
	}
	else if (BL_dutycycle == 0)
    1a0e:	99 23       	and	r25, r25
    1a10:	69 f0       	breq	.+26     	; 0x1a2c <set_backlight+0x2a>
	}
	
	
	else
	{
		TCCR0B = 0;
    1a12:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
    1a14:	10 92 6e 00 	sts	0x006E, r1
		
		OCR0A = 100 - BL_dutycycle;
    1a18:	84 e6       	ldi	r24, 0x64	; 100
    1a1a:	89 1b       	sub	r24, r25
    1a1c:	87 bd       	out	0x27, r24	; 39
		
		TIMSK0 = 0x02;//enable match on A
    1a1e:	20 93 6e 00 	sts	0x006E, r18
		TCCR0B = 0x02;
    1a22:	25 bd       	out	0x25, r18	; 37
		
		SREG |= 0x80;
    1a24:	8f b7       	in	r24, 0x3f	; 63
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8f bf       	out	0x3f, r24	; 63
    1a2a:	08 95       	ret
		//Backlight on
		PORTB &= (~(1<<BL_EN));
	}
	else if (BL_dutycycle == 0)
	{
		TCCR0B = 0;
    1a2c:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
    1a2e:	10 92 6e 00 	sts	0x006E, r1
		
		//Backlight off
		PORTB |= (1<<BL_EN);
    1a32:	2a 9a       	sbi	0x05, 2	; 5
    1a34:	08 95       	ret
	//SREG |= 0x80;
	
	
	if(BL_dutycycle >= 100)
	{
		TCCR0B = 0;
    1a36:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
    1a38:	10 92 6e 00 	sts	0x006E, r1
		
		//Backlight on
		PORTB &= (~(1<<BL_EN));
    1a3c:	2a 98       	cbi	0x05, 2	; 5
    1a3e:	08 95       	ret

00001a40 <draw_block>:

//draws a block on the screen. Block is described
//by a diagonal line from x, y1 to x2, y2
//block is filled with byte data (describes a vertical row of 8 pixels, use 0x00 to clear the block, 0xFF to fill it, etc)
void draw_block(char x1, char y1, char x2, char y2, char data)
{
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	0f 92       	push	r0
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	52 2f       	mov	r21, r18
	static signed int width = 0, height = 0,x,y;
	char n;
	n=data;
	if (x1>x2)
    1a52:	48 17       	cp	r20, r24
    1a54:	a0 f5       	brcc	.+104    	; 0x1abe <draw_block+0x7e>
	{
		width=x1-x2;
    1a56:	24 2f       	mov	r18, r20
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	82 1b       	sub	r24, r18
    1a5e:	93 0b       	sbc	r25, r19
    1a60:	90 93 61 02 	sts	0x0261, r25
    1a64:	80 93 60 02 	sts	0x0260, r24
		x=x2;
    1a68:	30 93 5d 02 	sts	0x025D, r19
    1a6c:	20 93 5c 02 	sts	0x025C, r18
	else
	{
		width=x2-x1;
		x=x1;
	}
	if (y1>y2)
    1a70:	56 17       	cp	r21, r22
    1a72:	a8 f1       	brcs	.+106    	; 0x1ade <draw_block+0x9e>
		height=y1-y2;
		y=y2;
	}	
	else
	{
		height=y2-y1;
    1a74:	26 2f       	mov	r18, r22
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	85 2f       	mov	r24, r21
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	82 1b       	sub	r24, r18
    1a7e:	93 0b       	sbc	r25, r19
    1a80:	90 93 5f 02 	sts	0x025F, r25
    1a84:	80 93 5e 02 	sts	0x025E, r24
		y=y1;
    1a88:	30 93 5b 02 	sts	0x025B, r19
    1a8c:	20 93 5a 02 	sts	0x025A, r18
	}
	
	bitblt(x, y, width, height, 6, &n);	//use erase mode of bitblt
    1a90:	80 91 5c 02 	lds	r24, 0x025C
    1a94:	60 91 5a 02 	lds	r22, 0x025A
    1a98:	40 91 60 02 	lds	r20, 0x0260
    1a9c:	20 91 5e 02 	lds	r18, 0x025E
//block is filled with byte data (describes a vertical row of 8 pixels, use 0x00 to clear the block, 0xFF to fill it, etc)
void draw_block(char x1, char y1, char x2, char y2, char data)
{
	static signed int width = 0, height = 0,x,y;
	char n;
	n=data;
    1aa0:	09 83       	std	Y+1, r16	; 0x01
	{
		height=y2-y1;
		y=y1;
	}
	
	bitblt(x, y, width, height, 6, &n);	//use erase mode of bitblt
    1aa2:	06 e0       	ldi	r16, 0x06	; 6
    1aa4:	7e 01       	movw	r14, r28
    1aa6:	08 94       	sec
    1aa8:	e1 1c       	adc	r14, r1
    1aaa:	f1 1c       	adc	r15, r1
    1aac:	0e 94 83 08 	call	0x1106	; 0x1106 <bitblt>

}
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	08 95       	ret
		width=x1-x2;
		x=x2;
	}
	else
	{
		width=x2-x1;
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	84 2f       	mov	r24, r20
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	82 1b       	sub	r24, r18
    1ac8:	93 0b       	sbc	r25, r19
    1aca:	90 93 61 02 	sts	0x0261, r25
    1ace:	80 93 60 02 	sts	0x0260, r24
		x=x1;
    1ad2:	30 93 5d 02 	sts	0x025D, r19
    1ad6:	20 93 5c 02 	sts	0x025C, r18
	}
	if (y1>y2)
    1ada:	56 17       	cp	r21, r22
    1adc:	58 f6       	brcc	.-106    	; 0x1a74 <draw_block+0x34>
	{
		height=y1-y2;
    1ade:	25 2f       	mov	r18, r21
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	86 2f       	mov	r24, r22
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	82 1b       	sub	r24, r18
    1ae8:	93 0b       	sbc	r25, r19
    1aea:	90 93 5f 02 	sts	0x025F, r25
    1aee:	80 93 5e 02 	sts	0x025E, r24
		y=y2;
    1af2:	30 93 5b 02 	sts	0x025B, r19
    1af6:	20 93 5a 02 	sts	0x025A, r18
    1afa:	ca cf       	rjmp	.-108    	; 0x1a90 <draw_block+0x50>

00001afc <del_char>:
}


//Deletes a full character space previous to the current location (backspace)
void del_char()
{
    1afc:	0f 93       	push	r16
	char f;

	if (x_offset <= font_w)					//if previous char wouldn't have fit
    1afe:	30 91 57 02 	lds	r19, 0x0257
    1b02:	40 91 6b 03 	lds	r20, 0x036B
    1b06:	43 17       	cp	r20, r19
    1b08:	50 f1       	brcs	.+84     	; 0x1b5e <del_char+0x62>
	{			
		x_offset = (128 - (font_w+1) - ((128-x_offset) % (font_w+1)) );			
    1b0a:	24 2f       	mov	r18, r20
    1b0c:	20 95       	com	r18
    1b0e:	20 58       	subi	r18, 0x80	; 128
    1b10:	64 2f       	mov	r22, r20
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	6f 5f       	subi	r22, 0xFF	; 255
    1b16:	7f 4f       	sbci	r23, 0xFF	; 255
    1b18:	80 e8       	ldi	r24, 0x80	; 128
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	83 1b       	sub	r24, r19
    1b1e:	91 09       	sbc	r25, r1
    1b20:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__divmodhi4>
    1b24:	28 1b       	sub	r18, r24
    1b26:	20 93 57 02 	sts	0x0257, r18
				
		if (y_offset < font_h) 	
    1b2a:	50 91 58 02 	lds	r21, 0x0258
    1b2e:	30 91 6a 02 	lds	r19, 0x026A
    1b32:	53 17       	cp	r21, r19
    1b34:	60 f5       	brcc	.+88     	; 0x1b8e <del_char+0x92>
			y_offset = (64 - font_h - ((64-y_offset) % font_h) );	//if we run off the top of the screen
    1b36:	23 2f       	mov	r18, r19
    1b38:	21 95       	neg	r18
    1b3a:	20 5c       	subi	r18, 0xC0	; 192
    1b3c:	80 e4       	ldi	r24, 0x40	; 64
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	85 1b       	sub	r24, r21
    1b42:	91 09       	sbc	r25, r1
    1b44:	63 2f       	mov	r22, r19
    1b46:	70 e0       	ldi	r23, 0x00	; 0
    1b48:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__divmodhi4>
    1b4c:	28 1b       	sub	r18, r24
    1b4e:	20 93 58 02 	sts	0x0258, r18
	}
	
	else x_offset -= (font_w+1);					// back x_offset up by the font width + 1 pixel space btwn characters
	
	f=0;
	if (reverse==1)
    1b52:	80 91 55 02 	lds	r24, 0x0255
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	69 f4       	brne	.+26     	; 0x1b74 <del_char+0x78>
    1b5a:	0f ef       	ldi	r16, 0xFF	; 255
    1b5c:	0c c0       	rjmp	.+24     	; 0x1b76 <del_char+0x7a>
			y_offset = (64 - font_h - ((64-y_offset) % font_h) );	//if we run off the top of the screen
		else
			y_offset-=font_h;
	}
	
	else x_offset -= (font_w+1);					// back x_offset up by the font width + 1 pixel space btwn characters
    1b5e:	84 2f       	mov	r24, r20
    1b60:	80 95       	com	r24
    1b62:	83 0f       	add	r24, r19
    1b64:	80 93 57 02 	sts	0x0257, r24
    1b68:	30 91 6a 02 	lds	r19, 0x026A
	
	f=0;
	if (reverse==1)
    1b6c:	80 91 55 02 	lds	r24, 0x0255
    1b70:	81 30       	cpi	r24, 0x01	; 1
    1b72:	99 f3       	breq	.-26     	; 0x1b5a <del_char+0x5e>
    1b74:	00 e0       	ldi	r16, 0x00	; 0
		f=0xff;	

	draw_block(x_offset, y_offset, x_offset+font_w, y_offset+font_h-1,f);	//erase the block
    1b76:	80 91 57 02 	lds	r24, 0x0257
    1b7a:	60 91 58 02 	lds	r22, 0x0258
    1b7e:	48 0f       	add	r20, r24
    1b80:	36 0f       	add	r19, r22
    1b82:	31 50       	subi	r19, 0x01	; 1
    1b84:	23 2f       	mov	r18, r19
    1b86:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <draw_block>
}
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret
		x_offset = (128 - (font_w+1) - ((128-x_offset) % (font_w+1)) );			
				
		if (y_offset < font_h) 	
			y_offset = (64 - font_h - ((64-y_offset) % font_h) );	//if we run off the top of the screen
		else
			y_offset-=font_h;
    1b8e:	53 1b       	sub	r21, r19
    1b90:	50 93 58 02 	sts	0x0258, r21
    1b94:	eb cf       	rjmp	.-42     	; 0x1b6c <del_char+0x70>

00001b96 <box>:

//draws a box. The box is described

//by a diagonal line from x, y1 to x2, y2
void box(char x1, char y1, char x2, char y2, char mode)
{
    1b96:	df 92       	push	r13
    1b98:	ef 92       	push	r14
    1b9a:	ff 92       	push	r15
    1b9c:	0f 93       	push	r16
    1b9e:	1f 93       	push	r17
    1ba0:	f8 2e       	mov	r15, r24
    1ba2:	d6 2e       	mov	r13, r22
    1ba4:	e4 2e       	mov	r14, r20
    1ba6:	12 2f       	mov	r17, r18
	
	if (mode==1)
    1ba8:	01 30       	cpi	r16, 0x01	; 1
    1baa:	09 f1       	breq	.+66     	; 0x1bee <box+0x58>
		line(1, x1, y2, x1, y1);
		line(1, x1, y1, x2, y1);
	}
	else
	{
		line(0, x2, y2, x2, y1);
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	64 2f       	mov	r22, r20
    1bb0:	42 2f       	mov	r20, r18
    1bb2:	2e 2d       	mov	r18, r14
    1bb4:	0d 2d       	mov	r16, r13
    1bb6:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
		line(0, x1, y2, x2, y2);
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	6f 2d       	mov	r22, r15
    1bbe:	41 2f       	mov	r20, r17
    1bc0:	2e 2d       	mov	r18, r14
    1bc2:	01 2f       	mov	r16, r17
    1bc4:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
		line(0, x1, y2, x1, y1);
    1bc8:	80 e0       	ldi	r24, 0x00	; 0
    1bca:	6f 2d       	mov	r22, r15
    1bcc:	41 2f       	mov	r20, r17
    1bce:	2f 2d       	mov	r18, r15
    1bd0:	0d 2d       	mov	r16, r13
    1bd2:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
		line(0, x1, y1, x2, y1);
    1bd6:	80 e0       	ldi	r24, 0x00	; 0
    1bd8:	6f 2d       	mov	r22, r15
    1bda:	4d 2d       	mov	r20, r13
    1bdc:	2e 2d       	mov	r18, r14
    1bde:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
	}
}
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	df 90       	pop	r13
    1bec:	08 95       	ret
void box(char x1, char y1, char x2, char y2, char mode)
{
	
	if (mode==1)
	{
		line(1, x2, y2, x2, y1);
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	64 2f       	mov	r22, r20
    1bf2:	42 2f       	mov	r20, r18
    1bf4:	2e 2d       	mov	r18, r14
    1bf6:	0d 2d       	mov	r16, r13
    1bf8:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
		line(1, x1, y2, x2, y2);
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	6f 2d       	mov	r22, r15
    1c00:	41 2f       	mov	r20, r17
    1c02:	2e 2d       	mov	r18, r14
    1c04:	01 2f       	mov	r16, r17
    1c06:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
		line(1, x1, y2, x1, y1);
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	6f 2d       	mov	r22, r15
    1c0e:	41 2f       	mov	r20, r17
    1c10:	2f 2d       	mov	r18, r15
    1c12:	0d 2d       	mov	r16, r13
    1c14:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
		line(1, x1, y1, x2, y1);
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	6f 2d       	mov	r22, r15
    1c1c:	4d 2d       	mov	r20, r13
    1c1e:	2e 2d       	mov	r18, r14
    1c20:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
		line(0, x2, y2, x2, y1);
		line(0, x1, y2, x2, y2);
		line(0, x1, y2, x1, y1);
		line(0, x1, y1, x2, y1);
	}
}
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	08 95       	ret

00001c30 <draw_sprite>:

void draw_sprite(char x, char y, char n, char mode)	//draws nth sprite at (x,y) using mode
{
    1c30:	ef 92       	push	r14
    1c32:	ff 92       	push	r15
    1c34:	0f 93       	push	r16
    1c36:	02 2f       	mov	r16, r18
	uint16_t o;
	o=n*SPRITE_SIZE;				//offset to sprite
    1c38:	92 e2       	ldi	r25, 0x22	; 34
    1c3a:	49 9f       	mul	r20, r25
    1c3c:	a0 01       	movw	r20, r0
    1c3e:	11 24       	eor	r1, r1
	bitblt(x, y, sprite[o], sprite[o+1], mode, sprite + 2 + o);
    1c40:	ee e3       	ldi	r30, 0x3E	; 62
    1c42:	f1 e0       	ldi	r31, 0x01	; 1
    1c44:	df 01       	movw	r26, r30
    1c46:	a4 0f       	add	r26, r20
    1c48:	b5 1f       	adc	r27, r21
    1c4a:	4e 5f       	subi	r20, 0xFE	; 254
    1c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c4e:	e4 0f       	add	r30, r20
    1c50:	f5 1f       	adc	r31, r21
    1c52:	4c 91       	ld	r20, X
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	2c 91       	ld	r18, X
    1c58:	7f 01       	movw	r14, r30
    1c5a:	0e 94 83 08 	call	0x1106	; 0x1106 <bitblt>
}
    1c5e:	0f 91       	pop	r16
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	08 95       	ret

00001c66 <set_baud>:

void set_baud(char b)
{
	if (b == 1) USART_Init( 1000000/2400-1);//4800
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	a9 f0       	breq	.+42     	; 0x1c94 <set_baud+0x2e>
	else if (b == 2) USART_Init( 1000000/4800-1);//9600
    1c6a:	82 30       	cpi	r24, 0x02	; 2
    1c6c:	c1 f0       	breq	.+48     	; 0x1c9e <set_baud+0x38>
	else if (b == 3) USART_Init( 1000000/9600-1);//19200
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	d9 f0       	breq	.+54     	; 0x1ca8 <set_baud+0x42>
	else if (b == 4) USART_Init( 1000000/19200-1);//38400
    1c72:	84 30       	cpi	r24, 0x04	; 4
    1c74:	f1 f0       	breq	.+60     	; 0x1cb2 <set_baud+0x4c>
	else if (b == 5) USART_Init( 1000000/28800-1);//57600
    1c76:	85 30       	cpi	r24, 0x05	; 5
    1c78:	41 f0       	breq	.+16     	; 0x1c8a <set_baud+0x24>
	else if (b == 6) USART_Init( 1000000/57600-1);//115200
    1c7a:	86 30       	cpi	r24, 0x06	; 6
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <set_baud+0x1a>
    1c7e:	08 95       	ret
    1c80:	80 e1       	ldi	r24, 0x10	; 16
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 b1 05 	call	0xb62	; 0xb62 <USART_Init>
    1c88:	08 95       	ret
{
	if (b == 1) USART_Init( 1000000/2400-1);//4800
	else if (b == 2) USART_Init( 1000000/4800-1);//9600
	else if (b == 3) USART_Init( 1000000/9600-1);//19200
	else if (b == 4) USART_Init( 1000000/19200-1);//38400
	else if (b == 5) USART_Init( 1000000/28800-1);//57600
    1c8a:	81 e2       	ldi	r24, 0x21	; 33
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	0e 94 b1 05 	call	0xb62	; 0xb62 <USART_Init>
    1c92:	08 95       	ret
	bitblt(x, y, sprite[o], sprite[o+1], mode, sprite + 2 + o);
}

void set_baud(char b)
{
	if (b == 1) USART_Init( 1000000/2400-1);//4800
    1c94:	8f e9       	ldi	r24, 0x9F	; 159
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	0e 94 b1 05 	call	0xb62	; 0xb62 <USART_Init>
    1c9c:	08 95       	ret
	else if (b == 2) USART_Init( 1000000/4800-1);//9600
    1c9e:	8f ec       	ldi	r24, 0xCF	; 207
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 b1 05 	call	0xb62	; 0xb62 <USART_Init>
    1ca6:	08 95       	ret
	else if (b == 3) USART_Init( 1000000/9600-1);//19200
    1ca8:	87 e6       	ldi	r24, 0x67	; 103
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	0e 94 b1 05 	call	0xb62	; 0xb62 <USART_Init>
    1cb0:	08 95       	ret
	else if (b == 4) USART_Init( 1000000/19200-1);//38400
    1cb2:	83 e3       	ldi	r24, 0x33	; 51
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	0e 94 b1 05 	call	0xb62	; 0xb62 <USART_Init>
    1cba:	08 95       	ret

00001cbc <LCD_reset>:
	
}

void LCD_reset(void)
{
	PORTC = 0x00;
    1cbc:	18 b8       	out	0x08, r1	; 8
	delay_ms(60);
    1cbe:	8c e3       	ldi	r24, 0x3C	; 60
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 9b 05 	call	0xb36	; 0xb36 <delay_ms>
	PORTC = LCD_IDLE;
    1cc6:	88 e0       	ldi	r24, 0x08	; 8
    1cc8:	88 b9       	out	0x08, r24	; 8
	
	clear_screen(0);
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	0e 94 1b 08 	call	0x1036	; 0x1036 <clear_screen>
	set_page(0);
    1cd0:	88 eb       	ldi	r24, 0xB8	; 184
    1cd2:	60 e0       	ldi	r22, 0x00	; 0
    1cd4:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
			
	set_x(0);
    1cd8:	80 e4       	ldi	r24, 0x40	; 64
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
			
	display_on();
    1ce0:	8f e3       	ldi	r24, 0x3F	; 63
    1ce2:	60 e0       	ldi	r22, 0x00	; 0
    1ce4:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
	
	//set display start line to 0, command 0xC0
	write_command_LCD(0xC0,0);
    1ce8:	80 ec       	ldi	r24, 0xC0	; 192
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
	
	x_offset = 0;
    1cf0:	10 92 57 02 	sts	0x0257, r1

	set_page(0);
    1cf4:	88 eb       	ldi	r24, 0xB8	; 184
    1cf6:	60 e0       	ldi	r22, 0x00	; 0
    1cf8:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
}
    1cfc:	08 95       	ret

00001cfe <main>:
	//sei();//Enable Interrupts
}


int main (void)
{
    1cfe:	2f 92       	push	r2
    1d00:	3f 92       	push	r3
    1d02:	4f 92       	push	r4
    1d04:	5f 92       	push	r5
    1d06:	6f 92       	push	r6
    1d08:	7f 92       	push	r7
    1d0a:	8f 92       	push	r8
    1d0c:	9f 92       	push	r9
    1d0e:	af 92       	push	r10
    1d10:	bf 92       	push	r11
    1d12:	cf 92       	push	r12
    1d14:	df 92       	push	r13
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	0f 93       	push	r16
    1d1c:	1f 93       	push	r17
    1d1e:	df 93       	push	r29
    1d20:	cf 93       	push	r28
    1d22:	cd b7       	in	r28, 0x3d	; 61
    1d24:	de b7       	in	r29, 0x3e	; 62
    1d26:	2e 97       	sbiw	r28, 0x0e	; 14
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	f8 94       	cli
    1d2c:	de bf       	out	0x3e, r29	; 62
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	cd bf       	out	0x3d, r28	; 61
	char x, y, z, temp, q, p, i;	//variables used for loops, buffering of command bytes, counters etc.
	uint16_t count, count2;		//counters for long stuff that may go over 256
	
	ioinit(); 			//Setup IO pins and defaults
    1d32:	0e 94 76 05 	call	0xaec	; 0xaec <ioinit>

	set_baud(6);			//115200
    1d36:	86 e0       	ldi	r24, 0x06	; 6
    1d38:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <set_baud>
	rprintf_devopen(put_char); // init rprintf 
    1d3c:	84 ef       	ldi	r24, 0xF4	; 244
    1d3e:	95 e0       	ldi	r25, 0x05	; 5
    1d40:	0e 94 64 13 	call	0x26c8	; 0x26c8 <rprintf_devopen>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1d44:	80 91 c0 00 	lds	r24, 0x00C0
    1d48:	85 ff       	sbrs	r24, 5
    1d4a:	fc cf       	rjmp	.-8      	; 0x1d44 <main+0x46>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    1d4c:	81 e1       	ldi	r24, 0x11	; 17
    1d4e:	80 93 c6 00 	sts	0x00C6, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1d52:	f9 99       	sbic	0x1f, 1	; 31
    1d54:	fe cf       	rjmp	.-4      	; 0x1d52 <main+0x54>
;
/* Set up address register */
EEAR = uiAddress;
    1d56:	12 bc       	out	0x22, r1	; 34
    1d58:	11 bc       	out	0x21, r1	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1d5a:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1d5c:	90 b5       	in	r25, 0x20	; 32
	put_char(XON);

	//check for existing preset values==============================================================
	temp = EEPROM_read((unsigned int)BPS);
	
	if ((temp < 1) | (temp > 6))//BPS will only be 1-6
    1d5e:	89 2f       	mov	r24, r25
    1d60:	81 50       	subi	r24, 0x01	; 1
    1d62:	86 30       	cpi	r24, 0x06	; 6
    1d64:	a8 f5       	brcc	.+106    	; 0x1dd0 <main+0xd2>
		CR_LF = 1;
	}
	
	else
	{
		baud_rate = temp;
    1d66:	90 93 3b 01 	sts	0x013B, r25
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1d6a:	f9 99       	sbic	0x1f, 1	; 31
    1d6c:	fe cf       	rjmp	.-4      	; 0x1d6a <main+0x6c>
;
/* Set up address register */
EEAR = uiAddress;
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	92 bd       	out	0x22, r25	; 34
    1d74:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1d76:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1d78:	80 b5       	in	r24, 0x20	; 32
	}
	
	else
	{
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
    1d7a:	80 93 3d 01 	sts	0x013D, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1d7e:	f9 99       	sbic	0x1f, 1	; 31
    1d80:	fe cf       	rjmp	.-4      	; 0x1d7e <main+0x80>
;
/* Set up address register */
EEAR = uiAddress;
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	92 bd       	out	0x22, r25	; 34
    1d88:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1d8a:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1d8c:	80 b5       	in	r24, 0x20	; 32
	
	else
	{
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
		splash_screen = EEPROM_read((unsigned int)SPLASH);
    1d8e:	80 93 3c 01 	sts	0x013C, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1d92:	f9 99       	sbic	0x1f, 1	; 31
    1d94:	fe cf       	rjmp	.-4      	; 0x1d92 <main+0x94>
;
/* Set up address register */
EEAR = uiAddress;
    1d96:	83 e0       	ldi	r24, 0x03	; 3
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	92 bd       	out	0x22, r25	; 34
    1d9c:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1d9e:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1da0:	80 b5       	in	r24, 0x20	; 32
	else
	{
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
		splash_screen = EEPROM_read((unsigned int)SPLASH);
		reverse = EEPROM_read((unsigned int)REV);
    1da2:	80 93 55 02 	sts	0x0255, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1da6:	f9 99       	sbic	0x1f, 1	; 31
    1da8:	fe cf       	rjmp	.-4      	; 0x1da6 <main+0xa8>
;
/* Set up address register */
EEAR = uiAddress;
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	92 bd       	out	0x22, r25	; 34
    1db0:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1db2:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1db4:	80 b5       	in	r24, 0x20	; 32
	{
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
		splash_screen = EEPROM_read((unsigned int)SPLASH);
		reverse = EEPROM_read((unsigned int)REV);
		debug_msg = EEPROM_read((unsigned int)DEBUG);
    1db6:	80 93 56 02 	sts	0x0256, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1dba:	f9 99       	sbic	0x1f, 1	; 31
    1dbc:	fe cf       	rjmp	.-4      	; 0x1dba <main+0xbc>
;
/* Set up address register */
EEAR = uiAddress;
    1dbe:	85 e0       	ldi	r24, 0x05	; 5
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	92 bd       	out	0x22, r25	; 34
    1dc4:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1dc6:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    1dc8:	80 b5       	in	r24, 0x20	; 32
		baud_rate = temp;
		BL_dutycycle = EEPROM_read((unsigned int)BACKLIGHT);
		splash_screen = EEPROM_read((unsigned int)SPLASH);
		reverse = EEPROM_read((unsigned int)REV);
		debug_msg = EEPROM_read((unsigned int)DEBUG);
		CR_LF = EEPROM_read((unsigned int)CRLF);
    1dca:	80 93 4f 02 	sts	0x024F, r24
    1dce:	2f c0       	rjmp	.+94     	; 0x1e2e <main+0x130>
	//check for existing preset values==============================================================
	temp = EEPROM_read((unsigned int)BPS);
	
	if ((temp < 1) | (temp > 6))//BPS will only be 1-6
	{
		cli();//Disable Interrupts
    1dd0:	f8 94       	cli
		
		EEPROM_write((unsigned int) BPS, 6);
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	66 e0       	ldi	r22, 0x06	; 6
    1dd8:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
		EEPROM_write((unsigned int) BACKLIGHT, 100);
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	64 e6       	ldi	r22, 0x64	; 100
    1de2:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
		EEPROM_write((unsigned int) SPLASH, 1);
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
		EEPROM_write((unsigned int) REV, 0);
    1df0:	83 e0       	ldi	r24, 0x03	; 3
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
		EEPROM_write((unsigned int) DEBUG, 0);
    1dfa:	84 e0       	ldi	r24, 0x04	; 4
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
		EEPROM_write((unsigned int) CRLF, 1);
    1e04:	85 e0       	ldi	r24, 0x05	; 5
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	61 e0       	ldi	r22, 0x01	; 1
    1e0a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>

		sei();//Enable Interrupts
    1e0e:	78 94       	sei
		
		BL_dutycycle = 100;
    1e10:	84 e6       	ldi	r24, 0x64	; 100
    1e12:	80 93 3d 01 	sts	0x013D, r24
		baud_rate = 6;
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	80 93 3b 01 	sts	0x013B, r24
		splash_screen = 1;
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	80 93 3c 01 	sts	0x013C, r24
		reverse = 0;
    1e22:	10 92 55 02 	sts	0x0255, r1
		debug_msg = 0;
    1e26:	10 92 56 02 	sts	0x0256, r1
		CR_LF = 1;
    1e2a:	80 93 4f 02 	sts	0x024F, r24
//		reverse = 0;
//		debug_msg = 0;
//		CR_LF = 1;

	//Set up the default font===========================================
	font_w = pgm_read_byte(&text_array[0]);	
    1e2e:	ec ea       	ldi	r30, 0xAC	; 172
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	84 91       	lpm	r24, Z+
    1e34:	80 93 6b 03 	sts	0x036B, r24
	font_h = pgm_read_byte(&text_array[1]);	
    1e38:	7f 01       	movw	r14, r30
    1e3a:	08 94       	sec
    1e3c:	e1 1c       	adc	r14, r1
    1e3e:	f1 1c       	adc	r15, r1
    1e40:	f7 01       	movw	r30, r14
    1e42:	84 91       	lpm	r24, Z+
    1e44:	80 93 6a 02 	sts	0x026A, r24
	font_space = pgm_read_byte(&text_array[2]);
    1e48:	0c ea       	ldi	r16, 0xAC	; 172
    1e4a:	10 e0       	ldi	r17, 0x00	; 0
    1e4c:	0e 5f       	subi	r16, 0xFE	; 254
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	f8 01       	movw	r30, r16
    1e52:	24 91       	lpm	r18, Z+
    1e54:	20 93 6c 04 	sts	0x046C, r18
	font_bytes = font_h/8;	//8 pixels/byte
    1e58:	28 2f       	mov	r18, r24
    1e5a:	26 95       	lsr	r18
    1e5c:	26 95       	lsr	r18
    1e5e:	26 95       	lsr	r18
    1e60:	20 93 69 02 	sts	0x0269, r18
	if (font_h % 8 != 0)
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	87 70       	andi	r24, 0x07	; 7
    1e68:	90 70       	andi	r25, 0x00	; 0
    1e6a:	89 2b       	or	r24, r25
    1e6c:	19 f0       	breq	.+6      	; 0x1e74 <main+0x176>
		font_bytes++;	//partial rows count too
    1e6e:	2f 5f       	subi	r18, 0xFF	; 255
    1e70:	20 93 69 02 	sts	0x0269, r18
	font_bytes *= font_w;	//need font_w stacks of rows	
    1e74:	80 91 69 02 	lds	r24, 0x0269
    1e78:	90 91 6b 03 	lds	r25, 0x036B
    1e7c:	89 9f       	mul	r24, r25
    1e7e:	80 2d       	mov	r24, r0
    1e80:	11 24       	eor	r1, r1
    1e82:	80 93 69 02 	sts	0x0269, r24

	//Reset the display=================================================

	LCD_reset();
    1e86:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_reset>

	set_backlight(BL_dutycycle);
    1e8a:	80 91 3d 01 	lds	r24, 0x013D
    1e8e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <set_backlight>
	
	delay_ms(500);
    1e92:	84 ef       	ldi	r24, 0xF4	; 244
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	0e 94 9b 05 	call	0xb36	; 0xb36 <delay_ms>

	
	//Logo==========================================================
	if (splash_screen == 1)
    1e9a:	80 91 3c 01 	lds	r24, 0x013C
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <main+0x1a6>
    1ea2:	0b c4       	rjmp	.+2070   	; 0x26ba <main+0x9bc>
	{
		draw_sprite(56,24,0,4);	//XOR'ing the sprite works in normal and reverse modes
	}

	cli();
    1ea4:	f8 94       	cli
	RX_in = 0;	//clear RX input buffer
    1ea6:	10 92 50 02 	sts	0x0250, r1
	RX_read = 0;
    1eaa:	10 92 52 02 	sts	0x0252, r1
    1eae:	10 92 51 02 	sts	0x0251, r1
	RX_bytes = 0;
    1eb2:	10 92 53 02 	sts	0x0253, r1
	sei();	
    1eb6:	78 94       	sei

	delay_ms(1000);	//display the splash screen for a second
    1eb8:	88 ee       	ldi	r24, 0xE8	; 232
    1eba:	93 e0       	ldi	r25, 0x03	; 3
    1ebc:	0e 94 9b 05 	call	0xb36	; 0xb36 <delay_ms>
	clear_screen(0);	//clear the screen
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	0e 94 1b 08 	call	0x1036	; 0x1036 <clear_screen>
	
	if (RX_in > 0)	//revert to 115200
    1ec6:	80 91 50 02 	lds	r24, 0x0250
    1eca:	88 23       	and	r24, r24
    1ecc:	09 f4       	brne	.+2      	; 0x1ed0 <main+0x1d2>
    1ece:	f0 c3       	rjmp	.+2016   	; 0x26b0 <main+0x9b2>
	{
		print_char('1');
    1ed0:	81 e3       	ldi	r24, 0x31	; 49
    1ed2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <print_char>
		print_char('1');
    1ed6:	81 e3       	ldi	r24, 0x31	; 49
    1ed8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <print_char>
		print_char('5');
    1edc:	85 e3       	ldi	r24, 0x35	; 53
    1ede:	0e 94 4c 0a 	call	0x1498	; 0x1498 <print_char>
		print_char('2');
    1ee2:	82 e3       	ldi	r24, 0x32	; 50
    1ee4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <print_char>
		print_char('0');
    1ee8:	80 e3       	ldi	r24, 0x30	; 48
    1eea:	0e 94 4c 0a 	call	0x1498	; 0x1498 <print_char>
		print_char('0');
    1eee:	80 e3       	ldi	r24, 0x30	; 48
    1ef0:	0e 94 4c 0a 	call	0x1498	; 0x1498 <print_char>
		
		baud_rate = 6;
    1ef4:	86 e0       	ldi	r24, 0x06	; 6
    1ef6:	80 93 3b 01 	sts	0x013B, r24
		set_baud(6);//115200
    1efa:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <set_baud>
		
		cli();
    1efe:	f8 94       	cli
		
		EEPROM_write((unsigned int) BPS, 6);
    1f00:	80 e0       	ldi	r24, 0x00	; 0
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	66 e0       	ldi	r22, 0x06	; 6
    1f06:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
		
		sei();//Enable Interrupts
    1f0a:	78 94       	sei
	}
	
	else (set_baud(baud_rate));
	
	delay_ms(1000);
    1f0c:	88 ee       	ldi	r24, 0xE8	; 232
    1f0e:	93 e0       	ldi	r25, 0x03	; 3
    1f10:	0e 94 9b 05 	call	0xb36	; 0xb36 <delay_ms>
	clear_screen(0);
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	0e 94 1b 08 	call	0x1036	; 0x1036 <clear_screen>
	
	//flush any received chars

	cli();
    1f1a:	f8 94       	cli
	RX_read=0;
    1f1c:	10 92 52 02 	sts	0x0252, r1
    1f20:	10 92 51 02 	sts	0x0251, r1
	RX_in=0;
    1f24:	10 92 50 02 	sts	0x0250, r1
	RX_bytes=0;
    1f28:	10 92 53 02 	sts	0x0253, r1
	sei();
    1f2c:	78 94       	sei
    1f2e:	e0 e0       	ldi	r30, 0x00	; 0
    1f30:	8e 2e       	mov	r8, r30
    1f32:	e1 e0       	ldi	r30, 0x01	; 1
    1f34:	9e 2e       	mov	r9, r30
    1f36:	ea e8       	ldi	r30, 0x8A	; 138
    1f38:	f2 e0       	ldi	r31, 0x02	; 2
    1f3a:	cf 01       	movw	r24, r30
    1f3c:	02 96       	adiw	r24, 0x02	; 2
    1f3e:	74 e1       	ldi	r23, 0x14	; 20
    1f40:	a7 2e       	mov	r10, r23
    1f42:	71 e0       	ldi	r23, 0x01	; 1
    1f44:	b7 2e       	mov	r11, r23
    1f46:	6c e1       	ldi	r22, 0x1C	; 28
    1f48:	66 2e       	mov	r6, r22
    1f4a:	61 e0       	ldi	r22, 0x01	; 1
    1f4c:	76 2e       	mov	r7, r22
void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    1f4e:	5d e0       	ldi	r21, 0x0D	; 13
    1f50:	c5 2e       	mov	r12, r21
    1f52:	4a e0       	ldi	r20, 0x0A	; 10
    1f54:	54 2e       	mov	r5, r20
				 case 25:		//set y_offset
							//wait for byte
					y_offset = RX_get_byte();		//get new y offset
							

					if (y_offset > 127) y_offset = 127;	//coerce y offset to valid range		
    1f56:	3f e7       	ldi	r19, 0x7F	; 127
    1f58:	43 2e       	mov	r4, r19
				//************************************************************************************************************
				 case 24:		//set x_offset
							//wait for byte
					x_offset = RX_get_byte();		//get new x offset
							
					if (x_offset > 159) x_offset = 159;	//coerce x offset to valid range
    1f5a:	2f e9       	ldi	r18, 0x9F	; 159
    1f5c:	32 2e       	mov	r3, r18
					EEPROM_write((unsigned int) REV, reverse);
					sei();
				 break;	
				//************************************************************************************************************
				 case 21:	//toggle splash
					splash_screen ^= 1;
    1f5e:	22 24       	eor	r2, r2
    1f60:	23 94       	inc	r2
						font_bytes *= font_w;	//need font_w stacks of rows	
					}
					else			//if using default font, set to aux
					{
						aux_font=1;
						font_w = pgm_read_byte(&aux_text_array[0]);	
    1f62:	24 91       	lpm	r18, Z+
    1f64:	29 83       	std	Y+1, r18	; 0x01
    1f66:	31 96       	adiw	r30, 0x01	; 1
						font_h = pgm_read_byte(&aux_text_array[1]);	
    1f68:	a4 91       	lpm	r26, Z+
    1f6a:	aa 83       	std	Y+2, r26	; 0x02
						font_space = pgm_read_byte(&aux_text_array[2]);
    1f6c:	fc 01       	movw	r30, r24
    1f6e:	f4 91       	lpm	r31, Z+
    1f70:	fb 83       	std	Y+3, r31	; 0x03
						font_bytes = font_h/8;	//8 pixels/byte
    1f72:	a6 95       	lsr	r26
    1f74:	a6 95       	lsr	r26
    1f76:	a6 95       	lsr	r26
    1f78:	ac 83       	std	Y+4, r26	; 0x04
						if (font_h % 8 != 0)
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	89 2f       	mov	r24, r25
    1f7e:	90 e0       	ldi	r25, 0x00	; 0
    1f80:	87 70       	andi	r24, 0x07	; 7
    1f82:	90 70       	andi	r25, 0x00	; 0
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
							font_bytes++;	//partial rows count too
    1f88:	af 5f       	subi	r26, 0xFF	; 255
    1f8a:	af 83       	std	Y+7, r26	; 0x07
				 case 8:	//toggle aux font
				
					if (aux_font==1)	//if using aux font, set back to default
					{
						aux_font=0;
						font_w = pgm_read_byte(&text_array[0]);	
    1f8c:	ec ea       	ldi	r30, 0xAC	; 172
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	f4 91       	lpm	r31, Z+
    1f92:	f8 87       	std	Y+8, r31	; 0x08
						font_h = pgm_read_byte(&text_array[1]);	
    1f94:	f7 01       	movw	r30, r14
    1f96:	f4 91       	lpm	r31, Z+
    1f98:	f9 87       	std	Y+9, r31	; 0x09
						font_space = pgm_read_byte(&text_array[2]);
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	f4 91       	lpm	r31, Z+
    1f9e:	fa 87       	std	Y+10, r31	; 0x0a
						font_bytes = font_h/8;	//8 pixels/byte
    1fa0:	29 85       	ldd	r18, Y+9	; 0x09
    1fa2:	26 95       	lsr	r18
    1fa4:	26 95       	lsr	r18
    1fa6:	26 95       	lsr	r18
    1fa8:	2b 87       	std	Y+11, r18	; 0x0b
						if (font_h % 8 != 0)
    1faa:	99 85       	ldd	r25, Y+9	; 0x09
    1fac:	89 2f       	mov	r24, r25
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	87 70       	andi	r24, 0x07	; 7
    1fb2:	90 70       	andi	r25, 0x00	; 0
    1fb4:	9d 87       	std	Y+13, r25	; 0x0d
    1fb6:	8c 87       	std	Y+12, r24	; 0x0c
							font_bytes++;	//partial rows count too
    1fb8:	2f 5f       	subi	r18, 0xFF	; 255
    1fba:	2e 87       	std	Y+14, r18	; 0x0e

	//main loop===================================================
	//main loop waits for characters on the serial port, and either prints them, or interprets them as a command
	while(1)
	{
			x = RX_get_byte();	
    1fbc:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    1fc0:	98 2f       	mov	r25, r24
			switch(x)		//switch based on received character
    1fc2:	8a 30       	cpi	r24, 0x0A	; 10
    1fc4:	89 f0       	breq	.+34     	; 0x1fe8 <main+0x2ea>
    1fc6:	8b 30       	cpi	r24, 0x0B	; 11
    1fc8:	d0 f5       	brcc	.+116    	; 0x203e <main+0x340>
    1fca:	88 30       	cpi	r24, 0x08	; 8
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <main+0x2d2>
    1fce:	23 c3       	rjmp	.+1606   	; 0x2616 <main+0x918>
				 break;
				}
			 break;
			//--------------------------------------------------------------------------------------------------------------------
			 default:		//nothing special, print character to screen
				if (debug_msg==2)
    1fd0:	80 91 56 02 	lds	r24, 0x0256
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	61 f1       	breq	.+88     	; 0x2030 <main+0x332>
					put_char(x);	//if ASCII debug, echo characters typed
				print_char(x);
    1fd8:	89 2f       	mov	r24, r25
    1fda:	0e 94 4c 0a 	call	0x1498	; 0x1498 <print_char>

	//main loop===================================================
	//main loop waits for characters on the serial port, and either prints them, or interprets them as a command
	while(1)
	{
			x = RX_get_byte();	
    1fde:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    1fe2:	98 2f       	mov	r25, r24
			switch(x)		//switch based on received character
    1fe4:	8a 30       	cpi	r24, 0x0A	; 10
    1fe6:	79 f7       	brne	.-34     	; 0x1fc6 <main+0x2c8>
				}
			 break;

			 case 10:			//LF move to next row

				if (y_offset > (64-font_h-font_h))
    1fe8:	70 91 58 02 	lds	r23, 0x0258
    1fec:	60 91 6a 02 	lds	r22, 0x026A
    1ff0:	86 2f       	mov	r24, r22
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	47 2f       	mov	r20, r23
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	22 27       	eor	r18, r18
    1ffa:	33 27       	eor	r19, r19
    1ffc:	28 1b       	sub	r18, r24
    1ffe:	39 0b       	sbc	r19, r25
    2000:	28 1b       	sub	r18, r24
    2002:	39 0b       	sbc	r19, r25
    2004:	20 5c       	subi	r18, 0xC0	; 192
    2006:	3f 4f       	sbci	r19, 0xFF	; 255
    2008:	24 17       	cp	r18, r20
    200a:	35 07       	cpc	r19, r21
    200c:	0c f0       	brlt	.+2      	; 0x2010 <main+0x312>
    200e:	12 c3       	rjmp	.+1572   	; 0x2634 <main+0x936>
					y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
    2010:	87 2f       	mov	r24, r23
    2012:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodqi4>
    2016:	90 93 58 02 	sts	0x0258, r25
				else 
					y_offset += font_h;
				if (debug_msg==2)
    201a:	80 91 56 02 	lds	r24, 0x0256
    201e:	82 30       	cpi	r24, 0x02	; 2
    2020:	69 f6       	brne	.-102    	; 0x1fbc <main+0x2be>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2022:	80 91 c0 00 	lds	r24, 0x00C0
    2026:	85 ff       	sbrs	r24, 5
    2028:	fc cf       	rjmp	.-8      	; 0x2022 <main+0x324>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    202a:	50 92 c6 00 	sts	0x00C6, r5
    202e:	c6 cf       	rjmp	.-116    	; 0x1fbc <main+0x2be>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2030:	80 91 c0 00 	lds	r24, 0x00C0
    2034:	85 ff       	sbrs	r24, 5
    2036:	fc cf       	rjmp	.-8      	; 0x2030 <main+0x332>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    2038:	90 93 c6 00 	sts	0x00C6, r25
    203c:	cd cf       	rjmp	.-102    	; 0x1fd8 <main+0x2da>
	//main loop===================================================
	//main loop waits for characters on the serial port, and either prints them, or interprets them as a command
	while(1)
	{
			x = RX_get_byte();	
			switch(x)		//switch based on received character
    203e:	8d 30       	cpi	r24, 0x0D	; 13
    2040:	09 f4       	brne	.+2      	; 0x2044 <main+0x346>
    2042:	a9 c2       	rjmp	.+1362   	; 0x2596 <main+0x898>
    2044:	8c 37       	cpi	r24, 0x7C	; 124
    2046:	21 f6       	brne	.-120    	; 0x1fd0 <main+0x2d2>
				if (debug_msg==2)
					put_char(x);	//if ASCII debug, echo characters typed
			 break;
			//--------------------------------------------------------------------------------------------------------------------
			 case 124:					//received character indicated a coming command
				y = RX_get_byte();			//get char from buffer
    2048:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    204c:	18 2f       	mov	r17, r24

				switch (debug_msg)		//output for debugging or monitoring purposes
    204e:	20 91 56 02 	lds	r18, 0x0256
    2052:	21 30       	cpi	r18, 0x01	; 1
    2054:	11 f1       	breq	.+68     	; 0x209a <main+0x39c>
    2056:	22 30       	cpi	r18, 0x02	; 2
    2058:	99 f4       	brne	.+38     	; 0x2080 <main+0x382>
				{
				 case 1:			//print binary debug msg
					put_char(y);
				 break;
				 case 2:			//print ASCII debug msg
					rprintf("Entered Command %d\n",y);
    205a:	00 d0       	rcall	.+0      	; 0x205c <main+0x35e>
    205c:	00 d0       	rcall	.+0      	; 0x205e <main+0x360>
    205e:	ed b7       	in	r30, 0x3d	; 61
    2060:	fe b7       	in	r31, 0x3e	; 62
    2062:	31 96       	adiw	r30, 0x01	; 1
    2064:	ad b7       	in	r26, 0x3d	; 61
    2066:	be b7       	in	r27, 0x3e	; 62
    2068:	12 96       	adiw	r26, 0x02	; 2
    206a:	9c 92       	st	X, r9
    206c:	8e 92       	st	-X, r8
    206e:	11 97       	sbiw	r26, 0x01	; 1
    2070:	82 83       	std	Z+2, r24	; 0x02
    2072:	13 82       	std	Z+3, r1	; 0x03
    2074:	0e 94 7e 13 	call	0x26fc	; 0x26fc <rprintf>
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
				 break;
				 default:
				 break;
				}
	
				switch(y)				//switch to which command was sent
    2080:	e1 2f       	mov	r30, r17
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	e2 32       	cpi	r30, 0x22	; 34
    2086:	f1 05       	cpc	r31, r1
    2088:	98 f4       	brcc	.+38     	; 0x20b0 <main+0x3b2>
    208a:	ec 5c       	subi	r30, 0xCC	; 204
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	ee 0f       	add	r30, r30
    2090:	ff 1f       	adc	r31, r31
    2092:	05 90       	lpm	r0, Z+
    2094:	f4 91       	lpm	r31, Z+
    2096:	e0 2d       	mov	r30, r0
    2098:	09 94       	ijmp
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    209a:	80 91 c0 00 	lds	r24, 0x00C0
    209e:	85 ff       	sbrs	r24, 5
    20a0:	fc cf       	rjmp	.-8      	; 0x209a <main+0x39c>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    20a2:	10 93 c6 00 	sts	0x00C6, r17
				 break;
				 default:
				 break;
				}
	
				switch(y)				//switch to which command was sent
    20a6:	e1 2f       	mov	r30, r17
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	e2 32       	cpi	r30, 0x22	; 34
    20ac:	f1 05       	cpc	r31, r1
    20ae:	68 f3       	brcs	.-38     	; 0x208a <main+0x38c>
    20b0:	20 91 56 02 	lds	r18, 0x0256
					set_page(y);
				 break;	
				//************************************************************************************************************
				}//end switch for which command	

				switch (debug_msg)
    20b4:	21 30       	cpi	r18, 0x01	; 1
    20b6:	c9 f0       	breq	.+50     	; 0x20ea <main+0x3ec>
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	09 f0       	breq	.+2      	; 0x20be <main+0x3c0>
    20bc:	7f cf       	rjmp	.-258    	; 0x1fbc <main+0x2be>
				{
				 case 1:	//print binary debug msg
					put_char(0);
				 break;
				 case 2:	//print ASCII debug msg
					rprintf("Exited Command, RX_buffer=%d\n\n",RX_bytes);
    20be:	80 91 53 02 	lds	r24, 0x0253
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <main+0x3c6>
    20c4:	00 d0       	rcall	.+0      	; 0x20c6 <main+0x3c8>
    20c6:	ed b7       	in	r30, 0x3d	; 61
    20c8:	fe b7       	in	r31, 0x3e	; 62
    20ca:	31 96       	adiw	r30, 0x01	; 1
    20cc:	ad b7       	in	r26, 0x3d	; 61
    20ce:	be b7       	in	r27, 0x3e	; 62
    20d0:	12 96       	adiw	r26, 0x02	; 2
    20d2:	7c 92       	st	X, r7
    20d4:	6e 92       	st	-X, r6
    20d6:	11 97       	sbiw	r26, 0x01	; 1
    20d8:	82 83       	std	Z+2, r24	; 0x02
    20da:	13 82       	std	Z+3, r1	; 0x03
    20dc:	0e 94 7e 13 	call	0x26fc	; 0x26fc <rprintf>
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	69 cf       	rjmp	.-302    	; 0x1fbc <main+0x2be>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    20ea:	80 91 c0 00 	lds	r24, 0x00C0
    20ee:	85 ff       	sbrs	r24, 5
    20f0:	fc cf       	rjmp	.-8      	; 0x20ea <main+0x3ec>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    20f2:	10 92 c6 00 	sts	0x00C6, r1
    20f6:	62 cf       	rjmp	.-316    	; 0x1fbc <main+0x2be>
					write_command_LCD(y,z);			//write command
				 break;	
				//************************************************************************************************************
				 case 27:		//write data
							//wait for byte(data)
					y = RX_get_byte();		
    20f8:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    20fc:	18 2f       	mov	r17, r24
							

							//wait for byte(chip # {1,2,3})
					z = RX_get_byte();	
    20fe:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2102:	68 2f       	mov	r22, r24
							

					write_data_LCD(y,z);			//write data
    2104:	81 2f       	mov	r24, r17
    2106:	0e 94 45 06 	call	0xc8a	; 0xc8a <write_data_LCD>
	
				//************************************************************************************************************
				 case 28:		//write block
							//wait for byte(x)
					y = RX_get_byte();		
    210a:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    210e:	d8 2e       	mov	r13, r24
							

							//wait for byte(page)
					z = RX_get_byte();		
    2110:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2114:	e8 2e       	mov	r14, r24
							

							//wait for byte(length)
					temp = RX_get_byte();		
    2116:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    211a:	f8 2e       	mov	r15, r24
    211c:	20 e8       	ldi	r18, 0x80	; 128
    211e:	28 17       	cp	r18, r24
    2120:	08 f0       	brcs	.+2      	; 0x2124 <main+0x426>
    2122:	90 c2       	rjmp	.+1312   	; 0x2644 <main+0x946>
    2124:	80 e8       	ldi	r24, 0x80	; 128
    2126:	f8 2e       	mov	r15, r24
					
					//coerce length, there are only 128 pixels across the whole screen
					if (temp>128)
						temp=128;

					for(q=0;q<temp;q++)
    2128:	00 e0       	ldi	r16, 0x00	; 0
    212a:	10 e0       	ldi	r17, 0x00	; 0
					{
								//wait for byte(data)
						buffer[q] = RX_get_byte();	//store data	
    212c:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2130:	f8 01       	movw	r30, r16
    2132:	e4 59       	subi	r30, 0x94	; 148
    2134:	fc 4f       	sbci	r31, 0xFC	; 252
    2136:	80 83       	st	Z, r24
    2138:	0f 5f       	subi	r16, 0xFF	; 255
    213a:	1f 4f       	sbci	r17, 0xFF	; 255
					
					//coerce length, there are only 128 pixels across the whole screen
					if (temp>128)
						temp=128;

					for(q=0;q<temp;q++)
    213c:	0f 15       	cp	r16, r15
    213e:	b0 f3       	brcs	.-20     	; 0x212c <main+0x42e>
					{
								//wait for byte(data)
						buffer[q] = RX_get_byte();	//store data	
								
					}
					write_block(y,z,temp,buffer);			//do block write
    2140:	8d 2d       	mov	r24, r13
    2142:	6e 2d       	mov	r22, r14
    2144:	4f 2d       	mov	r20, r15
    2146:	2c e6       	ldi	r18, 0x6C	; 108
    2148:	33 e0       	ldi	r19, 0x03	; 3
    214a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <write_block>
    214e:	20 91 56 02 	lds	r18, 0x0256
    2152:	b0 cf       	rjmp	.-160    	; 0x20b4 <main+0x3b6>
				}
	
				switch(y)				//switch to which command was sent
				{
				 case 0:	//clear screen
					clear_screen(0);
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	0e 94 1b 08 	call	0x1036	; 0x1036 <clear_screen>
					x_offset=0;
    215a:	10 92 57 02 	sts	0x0257, r1
					y_offset=0;
    215e:	10 92 58 02 	sts	0x0258, r1
    2162:	20 91 56 02 	lds	r18, 0x0256
    2166:	a6 cf       	rjmp	.-180    	; 0x20b4 <main+0x3b6>
					write_block(y,z,temp,buffer);			//do block write
				 break;	
				//************************************************************************************************************
				 case 29:		//read data
							//wait for byte(chip # {1,2})
					y = RX_get_byte();		
    2168:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
							
					
					z = read_data_LCD(y);
    216c:	0e 94 29 07 	call	0xe52	; 0xe52 <read_data_LCD>
    2170:	98 2f       	mov	r25, r24
					if(debug_msg==2)
    2172:	20 91 56 02 	lds	r18, 0x0256
    2176:	22 30       	cpi	r18, 0x02	; 2
    2178:	09 f4       	brne	.+2      	; 0x217c <main+0x47e>
    217a:	68 c2       	rjmp	.+1232   	; 0x264c <main+0x94e>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    217c:	80 91 c0 00 	lds	r24, 0x00C0
    2180:	85 ff       	sbrs	r24, 5
    2182:	fc cf       	rjmp	.-8      	; 0x217c <main+0x47e>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    2184:	90 93 c6 00 	sts	0x00C6, r25
    2188:	95 cf       	rjmp	.-214    	; 0x20b4 <main+0x3b6>
					if (y_offset > 127) y_offset = 127;	//coerce y offset to valid range		
				 break;	
				//************************************************************************************************************
 				 case 26:		//write command
							//wait for byte(data)
					y = RX_get_byte();		
    218a:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    218e:	18 2f       	mov	r17, r24
							

							//wait for byte(chip # {1,2,3})
					z = RX_get_byte();	
    2190:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2194:	68 2f       	mov	r22, r24
							

					write_command_LCD(y,z);			//write command
    2196:	81 2f       	mov	r24, r17
    2198:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
    219c:	20 91 56 02 	lds	r18, 0x0256
    21a0:	89 cf       	rjmp	.-238    	; 0x20b4 <main+0x3b6>
					if (x_offset > 159) x_offset = 159;	//coerce x offset to valid range
				 break;
				//************************************************************************************************************
				 case 25:		//set y_offset
							//wait for byte
					y_offset = RX_get_byte();		//get new y offset
    21a2:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    21a6:	80 93 58 02 	sts	0x0258, r24
							

					if (y_offset > 127) y_offset = 127;	//coerce y offset to valid range		
    21aa:	88 23       	and	r24, r24
    21ac:	0c f0       	brlt	.+2      	; 0x21b0 <main+0x4b2>
    21ae:	80 cf       	rjmp	.-256    	; 0x20b0 <main+0x3b2>
    21b0:	40 92 58 02 	sts	0x0258, r4
    21b4:	20 91 56 02 	lds	r18, 0x0256
    21b8:	7d cf       	rjmp	.-262    	; 0x20b4 <main+0x3b6>
					
				 break;
				//************************************************************************************************************
				 case 24:		//set x_offset
							//wait for byte
					x_offset = RX_get_byte();		//get new x offset
    21ba:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    21be:	80 93 57 02 	sts	0x0257, r24
							
					if (x_offset > 159) x_offset = 159;	//coerce x offset to valid range
    21c2:	80 3a       	cpi	r24, 0xA0	; 160
    21c4:	08 f4       	brcc	.+2      	; 0x21c8 <main+0x4ca>
    21c6:	74 cf       	rjmp	.-280    	; 0x20b0 <main+0x3b2>
    21c8:	30 92 57 02 	sts	0x0257, r3
    21cc:	20 91 56 02 	lds	r18, 0x0256
    21d0:	71 cf       	rjmp	.-286    	; 0x20b4 <main+0x3b6>
					sei();
				 break;	
				//************************************************************************************************************
				 case 22:		//bitblt
						//wait for byte (x coord)
					y = RX_get_byte();	//store it and increment RX_read
    21d2:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    21d6:	f8 2e       	mov	r15, r24
 						//wrap if necessary
						
						//wait for byte (y coord)
					z = RX_get_byte();	//store it and increment RX_read
    21d8:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    21dc:	e8 2e       	mov	r14, r24
 						//wrap if necessary

						//wait for byte (mode)
					temp = RX_get_byte();	//store it and increment RX_read
    21de:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    21e2:	08 2f       	mov	r16, r24
 						//wrap if necessary

						//wait for byte (width)
					q = RX_get_byte();	//store it and increment RX_read
    21e4:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    21e8:	18 2f       	mov	r17, r24
 						//wrap if necessary
					
						//wait for byte (height)
					p = RX_get_byte();	//store it and increment RX_read
    21ea:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    21ee:	28 2f       	mov	r18, r24
 						//wrap if necessary

					bitblt(y, z, q, p, temp, NULL);	//calling bitblt with a NULL pointer tells it to take data from the serial port
    21f0:	8f 2d       	mov	r24, r15
    21f2:	6e 2d       	mov	r22, r14
    21f4:	41 2f       	mov	r20, r17
    21f6:	ee 24       	eor	r14, r14
    21f8:	ff 24       	eor	r15, r15
    21fa:	0e 94 83 08 	call	0x1106	; 0x1106 <bitblt>
    21fe:	20 91 56 02 	lds	r18, 0x0256
    2202:	58 cf       	rjmp	.-336    	; 0x20b4 <main+0x3b6>
					EEPROM_write((unsigned int) REV, reverse);
					sei();
				 break;	
				//************************************************************************************************************
				 case 21:	//toggle splash
					splash_screen ^= 1;
    2204:	60 91 3c 01 	lds	r22, 0x013C
    2208:	62 25       	eor	r22, r2
    220a:	60 93 3c 01 	sts	0x013C, r22
					cli();
    220e:	f8 94       	cli
					EEPROM_write((unsigned int) SPLASH, splash_screen);
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
					sei();
    2218:	78 94       	sei
    221a:	20 91 56 02 	lds	r18, 0x0256
    221e:	4a cf       	rjmp	.-364    	; 0x20b4 <main+0x3b6>
					draw_block(y ,z , temp, q, p);
				 break;
				//************************************************************************************************************
				// ASCII 19 is XOFF so we can't use it for a command
				 case 20:	//reverse mode
					reverse ^= 1;
    2220:	80 91 55 02 	lds	r24, 0x0255
    2224:	82 25       	eor	r24, r2
    2226:	80 93 55 02 	sts	0x0255, r24
					clear_screen(1);
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	0e 94 1b 08 	call	0x1036	; 0x1036 <clear_screen>
					cli();
    2230:	f8 94       	cli
					EEPROM_write((unsigned int) REV, reverse);
    2232:	83 e0       	ldi	r24, 0x03	; 3
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	60 91 55 02 	lds	r22, 0x0255
    223a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
					sei();
    223e:	78 94       	sei
    2240:	20 91 56 02 	lds	r18, 0x0256
    2244:	37 cf       	rjmp	.-402    	; 0x20b4 <main+0x3b6>
				// ASCII 17 is XON so we can't use it for a command
				 case 18:	//draw filled box
					//need 5 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of corner1)
					y = RX_get_byte();	//store it and increment RX_read
    2246:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    224a:	18 2f       	mov	r17, r24
 						//wrap if necessary
						
						//wait for byte (y coord of corner1)
					z = RX_get_byte();	//store it and increment RX_read
    224c:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2250:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of corner2)
					temp = RX_get_byte();	//store it and increment RX_read
    2252:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2256:	e8 2e       	mov	r14, r24
 						//wrap if necessary

						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
    2258:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    225c:	d8 2e       	mov	r13, r24
 						//wrap if necessary
					
						//wait for byte (fill)
					p = RX_get_byte();	//store it and increment RX_read
    225e:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2262:	08 2f       	mov	r16, r24
 						//wrap if necessary


					draw_block(y ,z , temp, q, p);
    2264:	81 2f       	mov	r24, r17
    2266:	6f 2d       	mov	r22, r15
    2268:	4e 2d       	mov	r20, r14
    226a:	2d 2d       	mov	r18, r13
    226c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <draw_block>
    2270:	20 91 56 02 	lds	r18, 0x0256
    2274:	1f cf       	rjmp	.-450    	; 0x20b4 <main+0x3b6>
				//************************************************************************************************************
				 case 16:		//set pixel
					//need 3 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of pixel)
					z = RX_get_byte();	//store it and increment RX_read
    2276:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    227a:	08 2f       	mov	r16, r24
 						//wrap if necessary

						//wait for byte (y coord of pixel)d
					temp = RX_get_byte();
    227c:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2280:	18 2f       	mov	r17, r24
 					

						//wait for byte (S_R of pixel)
					q = RX_get_byte();
    2282:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
 					
					
					pixel(q, z, temp);		//draw the pixel
    2286:	60 2f       	mov	r22, r16
    2288:	41 2f       	mov	r20, r17
    228a:	0e 94 32 0b 	call	0x1664	; 0x1664 <pixel>
    228e:	20 91 56 02 	lds	r18, 0x0256
    2292:	10 cf       	rjmp	.-480    	; 0x20b4 <main+0x3b6>
				//************************************************************************************************************
 				 case 15:	//draw box
					//need 5 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of corner1)
					y = RX_get_byte();	//store it and increment RX_read
    2294:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2298:	18 2f       	mov	r17, r24
 						//wrap if necessary
						
						//wait for byte (y coord of corner1)
					z = RX_get_byte();	//store it and increment RX_read
    229a:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    229e:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of corner2)
					temp = RX_get_byte();	//store it and increment RX_read
    22a0:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    22a4:	e8 2e       	mov	r14, r24
 						//wrap if necessary

						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
    22a6:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    22aa:	d8 2e       	mov	r13, r24
 						//wrap if necessary
					p = RX_get_byte();	//store it and increment RX_read
    22ac:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    22b0:	08 2f       	mov	r16, r24

					box(y ,z , temp, q, p);
    22b2:	81 2f       	mov	r24, r17
    22b4:	6f 2d       	mov	r22, r15
    22b6:	4e 2d       	mov	r20, r14
    22b8:	2d 2d       	mov	r18, r13
    22ba:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <box>
    22be:	20 91 56 02 	lds	r18, 0x0256
    22c2:	f8 ce       	rjmp	.-528    	; 0x20b4 <main+0x3b6>
						//send sprite # first 0..(NUM_SPRITES-1), then sprite data
						//sprite format is (char) width (char) height (SPRITE_SIZE-2 char's) data
						//sprite data is in native bitblt format, ie rows of bytes representing 8-pixel high vertical stripes

										//wait for byte (sprite#)
					y = RX_get_byte();					//store it and increment RX_read
    22c4:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    22c8:	88 30       	cpi	r24, 0x08	; 8
    22ca:	08 f0       	brcs	.+2      	; 0x22ce <main+0x5d0>
    22cc:	87 e0       	ldi	r24, 0x07	; 7
    22ce:	a2 e2       	ldi	r26, 0x22	; 34
    22d0:	8a 9f       	mul	r24, r26
    22d2:	80 01       	movw	r16, r0
    22d4:	11 24       	eor	r1, r1
    22d6:	02 5c       	subi	r16, 0xC2	; 194
    22d8:	1e 4f       	sbci	r17, 0xFE	; 254
    22da:	ee 24       	eor	r14, r14
    22dc:	ff 24       	eor	r15, r15
					count = y * (uint16_t)SPRITE_SIZE;				//offset to sprite data

					 for (count2=0;count2 < (uint16_t)SPRITE_SIZE ;count2++)	//loop for sprite bytes
					 {
										//wait for byte
						sprite[count++] = RX_get_byte();			//store it and increment RX_read
    22de:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    22e2:	f8 01       	movw	r30, r16
    22e4:	81 93       	st	Z+, r24
    22e6:	8f 01       	movw	r16, r30
					
					//calculate offset to sprite		

					count = y * (uint16_t)SPRITE_SIZE;				//offset to sprite data

					 for (count2=0;count2 < (uint16_t)SPRITE_SIZE ;count2++)	//loop for sprite bytes
    22e8:	08 94       	sec
    22ea:	e1 1c       	adc	r14, r1
    22ec:	f1 1c       	adc	r15, r1
    22ee:	f2 e2       	ldi	r31, 0x22	; 34
    22f0:	ef 16       	cp	r14, r31
    22f2:	f1 04       	cpc	r15, r1
    22f4:	a1 f7       	brne	.-24     	; 0x22de <main+0x5e0>
    22f6:	dc ce       	rjmp	.-584    	; 0x20b0 <main+0x3b2>
				//************************************************************************************************************
				 case 12:	//line
					//need 5 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of start)
					y = RX_get_byte();	//store it and increment RX_read
    22f8:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    22fc:	18 2f       	mov	r17, r24
 						//wrap if necessary
						
						//wait for byte (y coord of start)
					z = RX_get_byte();	//store it and increment RX_read
    22fe:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2302:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of end)
					temp = RX_get_byte();	//store it and increment RX_read
    2304:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2308:	e8 2e       	mov	r14, r24
 						//wrap if necessary

						//wait for byte (y coord of end)
					q = RX_get_byte();	//store it and increment RX_read
    230a:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    230e:	08 2f       	mov	r16, r24
 						//wrap if necessary

						//wait for byte (S_R)
					p = RX_get_byte();	//store it and increment RX_read
    2310:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
 						//wrap if necessary

					line(p, y ,z , temp, q);
    2314:	61 2f       	mov	r22, r17
    2316:	4f 2d       	mov	r20, r15
    2318:	2e 2d       	mov	r18, r14
    231a:	0e 94 9d 0b 	call	0x173a	; 0x173a <line>
    231e:	20 91 56 02 	lds	r18, 0x0256
    2322:	c8 ce       	rjmp	.-624    	; 0x20b4 <main+0x3b6>
				 break;	
				//************************************************************************************************************
				 case 11:	//draw_sprite
						
						//wait for byte (x coord)
					y = RX_get_byte();	//store it and increment RX_read
    2324:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2328:	08 2f       	mov	r16, r24
 						//wrap if necessary
						
						//wait for byte (y coord)
					z = RX_get_byte();	//store it and increment RX_read
    232a:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    232e:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (sprite #)
					temp = RX_get_byte();	//store it and increment RX_read
    2330:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2334:	18 2f       	mov	r17, r24
 						//wrap if necessary

						//wait for byte (mode)
					q = RX_get_byte();	//store it and increment RX_read
    2336:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    233a:	28 2f       	mov	r18, r24
 						//wrap if necessary
					
					draw_sprite(y,z,temp,q);
    233c:	80 2f       	mov	r24, r16
    233e:	6f 2d       	mov	r22, r15
    2340:	41 2f       	mov	r20, r17
    2342:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <draw_sprite>
    2346:	20 91 56 02 	lds	r18, 0x0256
    234a:	b4 ce       	rjmp	.-664    	; 0x20b4 <main+0x3b6>
				 break;	
				//************************************************************************************************************
				 case 10:	//set font mode

						//wait for byte (x coord of lower left)
					y = RX_get_byte();	//store it and increment RX_read
    234c:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
 						//wrap if necessary
						
					if (y<0 || y > 7)
						y=7;
					font_mode=y;
    2350:	88 30       	cpi	r24, 0x08	; 8
    2352:	08 f0       	brcs	.+2      	; 0x2356 <main+0x658>
    2354:	87 e0       	ldi	r24, 0x07	; 7
    2356:	80 93 4e 02 	sts	0x024E, r24
    235a:	20 91 56 02 	lds	r18, 0x0256
    235e:	aa ce       	rjmp	.-684    	; 0x20b4 <main+0x3b6>
					set_x(y);
				 break;	
				//************************************************************************************************************
				 case 33:		//set page
							//wait for byte
					y = RX_get_byte();		//get new y offset
    2360:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
							
					
					set_page(y);
    2364:	88 6b       	ori	r24, 0xB8	; 184
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
    236c:	a1 ce       	rjmp	.-702    	; 0x20b0 <main+0x3b2>
							put_char(buffer[z]);			
				 break;	
				//************************************************************************************************************
				 case 32:		//set y reg
							//wait for byte
					y = RX_get_byte();		//get new y offset
    236e:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
							
					
					set_x(y);
    2372:	80 64       	ori	r24, 0x40	; 64
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	0e 94 12 06 	call	0xc24	; 0xc24 <write_command_LCD>
    237a:	20 91 56 02 	lds	r18, 0x0256
    237e:	9a ce       	rjmp	.-716    	; 0x20b4 <main+0x3b6>
						put_char(temp);
				 break;	
				//************************************************************************************************************
				 case 31:		//read block
							//wait for byte(x)
					y = RX_get_byte();		
    2380:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2384:	f8 2e       	mov	r15, r24
							

							//wait for byte(page)
					z = RX_get_byte();		
    2386:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    238a:	08 2f       	mov	r16, r24
							

							//wait for byte(length)
					temp = RX_get_byte();		
    238c:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2390:	18 2f       	mov	r17, r24
    2392:	81 38       	cpi	r24, 0x81	; 129
    2394:	08 f0       	brcs	.+2      	; 0x2398 <main+0x69a>
    2396:	10 e8       	ldi	r17, 0x80	; 128
					
					//coerce length
					if (temp>128)
						temp=128;

					read_block(y,z,temp,buffer);		//do block read
    2398:	8f 2d       	mov	r24, r15
    239a:	60 2f       	mov	r22, r16
    239c:	41 2f       	mov	r20, r17
    239e:	2c e6       	ldi	r18, 0x6C	; 108
    23a0:	33 e0       	ldi	r19, 0x03	; 3
    23a2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <read_block>
					
					for(z=0;z<temp;z++)
    23a6:	11 23       	and	r17, r17
    23a8:	09 f4       	brne	.+2      	; 0x23ac <main+0x6ae>
    23aa:	82 ce       	rjmp	.-764    	; 0x20b0 <main+0x3b2>
    23ac:	0c e6       	ldi	r16, 0x6C	; 108
    23ae:	e0 2e       	mov	r14, r16
    23b0:	03 e0       	ldi	r16, 0x03	; 3
    23b2:	f0 2e       	mov	r15, r16
    23b4:	20 91 56 02 	lds	r18, 0x0256
    23b8:	11 50       	subi	r17, 0x01	; 1
    23ba:	01 2f       	mov	r16, r17
    23bc:	10 e0       	ldi	r17, 0x00	; 0
    23be:	03 59       	subi	r16, 0x93	; 147
    23c0:	1c 4f       	sbci	r17, 0xFC	; 252
						if(debug_msg==2)
    23c2:	22 30       	cpi	r18, 0x02	; 2
    23c4:	89 f0       	breq	.+34     	; 0x23e8 <main+0x6ea>
							rprintf("0x%.2x\n",buffer[z]);
						else
							put_char(buffer[z]);			
    23c6:	f7 01       	movw	r30, r14
    23c8:	90 81       	ld	r25, Z
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    23ca:	80 91 c0 00 	lds	r24, 0x00C0
    23ce:	85 ff       	sbrs	r24, 5
    23d0:	fc cf       	rjmp	.-8      	; 0x23ca <main+0x6cc>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    23d2:	90 93 c6 00 	sts	0x00C6, r25
    23d6:	08 94       	sec
    23d8:	e1 1c       	adc	r14, r1
    23da:	f1 1c       	adc	r15, r1
					if (temp>128)
						temp=128;

					read_block(y,z,temp,buffer);		//do block read
					
					for(z=0;z<temp;z++)
    23dc:	e0 16       	cp	r14, r16
    23de:	f1 06       	cpc	r15, r17
    23e0:	09 f4       	brne	.+2      	; 0x23e4 <main+0x6e6>
    23e2:	68 ce       	rjmp	.-816    	; 0x20b4 <main+0x3b6>
						if(debug_msg==2)
    23e4:	22 30       	cpi	r18, 0x02	; 2
    23e6:	79 f7       	brne	.-34     	; 0x23c6 <main+0x6c8>
							rprintf("0x%.2x\n",buffer[z]);
    23e8:	00 d0       	rcall	.+0      	; 0x23ea <main+0x6ec>
    23ea:	00 d0       	rcall	.+0      	; 0x23ec <main+0x6ee>
    23ec:	ed b7       	in	r30, 0x3d	; 61
    23ee:	fe b7       	in	r31, 0x3e	; 62
    23f0:	31 96       	adiw	r30, 0x01	; 1
    23f2:	ad b7       	in	r26, 0x3d	; 61
    23f4:	be b7       	in	r27, 0x3e	; 62
    23f6:	12 96       	adiw	r26, 0x02	; 2
    23f8:	bc 92       	st	X, r11
    23fa:	ae 92       	st	-X, r10
    23fc:	11 97       	sbiw	r26, 0x01	; 1
    23fe:	d7 01       	movw	r26, r14
    2400:	8c 91       	ld	r24, X
    2402:	82 83       	std	Z+2, r24	; 0x02
    2404:	13 82       	std	Z+3, r1	; 0x03
    2406:	0e 94 7e 13 	call	0x26fc	; 0x26fc <rprintf>
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	0f 90       	pop	r0
    2412:	20 91 56 02 	lds	r18, 0x0256
    2416:	df cf       	rjmp	.-66     	; 0x23d6 <main+0x6d8>
						put_char(z);
				 break;	
				//************************************************************************************************************
				 case 30:		//read byte
							//wait for byte(x)
					y = RX_get_byte();		
    2418:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    241c:	18 2f       	mov	r17, r24
							
					
							//wait for byte(side)
					z = RX_get_byte();		
    241e:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2422:	68 2f       	mov	r22, r24
							
			
					temp= read_byte(y,z);
    2424:	81 2f       	mov	r24, r17
    2426:	0e 94 27 0b 	call	0x164e	; 0x164e <read_byte>
    242a:	98 2f       	mov	r25, r24
					
					if(debug_msg==2)
    242c:	20 91 56 02 	lds	r18, 0x0256
    2430:	22 30       	cpi	r18, 0x02	; 2
    2432:	09 f4       	brne	.+2      	; 0x2436 <main+0x738>
    2434:	0b c1       	rjmp	.+534    	; 0x264c <main+0x94e>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2436:	80 91 c0 00 	lds	r24, 0x00C0
    243a:	85 ff       	sbrs	r24, 5
    243c:	fc cf       	rjmp	.-8      	; 0x2436 <main+0x738>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    243e:	90 93 c6 00 	sts	0x00C6, r25
    2442:	38 ce       	rjmp	.-912    	; 0x20b4 <main+0x3b6>
					sei();
				 break;	
				//************************************************************************************************************
				 case 8:	//toggle aux font
				
					if (aux_font==1)	//if using aux font, set back to default
    2444:	80 91 59 02 	lds	r24, 0x0259
    2448:	81 30       	cpi	r24, 0x01	; 1
    244a:	09 f4       	brne	.+2      	; 0x244e <main+0x750>
    244c:	18 c1       	rjmp	.+560    	; 0x267e <main+0x980>
							font_bytes++;	//partial rows count too
						font_bytes *= font_w;	//need font_w stacks of rows	
					}
					else			//if using default font, set to aux
					{
						aux_font=1;
    244e:	20 92 59 02 	sts	0x0259, r2
						font_w = pgm_read_byte(&aux_text_array[0]);	
    2452:	a9 81       	ldd	r26, Y+1	; 0x01
    2454:	a0 93 6b 03 	sts	0x036B, r26
						font_h = pgm_read_byte(&aux_text_array[1]);	
    2458:	ba 81       	ldd	r27, Y+2	; 0x02
    245a:	b0 93 6a 02 	sts	0x026A, r27
						font_space = pgm_read_byte(&aux_text_array[2]);
    245e:	eb 81       	ldd	r30, Y+3	; 0x03
    2460:	e0 93 6c 04 	sts	0x046C, r30
						font_bytes = font_h/8;	//8 pixels/byte
    2464:	fc 81       	ldd	r31, Y+4	; 0x04
    2466:	f0 93 69 02 	sts	0x0269, r31
						if (font_h % 8 != 0)
    246a:	8d 81       	ldd	r24, Y+5	; 0x05
    246c:	9e 81       	ldd	r25, Y+6	; 0x06
    246e:	89 2b       	or	r24, r25
    2470:	19 f0       	breq	.+6      	; 0x2478 <main+0x77a>
							font_bytes++;	//partial rows count too
    2472:	9f 81       	ldd	r25, Y+7	; 0x07
    2474:	90 93 69 02 	sts	0x0269, r25
						font_bytes *= font_w;	//need font_w stacks of rows	
    2478:	80 91 69 02 	lds	r24, 0x0269
    247c:	90 91 6b 03 	lds	r25, 0x036B
    2480:	89 9f       	mul	r24, r25
    2482:	80 2d       	mov	r24, r0
    2484:	11 24       	eor	r1, r1
    2486:	80 93 69 02 	sts	0x0269, r24
    248a:	20 91 56 02 	lds	r18, 0x0256
    248e:	12 ce       	rjmp	.-988    	; 0x20b4 <main+0x3b6>
					LCD_reset();
				 break;	
				//************************************************************************************************************
				 case 7:	//change baud rate

					y = RX_get_byte();	//store it and increment RX_read
    2490:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2494:	98 2f       	mov	r25, r24
										
					if ((y > 0) && (y < 7)) baud_rate = y;
    2496:	81 50       	subi	r24, 0x01	; 1
    2498:	86 30       	cpi	r24, 0x06	; 6
    249a:	10 f4       	brcc	.+4      	; 0x24a0 <main+0x7a2>
    249c:	90 93 3b 01 	sts	0x013B, r25

					
					set_baud(baud_rate);
    24a0:	80 91 3b 01 	lds	r24, 0x013B
    24a4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <set_baud>
					
					cli();
    24a8:	f8 94       	cli
					EEPROM_write((unsigned int) BPS, baud_rate);
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	60 91 3b 01 	lds	r22, 0x013B
    24b2:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
					sei();
    24b6:	78 94       	sei
    24b8:	20 91 56 02 	lds	r18, 0x0256
    24bc:	fb cd       	rjmp	.-1034   	; 0x20b4 <main+0x3b6>
						p=0xff;
					draw_block(y ,z , temp, q, p);
				 break;
				//************************************************************************************************************
				 case 6:	//LCD reset
					LCD_reset();
    24be:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <LCD_reset>
    24c2:	20 91 56 02 	lds	r18, 0x0256
    24c6:	f6 cd       	rjmp	.-1044   	; 0x20b4 <main+0x3b6>
				//************************************************************************************************************
				 case 5:	//erase block
					//need 4 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of corner1)
					y = RX_get_byte();	//store it and increment RX_read
    24c8:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    24cc:	e8 2e       	mov	r14, r24
 						//wrap if necessary
						
						//wait for byte (y coord of corner1)
					z = RX_get_byte();	//store it and increment RX_read
    24ce:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    24d2:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of corner2)
					temp = RX_get_byte();	//store it and increment RX_read
    24d4:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    24d8:	18 2f       	mov	r17, r24
 						//wrap if necessary

						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
    24da:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    24de:	28 2f       	mov	r18, r24
 						//wrap if necessary

					p=0;				//do erase by drawing a block filled with 0x00
					if (reverse==1)			//if display is reversed, draw a block filled with 0xFF
    24e0:	80 91 55 02 	lds	r24, 0x0255
    24e4:	81 30       	cpi	r24, 0x01	; 1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <main+0x7ec>
    24e8:	e1 c0       	rjmp	.+450    	; 0x26ac <main+0x9ae>
    24ea:	00 e0       	ldi	r16, 0x00	; 0
						p=0xff;
					draw_block(y ,z , temp, q, p);
    24ec:	8e 2d       	mov	r24, r14
    24ee:	6f 2d       	mov	r22, r15
    24f0:	41 2f       	mov	r20, r17
    24f2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <draw_block>
    24f6:	20 91 56 02 	lds	r18, 0x0256
    24fa:	dc cd       	rjmp	.-1096   	; 0x20b4 <main+0x3b6>

					circle(q, y, z, temp);
				 break;
				//************************************************************************************************************
				 case 4:	//toggles CR_LF
					if (CR_LF==1)
    24fc:	80 91 4f 02 	lds	r24, 0x024F
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	09 f4       	brne	.+2      	; 0x2506 <main+0x808>
    2504:	b9 c0       	rjmp	.+370    	; 0x2678 <main+0x97a>
						CR_LF=0;
					else
						CR_LF=1;
    2506:	20 92 4f 02 	sts	0x024F, r2
					cli();
    250a:	f8 94       	cli
					EEPROM_write((unsigned int) CRLF, CR_LF);
    250c:	85 e0       	ldi	r24, 0x05	; 5
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	60 91 4f 02 	lds	r22, 0x024F
    2514:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
					sei();
    2518:	78 94       	sei
    251a:	20 91 56 02 	lds	r18, 0x0256
    251e:	ca cd       	rjmp	.-1132   	; 0x20b4 <main+0x3b6>
					
				 break;	
				//************************************************************************************************************			
				 case 2:	//set backlight duty cycle
					//wait for byte
					BL_dutycycle = RX_get_byte();		//get char from buffer
    2520:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2524:	80 93 3d 01 	sts	0x013D, r24
					
					set_backlight(BL_dutycycle);
    2528:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <set_backlight>
					
					cli();
    252c:	f8 94       	cli
					EEPROM_write((unsigned int) BACKLIGHT, BL_dutycycle);
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	60 91 3d 01 	lds	r22, 0x013D
    2536:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
					sei();
    253a:	78 94       	sei
    253c:	20 91 56 02 	lds	r18, 0x0256
    2540:	b9 cd       	rjmp	.-1166   	; 0x20b4 <main+0x3b6>
				//************************************************************************************************************
				 case 3:	//draw circle
					//need 4 bytes, RX_read already pointing at the first
				
						//wait for byte (x coord of circle)
					y = RX_get_byte();	//get char from buffer
    2542:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2546:	18 2f       	mov	r17, r24
						
						//wait for byte (y coord of circle)
					z = RX_get_byte();	//get char from buffer
    2548:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    254c:	08 2f       	mov	r16, r24

						//wait for byte (r of circle)
					temp = RX_get_byte();	//store it and increment RX_read
    254e:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2552:	f8 2e       	mov	r15, r24
 				
						//wait for byte (S_R of circle)
					q = RX_get_byte();	//store it and increment RX_read
    2554:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>

					circle(q, y, z, temp);
    2558:	61 2f       	mov	r22, r17
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	40 2f       	mov	r20, r16
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	2f 2d       	mov	r18, r15
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	0e 94 4c 0c 	call	0x1898	; 0x1898 <circle>
    2568:	20 91 56 02 	lds	r18, 0x0256
    256c:	a3 cd       	rjmp	.-1210   	; 0x20b4 <main+0x3b6>
					y_offset=0;
				 break;	
				//************************************************************************************************************
				 case 1:	//set debug level
								
					debug_msg = RX_get_byte();		//get char from buffer
    256e:	0e 94 c0 05 	call	0xb80	; 0xb80 <RX_get_byte>
    2572:	80 93 56 02 	sts	0x0256, r24

					if (debug_msg >2) debug_msg=2;
    2576:	83 30       	cpi	r24, 0x03	; 3
    2578:	18 f0       	brcs	.+6      	; 0x2580 <main+0x882>
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	80 93 56 02 	sts	0x0256, r24
					cli();
    2580:	f8 94       	cli
					EEPROM_write((unsigned int) DEBUG, debug_msg);
    2582:	84 e0       	ldi	r24, 0x04	; 4
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	60 91 56 02 	lds	r22, 0x0256
    258a:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <EEPROM_write>
					sei();
    258e:	78 94       	sei
    2590:	20 91 56 02 	lds	r18, 0x0256
    2594:	8f cd       	rjmp	.-1250   	; 0x20b4 <main+0x3b6>
					put_char(x);	//if ASCII debug, echo characters typed
			 break;
			
			 case 13:			//CR, reset to start of row

				x_offset = x_offset % (font_w+font_space);
    2596:	80 91 6c 04 	lds	r24, 0x046C
    259a:	60 91 6b 03 	lds	r22, 0x036B
    259e:	70 e0       	ldi	r23, 0x00	; 0
    25a0:	68 0f       	add	r22, r24
    25a2:	71 1d       	adc	r23, r1
    25a4:	80 91 57 02 	lds	r24, 0x0257
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <__divmodhi4>
    25ae:	80 93 57 02 	sts	0x0257, r24
				if (debug_msg==2)	
    25b2:	90 91 56 02 	lds	r25, 0x0256
    25b6:	92 30       	cpi	r25, 0x02	; 2
    25b8:	01 f1       	breq	.+64     	; 0x25fa <main+0x8fc>
					put_char(x);	//if ASCII debug, echo characters typed

				if (CR_LF==1)
    25ba:	80 91 4f 02 	lds	r24, 0x024F
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <main+0x8c6>
    25c2:	fc cc       	rjmp	.-1544   	; 0x1fbc <main+0x2be>
				{
					if (debug_msg==2)	
    25c4:	92 30       	cpi	r25, 0x02	; 2
    25c6:	01 f1       	breq	.+64     	; 0x2608 <main+0x90a>
						put_char(0x0A);	//if ASCII debug, echo LF as well

					if (y_offset > (64-font_h-font_h))
    25c8:	70 91 58 02 	lds	r23, 0x0258
    25cc:	60 91 6a 02 	lds	r22, 0x026A
    25d0:	86 2f       	mov	r24, r22
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	47 2f       	mov	r20, r23
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	22 27       	eor	r18, r18
    25da:	33 27       	eor	r19, r19
    25dc:	28 1b       	sub	r18, r24
    25de:	39 0b       	sbc	r19, r25
    25e0:	28 1b       	sub	r18, r24
    25e2:	39 0b       	sbc	r19, r25
    25e4:	20 5c       	subi	r18, 0xC0	; 192
    25e6:	3f 4f       	sbci	r19, 0xFF	; 255
    25e8:	24 17       	cp	r18, r20
    25ea:	35 07       	cpc	r19, r21
    25ec:	3c f5       	brge	.+78     	; 0x263c <main+0x93e>
						y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
    25ee:	87 2f       	mov	r24, r23
    25f0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__udivmodqi4>
    25f4:	90 93 58 02 	sts	0x0258, r25
    25f8:	e1 cc       	rjmp	.-1598   	; 0x1fbc <main+0x2be>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    25fa:	80 91 c0 00 	lds	r24, 0x00C0
    25fe:	85 ff       	sbrs	r24, 5
    2600:	fc cf       	rjmp	.-8      	; 0x25fa <main+0x8fc>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    2602:	c0 92 c6 00 	sts	0x00C6, r12
    2606:	d9 cf       	rjmp	.-78     	; 0x25ba <main+0x8bc>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2608:	80 91 c0 00 	lds	r24, 0x00C0
    260c:	85 ff       	sbrs	r24, 5
    260e:	fc cf       	rjmp	.-8      	; 0x2608 <main+0x90a>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    2610:	50 92 c6 00 	sts	0x00C6, r5
    2614:	d9 cf       	rjmp	.-78     	; 0x25c8 <main+0x8ca>
	{
			x = RX_get_byte();	
			switch(x)		//switch based on received character
			{
			 case 8:			//backspace
				del_char();
    2616:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <del_char>
				if (debug_msg==2)
    261a:	80 91 56 02 	lds	r24, 0x0256
    261e:	82 30       	cpi	r24, 0x02	; 2
    2620:	09 f0       	breq	.+2      	; 0x2624 <main+0x926>
    2622:	cc cc       	rjmp	.-1640   	; 0x1fbc <main+0x2be>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2624:	80 91 c0 00 	lds	r24, 0x00C0
    2628:	85 ff       	sbrs	r24, 5
    262a:	fc cf       	rjmp	.-8      	; 0x2624 <main+0x926>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    262c:	88 e0       	ldi	r24, 0x08	; 8
    262e:	80 93 c6 00 	sts	0x00C6, r24
    2632:	c4 cc       	rjmp	.-1656   	; 0x1fbc <main+0x2be>
			 case 10:			//LF move to next row

				if (y_offset > (64-font_h-font_h))
					y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
				else 
					y_offset += font_h;
    2634:	67 0f       	add	r22, r23
    2636:	60 93 58 02 	sts	0x0258, r22
    263a:	ef cc       	rjmp	.-1570   	; 0x201a <main+0x31c>
						put_char(0x0A);	//if ASCII debug, echo LF as well

					if (y_offset > (64-font_h-font_h))
						y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
					else 
						y_offset += font_h;
    263c:	67 0f       	add	r22, r23
    263e:	60 93 58 02 	sts	0x0258, r22
    2642:	bc cc       	rjmp	.-1672   	; 0x1fbc <main+0x2be>
					
					//coerce length, there are only 128 pixels across the whole screen
					if (temp>128)
						temp=128;

					for(q=0;q<temp;q++)
    2644:	88 23       	and	r24, r24
    2646:	09 f0       	breq	.+2      	; 0x264a <main+0x94c>
    2648:	6f cd       	rjmp	.-1314   	; 0x2128 <main+0x42a>
    264a:	7a cd       	rjmp	.-1292   	; 0x2140 <main+0x442>
							
			
					temp= read_byte(y,z);
					
					if(debug_msg==2)
						rprintf("0x%.2x\n",temp);
    264c:	00 d0       	rcall	.+0      	; 0x264e <main+0x950>
    264e:	00 d0       	rcall	.+0      	; 0x2650 <main+0x952>
    2650:	ed b7       	in	r30, 0x3d	; 61
    2652:	fe b7       	in	r31, 0x3e	; 62
    2654:	31 96       	adiw	r30, 0x01	; 1
    2656:	ad b7       	in	r26, 0x3d	; 61
    2658:	be b7       	in	r27, 0x3e	; 62
    265a:	12 96       	adiw	r26, 0x02	; 2
    265c:	bc 92       	st	X, r11
    265e:	ae 92       	st	-X, r10
    2660:	11 97       	sbiw	r26, 0x01	; 1
    2662:	92 83       	std	Z+2, r25	; 0x02
    2664:	13 82       	std	Z+3, r1	; 0x03
    2666:	0e 94 7e 13 	call	0x26fc	; 0x26fc <rprintf>
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	20 91 56 02 	lds	r18, 0x0256
    2676:	1e cd       	rjmp	.-1476   	; 0x20b4 <main+0x3b6>
					circle(q, y, z, temp);
				 break;
				//************************************************************************************************************
				 case 4:	//toggles CR_LF
					if (CR_LF==1)
						CR_LF=0;
    2678:	10 92 4f 02 	sts	0x024F, r1
    267c:	46 cf       	rjmp	.-372    	; 0x250a <main+0x80c>
				//************************************************************************************************************
				 case 8:	//toggle aux font
				
					if (aux_font==1)	//if using aux font, set back to default
					{
						aux_font=0;
    267e:	10 92 59 02 	sts	0x0259, r1
						font_w = pgm_read_byte(&text_array[0]);	
    2682:	b8 85       	ldd	r27, Y+8	; 0x08
    2684:	b0 93 6b 03 	sts	0x036B, r27
						font_h = pgm_read_byte(&text_array[1]);	
    2688:	e9 85       	ldd	r30, Y+9	; 0x09
    268a:	e0 93 6a 02 	sts	0x026A, r30
						font_space = pgm_read_byte(&text_array[2]);
    268e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2690:	f0 93 6c 04 	sts	0x046C, r31
						font_bytes = font_h/8;	//8 pixels/byte
    2694:	2b 85       	ldd	r18, Y+11	; 0x0b
    2696:	20 93 69 02 	sts	0x0269, r18
						if (font_h % 8 != 0)
    269a:	8c 85       	ldd	r24, Y+12	; 0x0c
    269c:	9d 85       	ldd	r25, Y+13	; 0x0d
    269e:	89 2b       	or	r24, r25
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <main+0x9a6>
    26a2:	ea ce       	rjmp	.-556    	; 0x2478 <main+0x77a>
							font_bytes++;	//partial rows count too
    26a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a6:	90 93 69 02 	sts	0x0269, r25
    26aa:	e6 ce       	rjmp	.-564    	; 0x2478 <main+0x77a>
						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
 						//wrap if necessary

					p=0;				//do erase by drawing a block filled with 0x00
					if (reverse==1)			//if display is reversed, draw a block filled with 0xFF
    26ac:	0f ef       	ldi	r16, 0xFF	; 255
    26ae:	1e cf       	rjmp	.-452    	; 0x24ec <main+0x7ee>
		EEPROM_write((unsigned int) BPS, 6);
		
		sei();//Enable Interrupts
	}
	
	else (set_baud(baud_rate));
    26b0:	80 91 3b 01 	lds	r24, 0x013B
    26b4:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <set_baud>
    26b8:	29 cc       	rjmp	.-1966   	; 0x1f0c <main+0x20e>

	
	//Logo==========================================================
	if (splash_screen == 1)
	{
		draw_sprite(56,24,0,4);	//XOR'ing the sprite works in normal and reverse modes
    26ba:	88 e3       	ldi	r24, 0x38	; 56
    26bc:	68 e1       	ldi	r22, 0x18	; 24
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	24 e0       	ldi	r18, 0x04	; 4
    26c2:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <draw_sprite>
    26c6:	ee cb       	rjmp	.-2084   	; 0x1ea4 <main+0x1a6>

000026c8 <rprintf_devopen>:

static int (*putcharfunc)(int c);

void rprintf_devopen( int(*put)(int) )
{
   putcharfunc = put;
    26c8:	90 93 68 02 	sts	0x0268, r25
    26cc:	80 93 67 02 	sts	0x0267, r24
}
    26d0:	08 95       	ret

000026d2 <myputchar>:

static void myputchar(unsigned char c)
{
    26d2:	1f 93       	push	r17
    26d4:	18 2f       	mov	r17, r24
	if(c == '\n') putcharfunc('\r');
    26d6:	8a 30       	cpi	r24, 0x0A	; 10
    26d8:	49 f0       	breq	.+18     	; 0x26ec <myputchar+0x1a>
	putcharfunc(c);
    26da:	e0 91 67 02 	lds	r30, 0x0267
    26de:	f0 91 68 02 	lds	r31, 0x0268
    26e2:	81 2f       	mov	r24, r17
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	09 95       	icall
}
    26e8:	1f 91       	pop	r17
    26ea:	08 95       	ret
   putcharfunc = put;
}

static void myputchar(unsigned char c)
{
	if(c == '\n') putcharfunc('\r');
    26ec:	e0 91 67 02 	lds	r30, 0x0267
    26f0:	f0 91 68 02 	lds	r31, 0x0268
    26f4:	8d e0       	ldi	r24, 0x0D	; 13
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	09 95       	icall
    26fa:	ef cf       	rjmp	.-34     	; 0x26da <myputchar+0x8>

000026fc <rprintf>:
	putcharfunc(c);
}

void rprintf(char const *format, ...)
{
    26fc:	2f 92       	push	r2
    26fe:	3f 92       	push	r3
    2700:	4f 92       	push	r4
    2702:	5f 92       	push	r5
    2704:	6f 92       	push	r6
    2706:	7f 92       	push	r7
    2708:	8f 92       	push	r8
    270a:	9f 92       	push	r9
    270c:	af 92       	push	r10
    270e:	bf 92       	push	r11
    2710:	cf 92       	push	r12
    2712:	df 92       	push	r13
    2714:	ef 92       	push	r14
    2716:	ff 92       	push	r15
    2718:	0f 93       	push	r16
    271a:	1f 93       	push	r17
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
    2724:	2d 97       	sbiw	r28, 0x0d	; 13
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	8e 01       	movw	r16, r28
    2732:	0e 5d       	subi	r16, 0xDE	; 222
    2734:	1f 4f       	sbci	r17, 0xFF	; 255
    2736:	f8 01       	movw	r30, r16
    2738:	21 90       	ld	r2, Z+
    273a:	31 90       	ld	r3, Z+
    273c:	8f 01       	movw	r16, r30
  unsigned char fill;
  unsigned char width;

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
    273e:	f1 01       	movw	r30, r2
    2740:	81 91       	ld	r24, Z+
    2742:	1f 01       	movw	r2, r30
    2744:	85 32       	cpi	r24, 0x25	; 37
    2746:	61 f0       	breq	.+24     	; 0x2760 <rprintf+0x64>
      if (!format_flag){va_end (ap); return;}
    2748:	88 23       	and	r24, r24
    274a:	09 f4       	brne	.+2      	; 0x274e <rprintf+0x52>
    274c:	b3 c0       	rjmp	.+358    	; 0x28b4 <rprintf+0x1b8>
      myputchar(format_flag);
    274e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <myputchar>
    2752:	28 01       	movw	r4, r16
    2754:	82 01       	movw	r16, r4
  unsigned char fill;
  unsigned char width;

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
    2756:	f1 01       	movw	r30, r2
    2758:	81 91       	ld	r24, Z+
    275a:	1f 01       	movw	r2, r30
    275c:	85 32       	cpi	r24, 0x25	; 37
    275e:	a1 f7       	brne	.-24     	; 0x2748 <rprintf+0x4c>
    }

    issigned=0; //default unsigned
    base = 10;

    format_flag = *format++; //get char after '%'
    2760:	91 91       	ld	r25, Z+
    2762:	1f 01       	movw	r2, r30

#ifdef PADDING
    width=0; //no formatting
    fill=0;  //no formatting
    if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
    2764:	90 33       	cpi	r25, 0x30	; 48
    2766:	09 f4       	brne	.+2      	; 0x276a <rprintf+0x6e>
    2768:	9a c0       	rjmp	.+308    	; 0x289e <rprintf+0x1a2>
    276a:	90 32       	cpi	r25, 0x20	; 32
    276c:	09 f4       	brne	.+2      	; 0x2770 <rprintf+0x74>
    276e:	97 c0       	rjmp	.+302    	; 0x289e <rprintf+0x1a2>
    2770:	89 2f       	mov	r24, r25
    2772:	66 24       	eor	r6, r6
    2774:	1d 86       	std	Y+13, r1	; 0x0d
#endif

#ifdef USE_LONG
    islong=0; //default int value
#ifdef USE_UPPER
    if(format_flag=='l' || format_flag=='L') //Long value 
    2776:	8c 36       	cpi	r24, 0x6C	; 108
    2778:	41 f1       	breq	.+80     	; 0x27ca <rprintf+0xce>
    277a:	8c 34       	cpi	r24, 0x4C	; 76
    277c:	31 f1       	breq	.+76     	; 0x27ca <rprintf+0xce>
    277e:	90 e0       	ldi	r25, 0x00	; 0
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    2780:	88 35       	cpi	r24, 0x58	; 88
    2782:	49 f1       	breq	.+82     	; 0x27d6 <rprintf+0xda>
    2784:	89 35       	cpi	r24, 0x59	; 89
    2786:	68 f4       	brcc	.+26     	; 0x27a2 <rprintf+0xa6>
    2788:	89 34       	cpi	r24, 0x49	; 73
    278a:	09 f4       	brne	.+2      	; 0x278e <rprintf+0x92>
    278c:	b4 c0       	rjmp	.+360    	; 0x28f6 <rprintf+0x1fa>
    278e:	8a 34       	cpi	r24, 0x4A	; 74
    2790:	08 f0       	brcs	.+2      	; 0x2794 <rprintf+0x98>
    2792:	01 c1       	rjmp	.+514    	; 0x2996 <rprintf+0x29a>
    2794:	83 34       	cpi	r24, 0x43	; 67
    2796:	71 f0       	breq	.+28     	; 0x27b4 <rprintf+0xb8>
    2798:	84 34       	cpi	r24, 0x44	; 68
    279a:	09 f4       	brne	.+2      	; 0x279e <rprintf+0xa2>
    279c:	ac c0       	rjmp	.+344    	; 0x28f6 <rprintf+0x1fa>
    279e:	28 01       	movw	r4, r16
    27a0:	10 c0       	rjmp	.+32     	; 0x27c2 <rprintf+0xc6>
    27a2:	89 36       	cpi	r24, 0x69	; 105
    27a4:	09 f4       	brne	.+2      	; 0x27a8 <rprintf+0xac>
    27a6:	a7 c0       	rjmp	.+334    	; 0x28f6 <rprintf+0x1fa>
    27a8:	8a 36       	cpi	r24, 0x6A	; 106
    27aa:	08 f0       	brcs	.+2      	; 0x27ae <rprintf+0xb2>
    27ac:	d5 c0       	rjmp	.+426    	; 0x2958 <rprintf+0x25c>
    27ae:	83 36       	cpi	r24, 0x63	; 99
    27b0:	09 f0       	breq	.+2      	; 0x27b4 <rprintf+0xb8>
    27b2:	9e c0       	rjmp	.+316    	; 0x28f0 <rprintf+0x1f4>
#ifdef USE_CHAR
    case 'c':
#ifdef USE_UPPER
    case 'C':
#endif
      format_flag = va_arg(ap,int);
    27b4:	f2 e0       	ldi	r31, 0x02	; 2
    27b6:	4f 2e       	mov	r4, r31
    27b8:	51 2c       	mov	r5, r1
    27ba:	40 0e       	add	r4, r16
    27bc:	51 1e       	adc	r5, r17
    27be:	f8 01       	movw	r30, r16
    27c0:	80 81       	ld	r24, Z
      // no break -> run into default
#endif

    default:
      myputchar(format_flag);
    27c2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <myputchar>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    27c6:	82 01       	movw	r16, r4
    27c8:	c6 cf       	rjmp	.-116    	; 0x2756 <rprintf+0x5a>
#else
    if(format_flag=='l') //Long value 
#endif
     {
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
    27ca:	f1 01       	movw	r30, r2
    27cc:	81 91       	ld	r24, Z+
    27ce:	1f 01       	movw	r2, r30
    27d0:	91 e0       	ldi	r25, 0x01	; 1
     }
#endif

    switch (format_flag)
    27d2:	88 35       	cpi	r24, 0x58	; 88
    27d4:	b9 f6       	brne	.-82     	; 0x2784 <rprintf+0x88>
    27d6:	a0 e1       	ldi	r26, 0x10	; 16
    27d8:	8a 2e       	mov	r8, r26
    27da:	91 2c       	mov	r9, r1
    27dc:	a1 2c       	mov	r10, r1
    27de:	b1 2c       	mov	r11, r1
        u_val = (unsigned long)s_val;
       }
      else //Unsigned types
       {
#ifdef USE_LONG
        if(islong) { u_val = va_arg(ap,unsigned long); }
    27e0:	99 23       	and	r25, r25
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <rprintf+0xea>
    27e4:	e5 c0       	rjmp	.+458    	; 0x29b0 <rprintf+0x2b4>
    27e6:	44 e0       	ldi	r20, 0x04	; 4
    27e8:	44 2e       	mov	r4, r20
    27ea:	51 2c       	mov	r5, r1
    27ec:	40 0e       	add	r4, r16
    27ee:	51 1e       	adc	r5, r17
    27f0:	f8 01       	movw	r30, r16
    27f2:	c0 80       	ld	r12, Z
    27f4:	d1 80       	ldd	r13, Z+1	; 0x01
    27f6:	e2 80       	ldd	r14, Z+2	; 0x02
    27f8:	f3 80       	ldd	r15, Z+3	; 0x03
        u_val = va_arg(ap,unsigned int);
#endif
       }
    
      ptr = scratch + SCRATCH;
      *--ptr = 0;
    27fa:	8e 01       	movw	r16, r28
    27fc:	04 5f       	subi	r16, 0xF4	; 244
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	1c 86       	std	Y+12, r1	; 0x0c
      do
       {
        char ch = u_val % base + '0';
    2802:	c7 01       	movw	r24, r14
    2804:	b6 01       	movw	r22, r12
    2806:	a5 01       	movw	r20, r10
    2808:	94 01       	movw	r18, r8
    280a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__udivmodsi4>
    280e:	20 e3       	ldi	r18, 0x30	; 48
    2810:	72 2e       	mov	r7, r18
    2812:	76 0e       	add	r7, r22
#ifdef USE_HEX
        if (ch > '9')
    2814:	f9 e3       	ldi	r31, 0x39	; 57
    2816:	f7 15       	cp	r31, r7
    2818:	18 f4       	brcc	.+6      	; 0x2820 <rprintf+0x124>
         {
          ch += 'a' - '9' - 1;
#ifdef USE_UPPERHEX
          ch-=0x20;
    281a:	97 e3       	ldi	r25, 0x37	; 55
    281c:	79 2e       	mov	r7, r25
    281e:	76 0e       	add	r7, r22
#endif
         }
#endif          
        *--ptr = ch;
    2820:	f8 01       	movw	r30, r16
    2822:	72 92       	st	-Z, r7
    2824:	8f 01       	movw	r16, r30
        u_val /= base;
    2826:	c7 01       	movw	r24, r14
    2828:	b6 01       	movw	r22, r12
    282a:	a5 01       	movw	r20, r10
    282c:	94 01       	movw	r18, r8
    282e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__udivmodsi4>
    2832:	c9 01       	movw	r24, r18
    2834:	da 01       	movw	r26, r20
    2836:	6c 01       	movw	r12, r24
    2838:	7d 01       	movw	r14, r26

#ifdef PADDING
        if(width) width--; //calculate number of padding chars
    283a:	fd 85       	ldd	r31, Y+13	; 0x0d
    283c:	ff 23       	and	r31, r31
    283e:	11 f0       	breq	.+4      	; 0x2844 <rprintf+0x148>
    2840:	f1 50       	subi	r31, 0x01	; 1
    2842:	fd 87       	std	Y+13, r31	; 0x0d
#endif
      } while (u_val);
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	a1 05       	cpc	r26, r1
    2848:	b1 05       	cpc	r27, r1
    284a:	d9 f6       	brne	.-74     	; 0x2802 <rprintf+0x106>
    284c:	a8 01       	movw	r20, r16

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
    284e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2850:	22 23       	and	r18, r18
    2852:	09 f4       	brne	.+2      	; 0x2856 <rprintf+0x15a>
    2854:	b9 c0       	rjmp	.+370    	; 0x29c8 <rprintf+0x2cc>
    2856:	8d 85       	ldd	r24, Y+13	; 0x0d
    2858:	81 50       	subi	r24, 0x01	; 1
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	01 50       	subi	r16, 0x01	; 1
    2860:	10 40       	sbci	r17, 0x00	; 0
    2862:	c8 01       	movw	r24, r16
    2864:	82 1b       	sub	r24, r18
    2866:	93 0b       	sbc	r25, r19
    2868:	0f 5f       	subi	r16, 0xFF	; 255
    286a:	1f 4f       	sbci	r17, 0xFF	; 255
    286c:	f8 01       	movw	r30, r16
    286e:	62 92       	st	-Z, r6
    2870:	8f 01       	movw	r16, r30
    2872:	e8 17       	cp	r30, r24
    2874:	f9 07       	cpc	r31, r25
    2876:	d1 f7       	brne	.-12     	; 0x286c <rprintf+0x170>
    2878:	89 01       	movw	r16, r18
    287a:	00 95       	com	r16
    287c:	10 95       	com	r17
    287e:	04 0f       	add	r16, r20
    2880:	15 1f       	adc	r17, r21
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    2882:	66 20       	and	r6, r6
    2884:	09 f4       	brne	.+2      	; 0x2888 <rprintf+0x18c>
    2886:	66 cf       	rjmp	.-308    	; 0x2754 <rprintf+0x58>
    2888:	86 2d       	mov	r24, r6
    288a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <myputchar>
    288e:	0f 5f       	subi	r16, 0xFF	; 255
    2890:	1f 4f       	sbci	r17, 0xFF	; 255
    2892:	f8 01       	movw	r30, r16
    2894:	60 80       	ld	r6, Z
    2896:	66 20       	and	r6, r6
    2898:	b9 f7       	brne	.-18     	; 0x2888 <rprintf+0x18c>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    289a:	82 01       	movw	r16, r4
    289c:	5c cf       	rjmp	.-328    	; 0x2756 <rprintf+0x5a>
    width=0; //no formatting
    fill=0;  //no formatting
    if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
     {
      fill=format_flag;
      format_flag = *format++; //get char after padding char
    289e:	f1 01       	movw	r30, r2
    28a0:	81 91       	ld	r24, Z+
    28a2:	1f 01       	movw	r2, r30
      if(format_flag>='0' && format_flag<='9')
    28a4:	f8 2f       	mov	r31, r24
    28a6:	f0 53       	subi	r31, 0x30	; 48
    28a8:	fd 87       	std	Y+13, r31	; 0x0d
    28aa:	fa 30       	cpi	r31, 0x0A	; 10
    28ac:	e0 f0       	brcs	.+56     	; 0x28e6 <rprintf+0x1ea>
    28ae:	69 2e       	mov	r6, r25
    28b0:	1d 86       	std	Y+13, r1	; 0x0d
    28b2:	61 cf       	rjmp	.-318    	; 0x2776 <rprintf+0x7a>
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    }
  }
}
    28b4:	2d 96       	adiw	r28, 0x0d	; 13
    28b6:	0f b6       	in	r0, 0x3f	; 63
    28b8:	f8 94       	cli
    28ba:	de bf       	out	0x3e, r29	; 62
    28bc:	0f be       	out	0x3f, r0	; 63
    28be:	cd bf       	out	0x3d, r28	; 61
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	bf 90       	pop	r11
    28d2:	af 90       	pop	r10
    28d4:	9f 90       	pop	r9
    28d6:	8f 90       	pop	r8
    28d8:	7f 90       	pop	r7
    28da:	6f 90       	pop	r6
    28dc:	5f 90       	pop	r5
    28de:	4f 90       	pop	r4
    28e0:	3f 90       	pop	r3
    28e2:	2f 90       	pop	r2
    28e4:	08 95       	ret
      fill=format_flag;
      format_flag = *format++; //get char after padding char
      if(format_flag>='0' && format_flag<='9')
       {
        width=format_flag-'0';
        format_flag = *format++; //get char after width char
    28e6:	f1 01       	movw	r30, r2
    28e8:	81 91       	ld	r24, Z+
    28ea:	1f 01       	movw	r2, r30
    28ec:	69 2e       	mov	r6, r25
    28ee:	43 cf       	rjmp	.-378    	; 0x2776 <rprintf+0x7a>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    28f0:	84 36       	cpi	r24, 0x64	; 100
    28f2:	09 f0       	breq	.+2      	; 0x28f6 <rprintf+0x1fa>
    28f4:	54 cf       	rjmp	.-344    	; 0x279e <rprintf+0xa2>
    CONVERSION_LOOP:

      if(issigned) //Signed types
       {
#ifdef USE_LONG
        if(islong) { s_val = va_arg(ap,long); }
    28f6:	99 23       	and	r25, r25
    28f8:	b9 f4       	brne	.+46     	; 0x2928 <rprintf+0x22c>
        else { s_val = va_arg(ap,int); }
    28fa:	62 e0       	ldi	r22, 0x02	; 2
    28fc:	46 2e       	mov	r4, r22
    28fe:	51 2c       	mov	r5, r1
    2900:	40 0e       	add	r4, r16
    2902:	51 1e       	adc	r5, r17
    2904:	f8 01       	movw	r30, r16
    2906:	80 81       	ld	r24, Z
    2908:	91 81       	ldd	r25, Z+1	; 0x01
    290a:	7c 01       	movw	r14, r24
    290c:	00 27       	eor	r16, r16
    290e:	f7 fc       	sbrc	r15, 7
    2910:	00 95       	com	r16
    2912:	10 2f       	mov	r17, r16
#else
        s_val = va_arg(ap,int);
#endif

        if(s_val < 0) //Value negativ ?
    2914:	17 fd       	sbrc	r17, 7
    2916:	14 c0       	rjmp	.+40     	; 0x2940 <rprintf+0x244>
         {
          s_val = - s_val; //Make it positiv
          myputchar('-');    //Output sign
         }

        u_val = (unsigned long)s_val;
    2918:	67 01       	movw	r12, r14
    291a:	78 01       	movw	r14, r16
    291c:	5a e0       	ldi	r21, 0x0A	; 10
    291e:	85 2e       	mov	r8, r21
    2920:	91 2c       	mov	r9, r1
    2922:	a1 2c       	mov	r10, r1
    2924:	b1 2c       	mov	r11, r1
    2926:	69 cf       	rjmp	.-302    	; 0x27fa <rprintf+0xfe>
    CONVERSION_LOOP:

      if(issigned) //Signed types
       {
#ifdef USE_LONG
        if(islong) { s_val = va_arg(ap,long); }
    2928:	74 e0       	ldi	r23, 0x04	; 4
    292a:	47 2e       	mov	r4, r23
    292c:	51 2c       	mov	r5, r1
    292e:	40 0e       	add	r4, r16
    2930:	51 1e       	adc	r5, r17
    2932:	f8 01       	movw	r30, r16
    2934:	e0 80       	ld	r14, Z
    2936:	f1 80       	ldd	r15, Z+1	; 0x01
    2938:	02 81       	ldd	r16, Z+2	; 0x02
    293a:	13 81       	ldd	r17, Z+3	; 0x03
        else { s_val = va_arg(ap,int); }
#else
        s_val = va_arg(ap,int);
#endif

        if(s_val < 0) //Value negativ ?
    293c:	17 ff       	sbrs	r17, 7
    293e:	ec cf       	rjmp	.-40     	; 0x2918 <rprintf+0x21c>
         {
          s_val = - s_val; //Make it positiv
    2940:	10 95       	com	r17
    2942:	00 95       	com	r16
    2944:	f0 94       	com	r15
    2946:	e0 94       	com	r14
    2948:	e1 1c       	adc	r14, r1
    294a:	f1 1c       	adc	r15, r1
    294c:	01 1d       	adc	r16, r1
    294e:	11 1d       	adc	r17, r1
          myputchar('-');    //Output sign
    2950:	8d e2       	ldi	r24, 0x2D	; 45
    2952:	0e 94 69 13 	call	0x26d2	; 0x26d2 <myputchar>
    2956:	e0 cf       	rjmp	.-64     	; 0x2918 <rprintf+0x21c>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    2958:	85 37       	cpi	r24, 0x75	; 117
    295a:	11 f1       	breq	.+68     	; 0x29a0 <rprintf+0x2a4>
    295c:	88 37       	cpi	r24, 0x78	; 120
    295e:	09 f4       	brne	.+2      	; 0x2962 <rprintf+0x266>
    2960:	3a cf       	rjmp	.-396    	; 0x27d6 <rprintf+0xda>
    2962:	83 37       	cpi	r24, 0x73	; 115
    2964:	09 f0       	breq	.+2      	; 0x2968 <rprintf+0x26c>
    2966:	1b cf       	rjmp	.-458    	; 0x279e <rprintf+0xa2>
#ifdef USE_STRING
#ifdef USE_UPPER
    case 'S':
#endif
    case 's':
      ptr = (unsigned char*)va_arg(ap,char *);
    2968:	e2 e0       	ldi	r30, 0x02	; 2
    296a:	4e 2e       	mov	r4, r30
    296c:	51 2c       	mov	r5, r1
    296e:	40 0e       	add	r4, r16
    2970:	51 1e       	adc	r5, r17
    2972:	f8 01       	movw	r30, r16
    2974:	00 81       	ld	r16, Z
    2976:	11 81       	ldd	r17, Z+1	; 0x01
      while(*ptr) { myputchar(*ptr); ptr++; }
    2978:	f8 01       	movw	r30, r16
    297a:	80 81       	ld	r24, Z
    297c:	88 23       	and	r24, r24
    297e:	09 f4       	brne	.+2      	; 0x2982 <rprintf+0x286>
    2980:	e9 ce       	rjmp	.-558    	; 0x2754 <rprintf+0x58>
    2982:	0e 94 69 13 	call	0x26d2	; 0x26d2 <myputchar>
    2986:	0f 5f       	subi	r16, 0xFF	; 255
    2988:	1f 4f       	sbci	r17, 0xFF	; 255
    298a:	f8 01       	movw	r30, r16
    298c:	80 81       	ld	r24, Z
    298e:	88 23       	and	r24, r24
    2990:	c1 f7       	brne	.-16     	; 0x2982 <rprintf+0x286>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    2992:	82 01       	movw	r16, r4
    2994:	e0 ce       	rjmp	.-576    	; 0x2756 <rprintf+0x5a>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    2996:	83 35       	cpi	r24, 0x53	; 83
    2998:	39 f3       	breq	.-50     	; 0x2968 <rprintf+0x26c>
    299a:	85 35       	cpi	r24, 0x55	; 85
    299c:	09 f0       	breq	.+2      	; 0x29a0 <rprintf+0x2a4>
    299e:	ff ce       	rjmp	.-514    	; 0x279e <rprintf+0xa2>

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    29a0:	8a e0       	ldi	r24, 0x0A	; 10
    29a2:	88 2e       	mov	r8, r24
    29a4:	91 2c       	mov	r9, r1
    29a6:	a1 2c       	mov	r10, r1
    29a8:	b1 2c       	mov	r11, r1
        u_val = (unsigned long)s_val;
       }
      else //Unsigned types
       {
#ifdef USE_LONG
        if(islong) { u_val = va_arg(ap,unsigned long); }
    29aa:	99 23       	and	r25, r25
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <rprintf+0x2b4>
    29ae:	1b cf       	rjmp	.-458    	; 0x27e6 <rprintf+0xea>
        else { u_val = va_arg(ap,unsigned int); }
    29b0:	32 e0       	ldi	r19, 0x02	; 2
    29b2:	43 2e       	mov	r4, r19
    29b4:	51 2c       	mov	r5, r1
    29b6:	40 0e       	add	r4, r16
    29b8:	51 1e       	adc	r5, r17
    29ba:	f8 01       	movw	r30, r16
    29bc:	80 81       	ld	r24, Z
    29be:	91 81       	ldd	r25, Z+1	; 0x01
    29c0:	6c 01       	movw	r12, r24
    29c2:	ee 24       	eor	r14, r14
    29c4:	ff 24       	eor	r15, r15
    29c6:	19 cf       	rjmp	.-462    	; 0x27fa <rprintf+0xfe>
        if(width) width--; //calculate number of padding chars
#endif
      } while (u_val);

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
    29c8:	67 2c       	mov	r6, r7
    29ca:	5b cf       	rjmp	.-330    	; 0x2882 <rprintf+0x186>

000029cc <__udivmodqi4>:
    29cc:	99 1b       	sub	r25, r25
    29ce:	79 e0       	ldi	r23, 0x09	; 9
    29d0:	04 c0       	rjmp	.+8      	; 0x29da <__udivmodqi4_ep>

000029d2 <__udivmodqi4_loop>:
    29d2:	99 1f       	adc	r25, r25
    29d4:	96 17       	cp	r25, r22
    29d6:	08 f0       	brcs	.+2      	; 0x29da <__udivmodqi4_ep>
    29d8:	96 1b       	sub	r25, r22

000029da <__udivmodqi4_ep>:
    29da:	88 1f       	adc	r24, r24
    29dc:	7a 95       	dec	r23
    29de:	c9 f7       	brne	.-14     	; 0x29d2 <__udivmodqi4_loop>
    29e0:	80 95       	com	r24
    29e2:	08 95       	ret

000029e4 <__divmodhi4>:
    29e4:	97 fb       	bst	r25, 7
    29e6:	09 2e       	mov	r0, r25
    29e8:	07 26       	eor	r0, r23
    29ea:	0a d0       	rcall	.+20     	; 0x2a00 <__divmodhi4_neg1>
    29ec:	77 fd       	sbrc	r23, 7
    29ee:	04 d0       	rcall	.+8      	; 0x29f8 <__divmodhi4_neg2>
    29f0:	2e d0       	rcall	.+92     	; 0x2a4e <__udivmodhi4>
    29f2:	06 d0       	rcall	.+12     	; 0x2a00 <__divmodhi4_neg1>
    29f4:	00 20       	and	r0, r0
    29f6:	1a f4       	brpl	.+6      	; 0x29fe <__divmodhi4_exit>

000029f8 <__divmodhi4_neg2>:
    29f8:	70 95       	com	r23
    29fa:	61 95       	neg	r22
    29fc:	7f 4f       	sbci	r23, 0xFF	; 255

000029fe <__divmodhi4_exit>:
    29fe:	08 95       	ret

00002a00 <__divmodhi4_neg1>:
    2a00:	f6 f7       	brtc	.-4      	; 0x29fe <__divmodhi4_exit>
    2a02:	90 95       	com	r25
    2a04:	81 95       	neg	r24
    2a06:	9f 4f       	sbci	r25, 0xFF	; 255
    2a08:	08 95       	ret

00002a0a <__udivmodsi4>:
    2a0a:	a1 e2       	ldi	r26, 0x21	; 33
    2a0c:	1a 2e       	mov	r1, r26
    2a0e:	aa 1b       	sub	r26, r26
    2a10:	bb 1b       	sub	r27, r27
    2a12:	fd 01       	movw	r30, r26
    2a14:	0d c0       	rjmp	.+26     	; 0x2a30 <__udivmodsi4_ep>

00002a16 <__udivmodsi4_loop>:
    2a16:	aa 1f       	adc	r26, r26
    2a18:	bb 1f       	adc	r27, r27
    2a1a:	ee 1f       	adc	r30, r30
    2a1c:	ff 1f       	adc	r31, r31
    2a1e:	a2 17       	cp	r26, r18
    2a20:	b3 07       	cpc	r27, r19
    2a22:	e4 07       	cpc	r30, r20
    2a24:	f5 07       	cpc	r31, r21
    2a26:	20 f0       	brcs	.+8      	; 0x2a30 <__udivmodsi4_ep>
    2a28:	a2 1b       	sub	r26, r18
    2a2a:	b3 0b       	sbc	r27, r19
    2a2c:	e4 0b       	sbc	r30, r20
    2a2e:	f5 0b       	sbc	r31, r21

00002a30 <__udivmodsi4_ep>:
    2a30:	66 1f       	adc	r22, r22
    2a32:	77 1f       	adc	r23, r23
    2a34:	88 1f       	adc	r24, r24
    2a36:	99 1f       	adc	r25, r25
    2a38:	1a 94       	dec	r1
    2a3a:	69 f7       	brne	.-38     	; 0x2a16 <__udivmodsi4_loop>
    2a3c:	60 95       	com	r22
    2a3e:	70 95       	com	r23
    2a40:	80 95       	com	r24
    2a42:	90 95       	com	r25
    2a44:	9b 01       	movw	r18, r22
    2a46:	ac 01       	movw	r20, r24
    2a48:	bd 01       	movw	r22, r26
    2a4a:	cf 01       	movw	r24, r30
    2a4c:	08 95       	ret

00002a4e <__udivmodhi4>:
    2a4e:	aa 1b       	sub	r26, r26
    2a50:	bb 1b       	sub	r27, r27
    2a52:	51 e1       	ldi	r21, 0x11	; 17
    2a54:	07 c0       	rjmp	.+14     	; 0x2a64 <__udivmodhi4_ep>

00002a56 <__udivmodhi4_loop>:
    2a56:	aa 1f       	adc	r26, r26
    2a58:	bb 1f       	adc	r27, r27
    2a5a:	a6 17       	cp	r26, r22
    2a5c:	b7 07       	cpc	r27, r23
    2a5e:	10 f0       	brcs	.+4      	; 0x2a64 <__udivmodhi4_ep>
    2a60:	a6 1b       	sub	r26, r22
    2a62:	b7 0b       	sbc	r27, r23

00002a64 <__udivmodhi4_ep>:
    2a64:	88 1f       	adc	r24, r24
    2a66:	99 1f       	adc	r25, r25
    2a68:	5a 95       	dec	r21
    2a6a:	a9 f7       	brne	.-22     	; 0x2a56 <__udivmodhi4_loop>
    2a6c:	80 95       	com	r24
    2a6e:	90 95       	com	r25
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	08 95       	ret

00002a76 <_exit>:
    2a76:	f8 94       	cli

00002a78 <__stop_program>:
    2a78:	ff cf       	rjmp	.-2      	; 0x2a78 <__stop_program>
