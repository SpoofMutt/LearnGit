
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000a66  00800100  00002a9c  00002b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  00800b66  00800b66  00003596  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  00003598  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00003c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000035c  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000017fe  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003bc  00000000  00000000  0000583a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001fc4  00000000  00000000  00005bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000240  00000000  00000000  00007bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ac  00000000  00000000  00007dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002383  00000000  00000000  000082a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  0000a62b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 05 	jmp	0xa06	; 0xa06 <__ctors_end>
       4:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
       8:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
       c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      10:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      14:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      18:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      1c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      20:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      24:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      28:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      2c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      30:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      34:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      38:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      3c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      40:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__vector_16>
      44:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      48:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      4c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      50:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_20>
      54:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      58:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      5c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      60:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      64:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      68:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      6c:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__bad_interrupt>
      70:	e6 11       	cpse	r30, r6
      72:	01 12       	cpse	r0, r17
      74:	f0 11       	cpse	r31, r0
      76:	a1 12       	cpse	r10, r17
      78:	8f 12       	cpse	r8, r31
      7a:	75 12       	cpse	r7, r21
      7c:	70 12       	cpse	r7, r16
      7e:	59 12       	cpse	r5, r25
      80:	33 12       	cpse	r3, r19
      82:	2e 10       	cpse	r2, r14
      84:	29 12       	cpse	r2, r25
      86:	15 12       	cpse	r1, r21
      88:	d0 11       	cpse	r29, r0
      8a:	b6 11       	cpse	r27, r6
      8c:	2e 10       	cpse	r2, r14
      8e:	a2 11       	cpse	r26, r2
      90:	93 11       	cpse	r25, r3
      92:	2e 10       	cpse	r2, r14
      94:	7b 11       	cpse	r23, r11
      96:	2e 10       	cpse	r2, r14
      98:	68 11       	cpse	r22, r8
      9a:	5a 11       	cpse	r21, r10
      9c:	41 11       	cpse	r20, r1
      9e:	2e 10       	cpse	r2, r14
      a0:	35 11       	cpse	r19, r5
      a2:	29 11       	cpse	r18, r9
      a4:	1d 11       	cpse	r17, r13
      a6:	52 10       	cpse	r5, r2
      a8:	5b 10       	cpse	r5, r11
      aa:	80 10       	cpse	r8, r0
      ac:	dd 10       	cpse	r13, r13
      ae:	91 10       	cpse	r9, r1
      b0:	14 11       	cpse	r17, r4
      b2:	0b 11       	cpse	r16, r11
      b4:	fc 10       	cpse	r15, r12
      b6:	f3 10       	cpse	r15, r3

000000b8 <text_array>:
      b8:	05 08 01 00 00 00 00 00 00 6f 6f 00 00 00 07 00     .........oo.....
      c8:	07 00 14 7f 14 7f 14 00 26 6b 2a 10 43 33 08 64     ........&k*.C3.d
      d8:	63 32 4d 49 36 50 00 00 07 00 00 00 1c 22 41 00     c2MI6P......."A.
      e8:	00 41 22 1c 00 11 0a 1f 0a 11 10 10 7c 10 10 00     .A".........|...
      f8:	00 a0 60 00 10 10 10 10 10 00 00 60 60 00 40 30     ..`........``.@0
     108:	08 06 01 3e 51 49 45 3e 00 42 7f 40 00 42 61 51     ...>QIE>.B.@.BaQ
     118:	49 46 22 41 49 49 36 08 0c 0a 7f 08 27 45 45 45     IF"AII6.....'EEE
     128:	39 3c 4a 49 49 30 01 61 19 07 01 36 49 49 49 36     9<JII0.a...6III6
     138:	06 49 49 29 1e 00 00 6c 6c 00 00 00 ac 6c 00 08     .II)...ll....l..
     148:	14 22 41 00 14 14 14 14 14 00 41 22 14 08 02 01     ."A.......A"....
     158:	51 09 06 3e 41 5d 5d 46 7c 12 11 12 7c 7f 49 49     Q..>A]]F|...|.II
     168:	49 36 3e 41 41 41 22 7f 41 41 41 3e 7f 49 49 49     I6>AAA".AAA>.III
     178:	41 7f 09 09 09 01 3e 41 41 51 72 7f 08 08 08 7f     A.....>AAQr.....
     188:	41 41 7f 41 41 21 41 3f 01 01 7f 08 14 22 41 7f     AA.AA!A?....."A.
     198:	40 40 40 40 7f 02 04 02 7f 7f 06 08 30 7f 3e 41     @@@@........0.>A
     1a8:	41 41 3e 7f 09 09 09 06 3e 41 41 61 7e 7f 09 19     AA>.....>AAa~...
     1b8:	29 46 26 49 49 49 32 01 01 7f 01 01 3f 40 40 40     )F&III2.....?@@@
     1c8:	3f 1f 20 40 20 1f 3f 40 30 40 3f 63 14 08 14 63     ?. @ .?@0@?c...c
     1d8:	03 04 78 04 03 61 51 49 45 43 00 00 7f 41 00 01     ..x..aQIEC...A..
     1e8:	06 08 30 40 00 00 41 7f 00 04 02 01 02 04 80 80     ..0@..A.........
     1f8:	80 80 80 01 02 04 00 00 20 54 54 54 78 7f 48 44     ........ TTTx.HD
     208:	44 38 38 44 44 44 28 38 44 44 48 7f 38 54 54 54     D88DDD(8DDH.8TTT
     218:	18 08 7e 09 01 02 18 a4 a4 a4 78 7f 08 08 08 70     ..~.......x....p
     228:	00 48 7a 40 00 40 80 80 88 7a 7f 10 10 28 44 00     .Hz@.@...z...(D.
     238:	41 7f 40 00 7c 04 38 04 78 7c 04 04 04 78 38 44     A.@.|.8.x|...x8D
     248:	44 44 38 fc 24 24 24 18 18 24 24 fc 80 7c 08 04     DD8.$$$..$$..|..
     258:	04 08 48 54 54 54 20 00 08 3c 48 20 3c 40 40 40     ..HTTT ..<H <@@@
     268:	7c 0c 30 40 30 0c 1c 60 18 60 1c 44 28 10 28 44     |.0@0..`.`.D(.(D
     278:	1c a0 a0 a0 7c 44 64 54 4c 44 00 08 36 41 41 20     ....|DdTLD..6AA 
     288:	40 ff 40 20 41 41 36 08 00 10 08 18 10 08           @.@ AA6.......

00000296 <aux_text_array>:
     296:	0a 10 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     2ae:	00 00 00 ff ff 00 00 00 00 00 00 00 00 0c 0c 00     ................
     2be:	00 00 00 00 00 0f 0f 00 00 0f 0f 00 00 00 00 00     ................
     2ce:	00 00 00 00 00 00 00 80 98 d8 fc 9f 99 f8 ff 9f     ................
     2de:	18 01 0d 0f 01 01 0f 07 01 01 00 00 38 7c 6c ff     ............8|l.
     2ee:	cc cc 80 00 00 00 06 0c 0c 3f 0c 0f 07 00 00 8e     .........?......
     2fe:	91 51 51 4e a0 a0 90 10 00 00 00 00 00 07 08 08     .QQN............
     30e:	08 07 00 00 80 ee 3f 73 e3 c3 06 c0 c0 00 03 07     ......?s........
     31e:	0e 0c 0c 0f 0f 0f 09 00 00 00 00 0f 0f 00 00 00     ................
	...
     33a:	00 00 f0 fe 0f 01 00 00 00 00 00 00 03 1f 3c 20     ..............< 
     34a:	00 00 00 00 00 01 0f fe f0 00 00 00 00 00 00 20     ............... 
     35a:	3c 1f 03 00 00 00 00 00 24 3c 18 ff 18 3c 24 00     <.......$<...<$.
	...
     376:	c0 c0 c0 f8 f8 c0 c0 c0 00 00 00 00 00 07 07 00     ................
	...
     396:	20 3e 1e 00 00 00 00 00 00 80 80 80 80 80 00 00      >..............
     3a6:	00 00 00 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     3be:	00 0e 0e 00 00 00 00 00 00 00 00 e0 f8 1e 07 01     ................
     3ce:	00 00 10 1c 0f 03 00 00 00 00 00 00 f8 fe 07 63     ...............c
     3de:	63 07 fe fc 00 00 01 07 0e 0c 0c 0e 07 03 00 00     c...............
     3ee:	00 06 03 ff ff 00 00 00 00 00 0c 0c 0c 0f 0f 0c     ................
     3fe:	0c 0c 00 00 06 03 03 83 c3 63 3e 1c 00 00 0c 0e     .........c>.....
     40e:	0f 0d 0c 0c 0c 0c 00 00 06 03 63 63 63 e3 fe 9c     ..........ccc...
     41e:	00 00 06 0c 0c 0c 0c 0c 07 07 00 00 c0 e0 b8 8c     ................
     42e:	87 ff ff 80 00 00 01 01 01 01 01 0f 0f 01 00 00     ................
     43e:	7f 3f 33 33 33 73 e3 c0 00 00 06 0c 0c 0c 0c 0e     .?333s..........
     44e:	07 03 00 00 f8 fe 67 33 33 73 e6 c0 00 00 03 07     ......g33s......
     45e:	0e 0c 0c 0e 07 03 00 00 03 03 03 83 f3 7f 1f 07     ................
     46e:	00 00 00 08 0e 07 01 00 00 00 00 00 9c fe 63 63     ..............cc
     47e:	63 63 fe 9c 00 00 07 07 0c 0c 0c 0c 07 07 00 00     cc..............
     48e:	3c 7e e7 c3 c3 67 fe fc 00 00 00 06 0c 0c 0c 0e     <~...g..........
     49e:	07 01 00 00 00 00 00 70 70 00 00 00 00 00 00 00     .......pp.......
     4ae:	00 0e 0e 00 00 00 00 00 00 00 00 70 70 00 00 00     ...........pp...
     4be:	00 00 00 00 20 3e 1e 00 00 00 00 00 c0 c0 e0 20     .... >......... 
     4ce:	30 30 10 18 00 00 00 00 01 01 03 03 02 06 00 00     00..............
     4de:	30 30 30 30 30 30 30 30 00 00 03 03 03 03 03 03     00000000........
     4ee:	03 03 00 00 18 10 30 30 20 e0 c0 c0 00 00 06 02     ......00 .......
     4fe:	03 03 01 01 00 00 00 00 06 03 c3 e3 33 3f 0e 00     ............3?..
     50e:	00 00 00 00 0d 0d 00 00 00 00 00 f0 f8 1c ce e6     ................
     51e:	66 6e fc f8 00 03 0f 1c 39 33 33 33 3b 13 00 00     fn......9333;...
     52e:	00 e0 fe 9f 9f fe e0 00 00 00 0c 0f 07 01 01 07     ................
     53e:	0f 0c 00 00 ff ff 63 63 63 63 fe 9e 00 00 0f 0f     ......cccc......
     54e:	0c 0c 0c 0c 0f 07 00 00 f8 fe 06 03 03 03 03 06     ................
     55e:	00 00 01 07 06 0c 0c 0c 0c 06 00 00 ff ff 03 03     ................
     56e:	03 06 fe f8 00 00 0f 0f 0c 0c 0c 06 07 01 00 00     ................
     57e:	ff ff 63 63 63 63 63 03 00 00 0f 0f 0c 0c 0c 0c     ..ccccc.........
     58e:	0c 0c 00 00 ff ff 63 63 63 63 63 03 00 00 0f 0f     ......ccccc.....
	...
     5a6:	f8 fe 06 03 c3 c3 c3 c6 00 00 01 07 06 0c 0c 0c     ................
     5b6:	0f 07 00 00 ff ff 60 60 60 60 ff ff 00 00 0f 0f     ......````......
     5c6:	00 00 00 00 0f 0f 00 00 00 03 03 ff ff 03 03 00     ................
     5d6:	00 00 00 0c 0c 0f 0f 0c 0c 00 00 00 00 00 00 03     ................
     5e6:	03 03 ff ff 00 00 06 0c 0c 0c 0c 0c 07 07 00 00     ................
     5f6:	ff ff 70 78 fe 87 03 01 00 00 0f 0f 00 00 01 07     ..px............
     606:	0f 0c 00 00 ff ff 00 00 00 00 00 00 00 00 0f 0f     ................
     616:	0c 0c 0c 0c 0c 0c 00 00 ff ff 1f f8 f8 1f ff ff     ................
     626:	00 00 0f 0f 00 00 00 00 0f 0f 00 00 ff ff 0f 78     ...............x
     636:	e0 00 ff ff 00 00 0f 0f 00 00 01 0f 0f 0f 00 00     ................
     646:	f8 fe 07 03 03 07 fe f8 00 00 01 07 0e 0c 0c 0e     ................
     656:	07 01 00 00 ff ff 63 63 63 63 3e 3e 00 00 0f 0f     ......cccc>>....
	...
     66e:	f8 fe 07 03 03 07 fe f8 00 00 01 07 0e 0c 0c 1e     ................
     67e:	37 03 00 00 ff ff 63 63 e3 e3 fe 1e 00 00 0f 0f     7.....cc........
     68e:	00 00 00 01 0f 0f 08 00 1c 3e 73 63 63 e3 c6 80     .........>scc...
     69e:	00 00 06 0c 0c 0c 0c 0c 07 07 00 00 03 03 03 ff     ................
     6ae:	ff 03 03 03 00 00 00 00 00 0f 0f 00 00 00 00 00     ................
     6be:	ff ff 00 00 00 00 ff ff 00 00 03 07 0e 0c 0c 0e     ................
     6ce:	07 03 00 00 03 7f fe 80 80 fe 7f 03 00 00 00 00     ................
     6de:	0f 0f 0f 0f 00 00 00 0f ff f0 00 f8 f8 00 f0 ff     ................
     6ee:	0f 00 0f 0f 0f 00 00 0f 0f 0f 00 00 01 07 9f fc     ................
     6fe:	fc 9f 07 01 00 00 08 0e 0f 01 01 0f 0e 08 00 01     ................
     70e:	07 1f 3c f0 f0 3c 1f 07 01 00 00 00 00 0f 0f 00     ..<..<..........
     71e:	00 00 00 00 03 03 c3 e3 7b 3f 0f 07 00 00 0e 0f     ........{?......
     72e:	0f 0d 0c 0c 0c 0c 00 00 00 00 ff ff 01 01 00 00     ................
     73e:	00 00 00 00 3f 3f 20 20 00 00 00 00 01 07 1c 70     ....??  .......p
     74e:	c0 00 00 00 00 00 00 00 00 00 01 07 1c 10 00 00     ................
     75e:	00 01 01 ff ff 00 00 00 00 00 00 20 20 3f 3f 00     ...........  ??.
     76e:	00 00 00 08 0c 0e 07 03 07 0e 0c 08 00 00 00 00     ................
	...
     78e:	00 80 80 80 80 80 80 80 80 80 80 00 00 00 01 03     ................
     79e:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7ae:	00 b0 98 d8 d8 d8 f8 f0 00 00 07 0f 0d 0c 0c 06     ................
     7be:	0f 0f 00 00 ff ff 30 18 18 38 f0 e0 00 00 0f 0f     ......0..8......
     7ce:	06 0c 0c 0e 07 03 00 00 e0 f0 38 18 18 18 18 30     ..........8....0
     7de:	00 00 03 07 0e 0c 0c 0c 0c 06 00 00 e0 f0 38 18     ..............8.
     7ee:	18 30 ff ff 00 00 03 07 0e 0c 0c 06 0f 0f 00 00     .0..............
     7fe:	e0 f0 d8 d8 d8 d8 f0 e0 00 00 03 07 0e 0c 0c 0c     ................
     80e:	0c 06 00 00 18 18 fe ff 1b 1b 1b 00 00 00 00 00     ................
     81e:	0f 0f 00 00 00 00 00 00 e0 f0 38 18 18 30 f8 f8     ..........8..0..
     82e:	00 00 03 37 6e 6c 6c 66 7f 3f 00 00 ff ff 30 18     ...7nllf.?....0.
     83e:	18 18 f8 f0 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
     84e:	00 18 18 fb fb 00 00 00 00 00 0c 0c 0c 0f 0f 0c     ................
     85e:	0c 0c 00 00 00 18 18 fb fb 00 00 00 00 00 60 60     ..............``
     86e:	60 7f 3f 00 00 00 00 00 ff ff c0 f0 b8 18 08 00     `.?.............
     87e:	00 00 0f 0f 00 01 03 0f 0c 08 00 00 03 03 ff ff     ................
	...
     896:	07 0f 0c 0c 0c 00 00 00 f8 f8 18 f8 f0 18 f8 f0     ................
     8a6:	00 00 0f 0f 00 0f 0f 00 0f 0f 00 00 f8 f8 30 18     ..............0.
     8b6:	18 18 f8 f0 00 00 0f 0f 00 00 00 00 0f 0f 00 00     ................
     8c6:	e0 f0 38 18 18 38 f0 e0 00 00 03 07 0e 0c 0c 0e     ..8..8..........
     8d6:	07 03 00 00 f8 f8 30 18 18 38 f0 e0 00 00 7f 7f     ......0..8......
     8e6:	06 0c 0c 0e 07 03 00 00 e0 f0 38 18 18 30 f8 f8     ..........8..0..
     8f6:	00 00 03 07 0e 0c 0c 06 7f 7f 00 00 00 f8 f8 30     ...............0
     906:	18 18 18 18 00 00 00 0f 0f 00 00 00 00 00 00 00     ................
     916:	70 f8 d8 d8 d8 d8 98 30 00 00 06 0c 0c 0c 0c 0d     p......0........
     926:	0f 07 00 00 18 18 fe fe 18 18 18 00 00 00 00 00     ................
     936:	07 0f 0c 0c 0c 00 00 00 f8 f8 00 00 00 00 f8 f8     ................
     946:	00 00 07 0f 0c 0c 0c 06 0f 0f 00 00 18 f8 f0 00     ................
     956:	00 f0 f8 18 00 00 00 00 07 0f 0f 07 00 00 00 38     ...............8
     966:	f8 80 00 e0 e0 00 80 f8 38 00 03 0f 0f 01 01 0f     ........8.......
     976:	0f 03 00 00 08 18 78 e0 e0 78 18 08 00 00 08 0c     ......x..x......
     986:	0f 03 03 0f 0c 08 00 00 08 78 f8 c0 80 f8 f8 18     .........x......
     996:	00 00 00 60 61 7f 1f 07 00 00 00 00 18 18 18 98     ...`a...........
     9a6:	d8 78 38 18 00 00 0c 0e 0f 0d 0c 0c 0c 0c 00 00     .x8.............
     9b6:	00 80 80 7e 7f 01 01 00 00 00 00 00 00 3f 7f 40     ...~.........?.@
     9c6:	40 00 00 10 18 1c 1e ff ff 1e 1c 18 10 00 00 00     @...............
     9d6:	00 ff ff 00 00 00 00 00 00 01 01 7f 7e 80 80 00     ............~...
     9e6:	00 00 00 40 40 7f 3f 00 00 00 00 00 c0 60 60 60     ...@@.?......```
     9f6:	c0 c0 c0 60 00 00 00 00 00 00 00 00 00 00 00 00     ...`............

00000a06 <__ctors_end>:
     a06:	11 24       	eor	r1, r1
     a08:	1f be       	out	0x3f, r1	; 63
     a0a:	cf ef       	ldi	r28, 0xFF	; 255
     a0c:	d0 e1       	ldi	r29, 0x10	; 16
     a0e:	de bf       	out	0x3e, r29	; 62
     a10:	cd bf       	out	0x3d, r28	; 61

00000a12 <__do_copy_data>:
     a12:	1b e0       	ldi	r17, 0x0B	; 11
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b1 e0       	ldi	r27, 0x01	; 1
     a18:	ec e9       	ldi	r30, 0x9C	; 156
     a1a:	fa e2       	ldi	r31, 0x2A	; 42
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <.do_copy_data_start>

00000a1e <.do_copy_data_loop>:
     a1e:	05 90       	lpm	r0, Z+
     a20:	0d 92       	st	X+, r0

00000a22 <.do_copy_data_start>:
     a22:	a6 36       	cpi	r26, 0x66	; 102
     a24:	b1 07       	cpc	r27, r17
     a26:	d9 f7       	brne	.-10     	; 0xa1e <.do_copy_data_loop>

00000a28 <__do_clear_bss>:
     a28:	1d e0       	ldi	r17, 0x0D	; 13
     a2a:	a6 e6       	ldi	r26, 0x66	; 102
     a2c:	bb e0       	ldi	r27, 0x0B	; 11
     a2e:	01 c0       	rjmp	.+2      	; 0xa32 <.do_clear_bss_start>

00000a30 <.do_clear_bss_loop>:
     a30:	1d 92       	st	X+, r1

00000a32 <.do_clear_bss_start>:
     a32:	af 38       	cpi	r26, 0x8F	; 143
     a34:	b1 07       	cpc	r27, r17
     a36:	e1 f7       	brne	.-8      	; 0xa30 <.do_clear_bss_loop>
     a38:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <main>
     a3c:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <_exit>

00000a40 <__bad_interrupt>:
     a40:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000a44 <__vector_20>:

//this include file stores all the revelant aux font data. you can make new ones with the bmp2header_font utility in the utilities folder
#include "aux_font.h"			  			  

ISR (SIG_USART_RECV)//USART Receive Interrupt
{
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	8f 93       	push	r24
     a50:	9f 93       	push	r25
     a52:	ef 93       	push	r30
     a54:	ff 93       	push	r31
	cli();//Disable Interrupts
     a56:	f8 94       	cli

	RX_array[RX_in++] = UDR0;	//get recieved byte
     a58:	80 91 66 0b 	lds	r24, 0x0B66
     a5c:	90 91 c6 00 	lds	r25, 0x00C6
     a60:	e8 2f       	mov	r30, r24
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	e3 57       	subi	r30, 0x73	; 115
     a66:	f4 4f       	sbci	r31, 0xF4	; 244
     a68:	90 83       	st	Z, r25
     a6a:	8f 5f       	subi	r24, 0xFF	; 255
     a6c:	80 93 66 0b 	sts	0x0B66, r24
	if (RX_in >= RX_BUFFER_SIZE) RX_in = 0;	//wrap RX_in	
     a70:	80 91 66 0b 	lds	r24, 0x0B66
	RX_bytes++;			//keep count of bytes recieved
     a74:	80 91 69 0b 	lds	r24, 0x0B69
     a78:	8f 5f       	subi	r24, 0xFF	; 255
     a7a:	80 93 69 0b 	sts	0x0B69, r24
	
	//test for buffer close to full
	if (RX_bytes > (unsigned char)(RX_BUFFER_SIZE *.75))
     a7e:	80 91 69 0b 	lds	r24, 0x0B69
     a82:	81 3c       	cpi	r24, 0xC1	; 193
     a84:	20 f0       	brcs	.+8      	; 0xa8e <__vector_20+0x4a>
	{
		PORTA &= (~(1<<CTS));		//de-assert CTS
     a86:	17 98       	cbi	0x02, 7	; 2
		RX_pause=1;		//flag reception suspended
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	80 93 6a 0b 	sts	0x0B6A, r24
	}
	
	sei();//Enable Interrupts	
     a8e:	78 94       	sei
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	9f 91       	pop	r25
     a96:	8f 91       	pop	r24
     a98:	0f 90       	pop	r0
     a9a:	0f be       	out	0x3f, r0	; 63
     a9c:	0f 90       	pop	r0
     a9e:	1f 90       	pop	r1
     aa0:	18 95       	reti

00000aa2 <__vector_16>:

ISR (TIMER0_COMPA_vect) //
{
     aa2:	1f 92       	push	r1
     aa4:	0f 92       	push	r0
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	0f 92       	push	r0
     aaa:	11 24       	eor	r1, r1
     aac:	8f 93       	push	r24
     aae:	9f 93       	push	r25
	unsigned char y;
	
	//cli();//Disable Interrupts
	
	TCCR0B = 0;
     ab0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;//disable timer ints
     ab2:	10 92 6e 00 	sts	0x006E, r1
	
	TIFR0 = 0x02;//clear the interrupt
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	85 bb       	out	0x15, r24	; 21


	TCNT0 = 0;
     aba:	16 bc       	out	0x26, r1	; 38
		
	y = PINA;
	if (y & (1<<BL_EN))		//if on turn off
     abc:	03 99       	sbic	0x00, 3	; 0
     abe:	0f c0       	rjmp	.+30     	; 0xade <__vector_16+0x3c>
		OCR0A =100 - BL_dutycycle;
	}
	
	else //off, turn on
	{
		PORTA |= (1<<BL_EN);
     ac0:	13 9a       	sbi	0x02, 3	; 2
		OCR0A = BL_dutycycle;
     ac2:	80 91 39 01 	lds	r24, 0x0139
     ac6:	87 bd       	out	0x27, r24	; 39
	}
	
	
	TIMSK0 = 0x02;	//enable OCR0A
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	80 93 6e 00 	sts	0x006E, r24
	TCCR0B = 0x02;
     ace:	85 bd       	out	0x25, r24	; 37
}
     ad0:	9f 91       	pop	r25
     ad2:	8f 91       	pop	r24
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti
	TCNT0 = 0;
		
	y = PINA;
	if (y & (1<<BL_EN))		//if on turn off
	{
		PORTA &= (~(1<<BL_EN));
     ade:	13 98       	cbi	0x02, 3	; 2
		OCR0A =100 - BL_dutycycle;
     ae0:	84 e6       	ldi	r24, 0x64	; 100
     ae2:	90 91 39 01 	lds	r25, 0x0139
     ae6:	89 1b       	sub	r24, r25
     ae8:	87 bd       	out	0x27, r24	; 39
     aea:	ee cf       	rjmp	.-36     	; 0xac8 <__vector_16+0x26>

00000aec <ioinit>:
void ioinit (void)
{
	
    //1 = output, 0 = input
   
	DDRB = 0b00000000; //PB0-PB4 are read buttons and are inputs
     aec:	14 b8       	out	0x04, r1	; 4
	DDRC = 0b00000000; //PC0-PC7 are the data bus.
     aee:	17 b8       	out	0x07, r1	; 7
	
	PORTA= 0b11110000;	
     af0:	80 ef       	ldi	r24, 0xF0	; 240
     af2:	82 b9       	out	0x02, r24	; 2
	DDRA = 0b11110000;	//7-4 drive led's 2-0 read buttons
     af4:	81 b9       	out	0x01, r24	; 1
	
	DDRD = 0b11111110;	//7-2 are LCD control lines 1 is usart tx, 0 is usart RX
     af6:	8e ef       	ldi	r24, 0xFE	; 254
     af8:	8a b9       	out	0x0a, r24	; 10
	PORTD = LCD_IDLE;
     afa:	80 e2       	ldi	r24, 0x20	; 32
     afc:	8b b9       	out	0x0b, r24	; 11
		
	//Init timer 2
    	TCCR2B = (1<<CS21); //Set Prescaler to 8. CS21=1
     afe:	82 e0       	ldi	r24, 0x02	; 2
     b00:	80 93 b1 00 	sts	0x00B1, r24

	//Set up Timer 0
	TCCR0A = 0x02;//CTC mode
     b04:	84 bd       	out	0x24, r24	; 36
	
	TIMSK0 = 0x02;//enable OCR0A
     b06:	80 93 6e 00 	sts	0x006E, r24
	
	OCR0A = BL_dutycycle;
     b0a:	80 91 39 01 	lds	r24, 0x0139
     b0e:	87 bd       	out	0x27, r24	; 39

}
     b10:	08 95       	ret

00000b12 <delay_us>:
//General short delays
void delay_us(uint8_t x)
{
	char temp;
	
	if (x == 0) temp = 1;
     b12:	88 23       	and	r24, r24
     b14:	71 f4       	brne	.+28     	; 0xb32 <delay_us+0x20>
     b16:	9f ef       	ldi	r25, 0xFF	; 255
	else temp = x;
	
	TIFR2 |= 0x01;			//Clear any interrupt flags on Timer2
     b18:	b8 9a       	sbi	0x17, 0	; 23
    
    TCNT2 = 256 - temp; 		//256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
     b1a:	90 93 b2 00 	sts	0x00B2, r25

	while(!(TIFR2 & 0x01));
     b1e:	b8 9b       	sbis	0x17, 0	; 23
     b20:	fe cf       	rjmp	.-4      	; 0xb1e <delay_us+0xc>
	
	if (x == 0) return;		//this is for display timing	
     b22:	88 23       	and	r24, r24
     b24:	29 f0       	breq	.+10     	; 0xb30 <delay_us+0x1e>
	
	//The prescaler doesn't allow for a setting of 16, just 8 or 32. So, we do this twice.
	TIFR2 |= 0x01;
     b26:	b8 9a       	sbi	0x17, 0	; 23
    
    TCNT2 = 256 - temp; 		//256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
     b28:	90 93 b2 00 	sts	0x00B2, r25

	while(!(TIFR2 & 0x01));
     b2c:	b8 9b       	sbis	0x17, 0	; 23
     b2e:	fe cf       	rjmp	.-4      	; 0xb2c <delay_us+0x1a>
     b30:	08 95       	ret
//General short delays
void delay_us(uint8_t x)
{
	char temp;
	
	if (x == 0) temp = 1;
     b32:	98 2f       	mov	r25, r24
     b34:	91 95       	neg	r25
     b36:	f0 cf       	rjmp	.-32     	; 0xb18 <delay_us+0x6>

00000b38 <delay_ms>:

}

//General short delays
void delay_ms(uint16_t x)
{
     b38:	cf 93       	push	r28
     b3a:	df 93       	push	r29
     b3c:	ec 01       	movw	r28, r24
	for (; x > 0 ; x--)
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	71 f0       	breq	.+28     	; 0xb5e <delay_ms+0x26>
    {
        delay_us(250);
     b42:	8a ef       	ldi	r24, 0xFA	; 250
     b44:	0e 94 89 05 	call	0xb12	; 0xb12 <delay_us>
        delay_us(250);
     b48:	8a ef       	ldi	r24, 0xFA	; 250
     b4a:	0e 94 89 05 	call	0xb12	; 0xb12 <delay_us>
        delay_us(250);
     b4e:	8a ef       	ldi	r24, 0xFA	; 250
     b50:	0e 94 89 05 	call	0xb12	; 0xb12 <delay_us>
        delay_us(250);
     b54:	8a ef       	ldi	r24, 0xFA	; 250
     b56:	0e 94 89 05 	call	0xb12	; 0xb12 <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for (; x > 0 ; x--)
     b5a:	21 97       	sbiw	r28, 0x01	; 1
     b5c:	91 f7       	brne	.-28     	; 0xb42 <delay_ms+0xa>
        delay_us(250);
        delay_us(250);
        delay_us(250);
    }
	
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <USART_Init>:
}

void USART_Init( unsigned int ubrr)
{
	// Set baud rate 
	UBRR0H = (unsigned char)(ubrr>>8);
     b64:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
     b68:	80 93 c4 00 	sts	0x00C4, r24
	
	// Enable receiver and transmitter 
	UCSR0A = (1<<U2X0);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	//Enable Interrupts on receive character
     b72:	88 e9       	ldi	r24, 0x98	; 152
     b74:	80 93 c1 00 	sts	0x00C1, r24
	
	UCSR0C = (1<<UCSZ00)|(1<<UCSZ01);
     b78:	86 e0       	ldi	r24, 0x06	; 6
     b7a:	80 93 c2 00 	sts	0x00C2, r24
	sei();
     b7e:	78 94       	sei
}
     b80:	08 95       	ret

00000b82 <RX_get_byte>:

char RX_get_byte(void)	//retrieves a character from the RX_buffer and does book-keeping
{
	char x;

	while(RX_bytes==0);				//wait for data to be available
     b82:	80 91 69 0b 	lds	r24, 0x0B69
     b86:	88 23       	and	r24, r24
     b88:	e1 f3       	breq	.-8      	; 0xb82 <RX_get_byte>
	x = RX_array[RX_read++];			//get char from buffer and increment read pointer
     b8a:	80 91 67 0b 	lds	r24, 0x0B67
     b8e:	90 91 68 0b 	lds	r25, 0x0B68
     b92:	fc 01       	movw	r30, r24
     b94:	e3 57       	subi	r30, 0x73	; 115
     b96:	f4 4f       	sbci	r31, 0xF4	; 244
     b98:	e0 81       	ld	r30, Z
     b9a:	01 96       	adiw	r24, 0x01	; 1
     b9c:	90 93 68 0b 	sts	0x0B68, r25
     ba0:	80 93 67 0b 	sts	0x0B67, r24
	if(RX_read >= RX_BUFFER_SIZE) RX_read = 0;	//if the read pointer reaches the end of the buffer, wrap back to the beginning
     ba4:	8f 3f       	cpi	r24, 0xFF	; 255
     ba6:	91 05       	cpc	r25, r1
     ba8:	29 f0       	breq	.+10     	; 0xbb4 <RX_get_byte+0x32>
     baa:	20 f0       	brcs	.+8      	; 0xbb4 <RX_get_byte+0x32>
     bac:	10 92 68 0b 	sts	0x0B68, r1
     bb0:	10 92 67 0b 	sts	0x0B67, r1
	cli();						//interrupts must be disabled when changing RX_bytes, since it can be chabged here and in the ISR
     bb4:	f8 94       	cli
	RX_bytes--;
     bb6:	80 91 69 0b 	lds	r24, 0x0B69
     bba:	81 50       	subi	r24, 0x01	; 1
     bbc:	80 93 69 0b 	sts	0x0B69, r24
	sei();
     bc0:	78 94       	sei
	
	//check to see if we need to re-enable reception 

	if (RX_pause==1)		//if USART reception is suspended
     bc2:	80 91 6a 0b 	lds	r24, 0x0B6A
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	11 f0       	breq	.+4      	; 0xbce <RX_get_byte+0x4c>
		{
			PORTA |=(1<<CTS);	//resume reception
			RX_pause=0;	//flag it
		}	
	return x;
}
     bca:	8e 2f       	mov	r24, r30
     bcc:	08 95       	ret
	sei();
	
	//check to see if we need to re-enable reception 

	if (RX_pause==1)		//if USART reception is suspended
		if (RX_bytes < (unsigned char)(RX_BUFFER_SIZE *.25) )		//if RX_buffer is suitably empty
     bce:	80 91 69 0b 	lds	r24, 0x0B69
     bd2:	80 34       	cpi	r24, 0x40	; 64
     bd4:	d0 f7       	brcc	.-12     	; 0xbca <RX_get_byte+0x48>
		{
			PORTA |=(1<<CTS);	//resume reception
     bd6:	17 9a       	sbi	0x02, 7	; 2
			RX_pause=0;	//flag it
     bd8:	10 92 6a 0b 	sts	0x0B6A, r1
     bdc:	f6 cf       	rjmp	.-20     	; 0xbca <RX_get_byte+0x48>

00000bde <put_char>:
		}	
	return x;
}

void put_char(char byte)
{
     bde:	98 2f       	mov	r25, r24
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     be0:	80 91 c0 00 	lds	r24, 0x00C0
     be4:	85 ff       	sbrs	r24, 5
     be6:	fc cf       	rjmp	.-8      	; 0xbe0 <put_char+0x2>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
     be8:	90 93 c6 00 	sts	0x00C6, r25
}
     bec:	08 95       	ret

00000bee <delay>:

//delay for display timing
void delay(void)
{
     bee:	80 e0       	ldi	r24, 0x00	; 0
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     bf0:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     bf2:	8f 5f       	subi	r24, 0xFF	; 255
     bf4:	86 32       	cpi	r24, 0x26	; 38
     bf6:	e1 f7       	brne	.-8      	; 0xbf0 <delay+0x2>
	{
		asm volatile ("nop");
		
	}	
}
     bf8:	08 95       	ret

00000bfa <write_command_LCD>:
	}
}

//write_command_LCD
void write_command_LCD(char byte, char chip)
{
     bfa:	98 2f       	mov	r25, r24
	//byte is the command to write, chip determines which chips get written to 1=1,2=2, anything else=both

	DDRC = 0xFF; //data bus is output.
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	87 b9       	out	0x07, r24	; 7
	
	if (chip==1) 
     c00:	61 30       	cpi	r22, 0x01	; 1
     c02:	11 f1       	breq	.+68     	; 0xc48 <write_command_LCD+0x4e>
		LCD_CONTROL = LCD_COMMAND1;
	else if (chip == 2)
     c04:	62 30       	cpi	r22, 0x02	; 2
     c06:	e9 f0       	breq	.+58     	; 0xc42 <write_command_LCD+0x48>
		LCD_CONTROL = LCD_COMMAND2;
	     else
		LCD_CONTROL = LCD_COMMAND12;
     c08:	80 ee       	ldi	r24, 0xE0	; 224
     c0a:	8b b9       	out	0x0b, r24	; 11
 	
	set_data(byte);
     c0c:	98 b9       	out	0x08, r25	; 8
     c0e:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c10:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	86 32       	cpi	r24, 0x26	; 38
     c16:	e1 f7       	brne	.-8      	; 0xc10 <write_command_LCD+0x16>
	     else
		LCD_CONTROL = LCD_COMMAND12;
 	
	set_data(byte);
	delay();
	CLK_LCD;
     c18:	5a 9a       	sbi	0x0b, 2	; 11
     c1a:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c1c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c1e:	8f 5f       	subi	r24, 0xFF	; 255
     c20:	86 32       	cpi	r24, 0x26	; 38
     c22:	e1 f7       	brne	.-8      	; 0xc1c <write_command_LCD+0x22>
	     else
		LCD_CONTROL = LCD_COMMAND12;
 	
	set_data(byte);
	delay();
	CLK_LCD;
     c24:	5a 98       	cbi	0x0b, 2	; 11
     c26:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c28:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	86 32       	cpi	r24, 0x26	; 38
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <write_command_LCD+0x2e>
 	
	set_data(byte);
	delay();
	CLK_LCD;

	LCD_CONTROL = LCD_IDLE;	
     c30:	80 e2       	ldi	r24, 0x20	; 32
     c32:	8b b9       	out	0x0b, r24	; 11
     c34:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c36:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	86 32       	cpi	r24, 0x26	; 38
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <write_command_LCD+0x3c>
	CLK_LCD;

	LCD_CONTROL = LCD_IDLE;	
	delay();

	DDRC = 0x00;	//data bus back to input
     c3e:	17 b8       	out	0x07, r1	; 7
}
     c40:	08 95       	ret
	DDRC = 0xFF; //data bus is output.
	
	if (chip==1) 
		LCD_CONTROL = LCD_COMMAND1;
	else if (chip == 2)
		LCD_CONTROL = LCD_COMMAND2;
     c42:	80 e6       	ldi	r24, 0x60	; 96
     c44:	8b b9       	out	0x0b, r24	; 11
     c46:	e2 cf       	rjmp	.-60     	; 0xc0c <write_command_LCD+0x12>
	//byte is the command to write, chip determines which chips get written to 1=1,2=2, anything else=both

	DDRC = 0xFF; //data bus is output.
	
	if (chip==1) 
		LCD_CONTROL = LCD_COMMAND1;
     c48:	80 ea       	ldi	r24, 0xA0	; 160
     c4a:	8b b9       	out	0x0b, r24	; 11
     c4c:	df cf       	rjmp	.-66     	; 0xc0c <write_command_LCD+0x12>

00000c4e <write_data_LCD>:
	DDRC = 0x00;	//data bus back to input
}
 
//write_data_LCD
void write_data_LCD(char byte, char chip)
{
     c4e:	98 2f       	mov	r25, r24
	//byte is the data to write, chip determines which chips get written to 1=1,2=2 anything else=both
	
	DDRC = 0xFF; //data bus output.	
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	87 b9       	out	0x07, r24	; 7

	if (chip==1) 
     c54:	61 30       	cpi	r22, 0x01	; 1
     c56:	11 f1       	breq	.+68     	; 0xc9c <write_data_LCD+0x4e>
		LCD_CONTROL = LCD_DATA1;
	else if (chip == 2)
     c58:	62 30       	cpi	r22, 0x02	; 2
     c5a:	e9 f0       	breq	.+58     	; 0xc96 <write_data_LCD+0x48>
		LCD_CONTROL = LCD_DATA2;
	     else
		LCD_CONTROL = LCD_DATA12;
     c5c:	88 ee       	ldi	r24, 0xE8	; 232
     c5e:	8b b9       	out	0x0b, r24	; 11

	set_data(byte);
     c60:	98 b9       	out	0x08, r25	; 8
     c62:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c64:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	86 32       	cpi	r24, 0x26	; 38
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <write_data_LCD+0x16>
		LCD_CONTROL = LCD_DATA12;

	set_data(byte);
	delay();

	CLK_LCD;
     c6c:	5a 9a       	sbi	0x0b, 2	; 11
     c6e:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c70:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c72:	8f 5f       	subi	r24, 0xFF	; 255
     c74:	86 32       	cpi	r24, 0x26	; 38
     c76:	e1 f7       	brne	.-8      	; 0xc70 <write_data_LCD+0x22>
		LCD_CONTROL = LCD_DATA12;

	set_data(byte);
	delay();

	CLK_LCD;
     c78:	5a 98       	cbi	0x0b, 2	; 11
     c7a:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c7c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c7e:	8f 5f       	subi	r24, 0xFF	; 255
     c80:	86 32       	cpi	r24, 0x26	; 38
     c82:	e1 f7       	brne	.-8      	; 0xc7c <write_data_LCD+0x2e>

	set_data(byte);
	delay();

	CLK_LCD;
	LCD_CONTROL = LCD_IDLE;	
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	8b b9       	out	0x0b, r24	; 11
     c88:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     c8a:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     c8c:	8f 5f       	subi	r24, 0xFF	; 255
     c8e:	86 32       	cpi	r24, 0x26	; 38
     c90:	e1 f7       	brne	.-8      	; 0xc8a <write_data_LCD+0x3c>

	CLK_LCD;
	LCD_CONTROL = LCD_IDLE;	
	delay();
	
	DDRC = 0x00;	//data bus input
     c92:	17 b8       	out	0x07, r1	; 7
}
     c94:	08 95       	ret
	DDRC = 0xFF; //data bus output.	

	if (chip==1) 
		LCD_CONTROL = LCD_DATA1;
	else if (chip == 2)
		LCD_CONTROL = LCD_DATA2;
     c96:	88 e6       	ldi	r24, 0x68	; 104
     c98:	8b b9       	out	0x0b, r24	; 11
     c9a:	e2 cf       	rjmp	.-60     	; 0xc60 <write_data_LCD+0x12>
	//byte is the data to write, chip determines which chips get written to 1=1,2=2 anything else=both
	
	DDRC = 0xFF; //data bus output.	

	if (chip==1) 
		LCD_CONTROL = LCD_DATA1;
     c9c:	88 ea       	ldi	r24, 0xA8	; 168
     c9e:	8b b9       	out	0x0b, r24	; 11
     ca0:	df cf       	rjmp	.-66     	; 0xc60 <write_data_LCD+0x12>

00000ca2 <write_block>:


//this writes a block of contiguous bytes to a single page
//automatically takes care of crossing from one chip to the next
void write_block(char x, char page, char length, char* buf)
{
     ca2:	cf 92       	push	r12
     ca4:	df 92       	push	r13
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	0f 92       	push	r0
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	08 2f       	mov	r16, r24
     cb8:	86 2f       	mov	r24, r22
     cba:	14 2f       	mov	r17, r20
     cbc:	69 01       	movw	r12, r18
	char side;
	char i, s, n1, n2, o;

	side=1;
	o=0;			//offset in data
	set_page(page);		//set proper page
     cbe:	88 6b       	ori	r24, 0xB8	; 184
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
	if (x>63)		//account for x being larger than 63 
     cc6:	00 34       	cpi	r16, 0x40	; 64
     cc8:	08 f0       	brcs	.+2      	; 0xccc <write_block+0x2a>
     cca:	49 c0       	rjmp	.+146    	; 0xd5e <write_block+0xbc>
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	89 83       	std	Y+1, r24	; 0x01
	{
		x-= 64;
		side=2;
	}

	s = (64-x);		//distance to edge
     cd0:	40 e4       	ldi	r20, 0x40	; 64
     cd2:	40 1b       	sub	r20, r16

	if (length>s)		
     cd4:	41 17       	cp	r20, r17
     cd6:	08 f4       	brcc	.+2      	; 0xcda <write_block+0x38>
     cd8:	3e c0       	rjmp	.+124    	; 0xd56 <write_block+0xb4>
     cda:	ff 24       	eor	r15, r15
	{
		n1=length;
		n2=0;
	}

	set_x(x);
     cdc:	80 2f       	mov	r24, r16
     cde:	80 64       	ori	r24, 0x40	; 64
     ce0:	60 e0       	ldi	r22, 0x00	; 0
     ce2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>

	DDRC = 0xFF; //data bus output.	
     ce6:	8f ef       	ldi	r24, 0xFF	; 255
     ce8:	87 b9       	out	0x07, r24	; 7

	//write the data
	if  (side==1) 					//select proper chip
     cea:	f9 81       	ldd	r31, Y+1	; 0x01
     cec:	f1 30       	cpi	r31, 0x01	; 1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <write_block+0x50>
     cf0:	68 c0       	rjmp	.+208    	; 0xdc2 <write_block+0x120>
		LCD_CONTROL = LCD_DATA1;	
	else
		LCD_CONTROL = LCD_DATA2;
     cf2:	88 e6       	ldi	r24, 0x68	; 104
     cf4:	8b b9       	out	0x0b, r24	; 11


	for(i=0;i<n1;i++)
     cf6:	11 23       	and	r17, r17
     cf8:	d9 f0       	breq	.+54     	; 0xd30 <write_block+0x8e>

	//write the data
	if  (side==1) 					//select proper chip
		LCD_CONTROL = LCD_DATA1;	
	else
		LCD_CONTROL = LCD_DATA2;
     cfa:	4c 2d       	mov	r20, r12
     cfc:	c6 01       	movw	r24, r12
     cfe:	fc 01       	movw	r30, r24


	for(i=0;i<n1;i++)
	{
		set_data(buf[o++]);			//put data on bus
     d00:	80 81       	ld	r24, Z
     d02:	88 b9       	out	0x08, r24	; 8
     d04:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     d06:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	86 32       	cpi	r24, 0x26	; 38
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <write_block+0x64>

	for(i=0;i<n1;i++)
	{
		set_data(buf[o++]);			//put data on bus
		delay();
		CLK_LCD;				//clock it in
     d0e:	5a 9a       	sbi	0x0b, 2	; 11
     d10:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     d12:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	86 32       	cpi	r24, 0x26	; 38
     d18:	e1 f7       	brne	.-8      	; 0xd12 <write_block+0x70>

	for(i=0;i<n1;i++)
	{
		set_data(buf[o++]);			//put data on bus
		delay();
		CLK_LCD;				//clock it in
     d1a:	5a 98       	cbi	0x0b, 2	; 11
     d1c:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     d1e:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	86 32       	cpi	r24, 0x26	; 38
     d24:	e1 f7       	brne	.-8      	; 0xd1e <write_block+0x7c>
     d26:	31 96       	adiw	r30, 0x01	; 1
		LCD_CONTROL = LCD_DATA1;	
	else
		LCD_CONTROL = LCD_DATA2;


	for(i=0;i<n1;i++)
     d28:	8e 2f       	mov	r24, r30
     d2a:	84 1b       	sub	r24, r20
     d2c:	81 17       	cp	r24, r17
     d2e:	40 f3       	brcs	.-48     	; 0xd00 <write_block+0x5e>
		set_data(buf[o++]);			//put data on bus
		delay();
		CLK_LCD;				//clock it in
	}

	LCD_CONTROL = LCD_IDLE;	
     d30:	80 e2       	ldi	r24, 0x20	; 32
     d32:	8b b9       	out	0x0b, r24	; 11
     d34:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     d36:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	86 32       	cpi	r24, 0x26	; 38
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <write_block+0x94>
	}

	LCD_CONTROL = LCD_IDLE;	
	delay();

	if(n2>0)
     d3e:	ff 20       	and	r15, r15
     d40:	91 f4       	brne	.+36     	; 0xd66 <write_block+0xc4>
		LCD_CONTROL = LCD_IDLE;	
		delay();

	}//if n2>0

	DDRC = 0x00;	//data bus input
     d42:	17 b8       	out	0x07, r1	; 7
}
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	df 90       	pop	r13
     d52:	cf 90       	pop	r12
     d54:	08 95       	ret
	s = (64-x);		//distance to edge

	if (length>s)		
	{
		n1=s;		//how much to read in the first loop
		n2=length-s;	//how much to read in the second loop
     d56:	f1 2e       	mov	r15, r17
     d58:	f4 1a       	sub	r15, r20
     d5a:	14 2f       	mov	r17, r20
     d5c:	bf cf       	rjmp	.-130    	; 0xcdc <write_block+0x3a>
	side=1;
	o=0;			//offset in data
	set_page(page);		//set proper page
	if (x>63)		//account for x being larger than 63 
	{
		x-= 64;
     d5e:	00 54       	subi	r16, 0x40	; 64
     d60:	e2 e0       	ldi	r30, 0x02	; 2
     d62:	e9 83       	std	Y+1, r30	; 0x01
     d64:	b5 cf       	rjmp	.-150    	; 0xcd0 <write_block+0x2e>
	LCD_CONTROL = LCD_IDLE;	
	delay();

	if(n2>0)
	{
		set_x(0);
     d66:	80 e4       	ldi	r24, 0x40	; 64
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>

		DDRC = 0xFF; //data bus output.	
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	87 b9       	out	0x07, r24	; 7

		if  (side==1) 				//select proper chip(opposite of before, since we ran over)
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	41 f1       	breq	.+80     	; 0xdc8 <write_block+0x126>
			LCD_CONTROL = LCD_DATA2;	
		else
			LCD_CONTROL = LCD_DATA1;
     d78:	88 ea       	ldi	r24, 0xA8	; 168
     d7a:	8b b9       	out	0x0b, r24	; 11
     d7c:	90 e0       	ldi	r25, 0x00	; 0


		for(i=0;i<n2;i++)
		{
			set_data(buf[o++]);		//put data on bus
     d7e:	f6 01       	movw	r30, r12
     d80:	e1 0f       	add	r30, r17
     d82:	f1 1d       	adc	r31, r1
     d84:	80 81       	ld	r24, Z
     d86:	88 b9       	out	0x08, r24	; 8
     d88:	1f 5f       	subi	r17, 0xFF	; 255
     d8a:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     d8c:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     d8e:	8f 5f       	subi	r24, 0xFF	; 255
     d90:	86 32       	cpi	r24, 0x26	; 38
     d92:	e1 f7       	brne	.-8      	; 0xd8c <write_block+0xea>

		for(i=0;i<n2;i++)
		{
			set_data(buf[o++]);		//put data on bus
			delay();
			CLK_LCD;			//clock it in
     d94:	5a 9a       	sbi	0x0b, 2	; 11
     d96:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     d98:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     d9a:	8f 5f       	subi	r24, 0xFF	; 255
     d9c:	86 32       	cpi	r24, 0x26	; 38
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <write_block+0xf6>

		for(i=0;i<n2;i++)
		{
			set_data(buf[o++]);		//put data on bus
			delay();
			CLK_LCD;			//clock it in
     da0:	5a 98       	cbi	0x0b, 2	; 11
     da2:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     da4:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     da6:	8f 5f       	subi	r24, 0xFF	; 255
     da8:	86 32       	cpi	r24, 0x26	; 38
     daa:	e1 f7       	brne	.-8      	; 0xda4 <write_block+0x102>
			LCD_CONTROL = LCD_DATA2;	
		else
			LCD_CONTROL = LCD_DATA1;


		for(i=0;i<n2;i++)
     dac:	9f 5f       	subi	r25, 0xFF	; 255
     dae:	9f 15       	cp	r25, r15
     db0:	30 f3       	brcs	.-52     	; 0xd7e <write_block+0xdc>
			set_data(buf[o++]);		//put data on bus
			delay();
			CLK_LCD;			//clock it in
		}
	
		LCD_CONTROL = LCD_IDLE;	
     db2:	80 e2       	ldi	r24, 0x20	; 32
     db4:	8b b9       	out	0x0b, r24	; 11
     db6:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     db8:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     dba:	8f 5f       	subi	r24, 0xFF	; 255
     dbc:	86 32       	cpi	r24, 0x26	; 38
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <write_block+0x116>
     dc0:	c0 cf       	rjmp	.-128    	; 0xd42 <write_block+0xa0>

	DDRC = 0xFF; //data bus output.	

	//write the data
	if  (side==1) 					//select proper chip
		LCD_CONTROL = LCD_DATA1;	
     dc2:	88 ea       	ldi	r24, 0xA8	; 168
     dc4:	8b b9       	out	0x0b, r24	; 11
     dc6:	97 cf       	rjmp	.-210    	; 0xcf6 <write_block+0x54>
		set_x(0);

		DDRC = 0xFF; //data bus output.	

		if  (side==1) 				//select proper chip(opposite of before, since we ran over)
			LCD_CONTROL = LCD_DATA2;	
     dc8:	88 e6       	ldi	r24, 0x68	; 104
     dca:	8b b9       	out	0x0b, r24	; 11
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	d7 cf       	rjmp	.-82     	; 0xd7e <write_block+0xdc>

00000dd0 <read_data_LCD>:
char read_data_LCD(char chip)
{
	char data1;
	//chip determines which chip to read from
		
	if  (chip==1) 				//select proper chip
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	21 f1       	breq	.+72     	; 0xe1c <read_data_LCD+0x4c>
		LCD_CONTROL = LCD_READ1;	
	else
		LCD_CONTROL = LCD_READ2;
     dd4:	88 e7       	ldi	r24, 0x78	; 120
     dd6:	8b b9       	out	0x0b, r24	; 11
	
	CLK_LCD;				//dummy clk
     dd8:	5a 9a       	sbi	0x0b, 2	; 11
     dda:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     ddc:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	86 32       	cpi	r24, 0x26	; 38
     de2:	e1 f7       	brne	.-8      	; 0xddc <read_data_LCD+0xc>
	if  (chip==1) 				//select proper chip
		LCD_CONTROL = LCD_READ1;	
	else
		LCD_CONTROL = LCD_READ2;
	
	CLK_LCD;				//dummy clk
     de4:	5a 98       	cbi	0x0b, 2	; 11
     de6:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     de8:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     dea:	8f 5f       	subi	r24, 0xFF	; 255
     dec:	86 32       	cpi	r24, 0x26	; 38
     dee:	e1 f7       	brne	.-8      	; 0xde8 <read_data_LCD+0x18>
		LCD_CONTROL = LCD_READ2;
	
	CLK_LCD;				//dummy clk
	

	LCD_CONTROL |= (1 << EN);
     df0:	5a 9a       	sbi	0x0b, 2	; 11
     df2:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     df4:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	86 32       	cpi	r24, 0x26	; 38
     dfa:	e1 f7       	brne	.-8      	; 0xdf4 <read_data_LCD+0x24>
	

	LCD_CONTROL |= (1 << EN);
	delay();

	data1 = PINC;				//read data
     dfc:	96 b1       	in	r25, 0x06	; 6
	
	LCD_CONTROL &= ~(1 << EN);
     dfe:	5a 98       	cbi	0x0b, 2	; 11
     e00:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     e02:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	86 32       	cpi	r24, 0x26	; 38
     e08:	e1 f7       	brne	.-8      	; 0xe02 <read_data_LCD+0x32>
	data1 = PINC;				//read data
	
	LCD_CONTROL &= ~(1 << EN);
	delay();

	LCD_CONTROL = LCD_IDLE;	
     e0a:	80 e2       	ldi	r24, 0x20	; 32
     e0c:	8b b9       	out	0x0b, r24	; 11
     e0e:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     e10:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     e12:	8f 5f       	subi	r24, 0xFF	; 255
     e14:	86 32       	cpi	r24, 0x26	; 38
     e16:	e1 f7       	brne	.-8      	; 0xe10 <read_data_LCD+0x40>

	LCD_CONTROL = LCD_IDLE;	
	delay();

	return data1;
}
     e18:	89 2f       	mov	r24, r25
     e1a:	08 95       	ret
{
	char data1;
	//chip determines which chip to read from
		
	if  (chip==1) 				//select proper chip
		LCD_CONTROL = LCD_READ1;	
     e1c:	88 eb       	ldi	r24, 0xB8	; 184
     e1e:	8b b9       	out	0x0b, r24	; 11
     e20:	db cf       	rjmp	.-74     	; 0xdd8 <read_data_LCD+0x8>

00000e22 <read_block>:
}

//reads [length] display bytes from page [page] starting at horizontal value [x] and puts the values in buf
//automatically accounts for crossing chips 
void read_block(char x, char page, char length, char* buf)
{
     e22:	cf 92       	push	r12
     e24:	df 92       	push	r13
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	0f 92       	push	r0
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	08 2f       	mov	r16, r24
     e38:	86 2f       	mov	r24, r22
     e3a:	14 2f       	mov	r17, r20
     e3c:	69 01       	movw	r12, r18
	char side;
	char c,s, n1, n2, o;

	side=1;
	o=0;				//offset in data
	set_page(page);			//set proper page
     e3e:	88 6b       	ori	r24, 0xB8	; 184
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
	if (x>63)			//account for x being larger than 63 
     e46:	00 34       	cpi	r16, 0x40	; 64
     e48:	08 f0       	brcs	.+2      	; 0xe4c <read_block+0x2a>
     e4a:	58 c0       	rjmp	.+176    	; 0xefc <read_block+0xda>
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	89 83       	std	Y+1, r24	; 0x01
	{
		x-= 64;
		side=2;
	}

	s = (64-x);			//distance to edge
     e50:	40 e4       	ldi	r20, 0x40	; 64
     e52:	40 1b       	sub	r20, r16

	if (length>s)		
     e54:	41 17       	cp	r20, r17
     e56:	08 f4       	brcc	.+2      	; 0xe5a <read_block+0x38>
     e58:	42 c0       	rjmp	.+132    	; 0xede <read_block+0xbc>
     e5a:	ff 24       	eor	r15, r15
	{
		n1=length;
		n2=0;
	}

	set_x(x);			//set x	
     e5c:	80 2f       	mov	r24, r16
     e5e:	80 64       	ori	r24, 0x40	; 64
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
				
	if  (side==1) 			//select proper chip
     e66:	f9 81       	ldd	r31, Y+1	; 0x01
     e68:	f1 30       	cpi	r31, 0x01	; 1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <read_block+0x4c>
     e6c:	44 c0       	rjmp	.+136    	; 0xef6 <read_block+0xd4>
		LCD_CONTROL = LCD_READ1;	
	else
		LCD_CONTROL = LCD_READ2;
     e6e:	88 e7       	ldi	r24, 0x78	; 120
     e70:	8b b9       	out	0x0b, r24	; 11

	CLK_LCD;			//dummy clk
     e72:	5a 9a       	sbi	0x0b, 2	; 11
     e74:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     e76:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     e78:	8f 5f       	subi	r24, 0xFF	; 255
     e7a:	86 32       	cpi	r24, 0x26	; 38
     e7c:	e1 f7       	brne	.-8      	; 0xe76 <read_block+0x54>
	if  (side==1) 			//select proper chip
		LCD_CONTROL = LCD_READ1;	
	else
		LCD_CONTROL = LCD_READ2;

	CLK_LCD;			//dummy clk
     e7e:	5a 98       	cbi	0x0b, 2	; 11
     e80:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     e82:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	86 32       	cpi	r24, 0x26	; 38
     e88:	e1 f7       	brne	.-8      	; 0xe82 <read_block+0x60>
		LCD_CONTROL = LCD_READ2;

	CLK_LCD;			//dummy clk
	

	for(c=0;c < n1;c++)		//loop for all the bytes	
     e8a:	11 23       	and	r17, r17
     e8c:	b1 f0       	breq	.+44     	; 0xeba <read_block+0x98>
     e8e:	4c 2d       	mov	r20, r12
     e90:	c6 01       	movw	r24, r12
     e92:	fc 01       	movw	r30, r24
		{
			LCD_CONTROL |= (1 << EN);
     e94:	5a 9a       	sbi	0x0b, 2	; 11
     e96:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     e98:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     e9a:	8f 5f       	subi	r24, 0xFF	; 255
     e9c:	86 32       	cpi	r24, 0x26	; 38
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <read_block+0x76>
	for(c=0;c < n1;c++)		//loop for all the bytes	
		{
			LCD_CONTROL |= (1 << EN);
			delay();

			buf[o++] = PINC; //read data
     ea0:	86 b1       	in	r24, 0x06	; 6
     ea2:	80 83       	st	Z, r24

			LCD_CONTROL &= ~(1 << EN);
     ea4:	5a 98       	cbi	0x0b, 2	; 11
     ea6:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     ea8:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     eaa:	8f 5f       	subi	r24, 0xFF	; 255
     eac:	86 32       	cpi	r24, 0x26	; 38
     eae:	e1 f7       	brne	.-8      	; 0xea8 <read_block+0x86>
     eb0:	31 96       	adiw	r30, 0x01	; 1
		LCD_CONTROL = LCD_READ2;

	CLK_LCD;			//dummy clk
	

	for(c=0;c < n1;c++)		//loop for all the bytes	
     eb2:	8e 2f       	mov	r24, r30
     eb4:	84 1b       	sub	r24, r20
     eb6:	81 17       	cp	r24, r17
     eb8:	68 f3       	brcs	.-38     	; 0xe94 <read_block+0x72>
			LCD_CONTROL &= ~(1 << EN);
			delay();

		}

	LCD_CONTROL = LCD_IDLE;	
     eba:	80 e2       	ldi	r24, 0x20	; 32
     ebc:	8b b9       	out	0x0b, r24	; 11
     ebe:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     ec0:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	86 32       	cpi	r24, 0x26	; 38
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <read_block+0x9e>
		}

	LCD_CONTROL = LCD_IDLE;	
	delay();	

	if (n2>0)
     ec8:	ff 20       	and	r15, r15
     eca:	e1 f4       	brne	.+56     	; 0xf04 <read_block+0xe2>
			}

		LCD_CONTROL = LCD_IDLE;	
		delay();	
	}//if n2>0
}
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	08 95       	ret
	s = (64-x);			//distance to edge

	if (length>s)		
	{
		n1=s;			//how much to read in the first loop
		n2=length-s;		//how much to read in the second loop
     ede:	f1 2e       	mov	r15, r17
     ee0:	f4 1a       	sub	r15, r20
     ee2:	14 2f       	mov	r17, r20
	{
		n1=length;
		n2=0;
	}

	set_x(x);			//set x	
     ee4:	80 2f       	mov	r24, r16
     ee6:	80 64       	ori	r24, 0x40	; 64
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
				
	if  (side==1) 			//select proper chip
     eee:	f9 81       	ldd	r31, Y+1	; 0x01
     ef0:	f1 30       	cpi	r31, 0x01	; 1
     ef2:	09 f0       	breq	.+2      	; 0xef6 <read_block+0xd4>
     ef4:	bc cf       	rjmp	.-136    	; 0xe6e <read_block+0x4c>
		LCD_CONTROL = LCD_READ1;	
     ef6:	88 eb       	ldi	r24, 0xB8	; 184
     ef8:	8b b9       	out	0x0b, r24	; 11
     efa:	bb cf       	rjmp	.-138    	; 0xe72 <read_block+0x50>
	side=1;
	o=0;				//offset in data
	set_page(page);			//set proper page
	if (x>63)			//account for x being larger than 63 
	{
		x-= 64;
     efc:	00 54       	subi	r16, 0x40	; 64
     efe:	e2 e0       	ldi	r30, 0x02	; 2
     f00:	e9 83       	std	Y+1, r30	; 0x01
     f02:	a6 cf       	rjmp	.-180    	; 0xe50 <read_block+0x2e>
	LCD_CONTROL = LCD_IDLE;	
	delay();	

	if (n2>0)
	{	
		set_x(0);			// we got here because we overran the previous side. always start @ 0
     f04:	80 e4       	ldi	r24, 0x40	; 64
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
		if  (side==1) 			//select proper chip, note this is opposite of normal because this read catches overrun from previous side
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	69 f1       	breq	.+90     	; 0xf6c <read_block+0x14a>
			LCD_CONTROL = LCD_READ2;	
		else
			LCD_CONTROL = LCD_READ1;
     f12:	88 eb       	ldi	r24, 0xB8	; 184
     f14:	8b b9       	out	0x0b, r24	; 11
		
		CLK_LCD;			//dummy clk
     f16:	5a 9a       	sbi	0x0b, 2	; 11
     f18:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     f1a:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     f1c:	8f 5f       	subi	r24, 0xFF	; 255
     f1e:	86 32       	cpi	r24, 0x26	; 38
     f20:	e1 f7       	brne	.-8      	; 0xf1a <read_block+0xf8>
		if  (side==1) 			//select proper chip, note this is opposite of normal because this read catches overrun from previous side
			LCD_CONTROL = LCD_READ2;	
		else
			LCD_CONTROL = LCD_READ1;
		
		CLK_LCD;			//dummy clk
     f22:	5a 98       	cbi	0x0b, 2	; 11
     f24:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     f26:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     f28:	8f 5f       	subi	r24, 0xFF	; 255
     f2a:	86 32       	cpi	r24, 0x26	; 38
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <read_block+0x104>
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	29 2f       	mov	r18, r25
     f32:	21 0f       	add	r18, r17
		CLK_LCD;			//dummy clk
		

		for(c=0;c < n2;c++)		//loop for all the bytes	
			{
				LCD_CONTROL |= (1 << EN);
     f34:	5a 9a       	sbi	0x0b, 2	; 11
     f36:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     f38:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     f3a:	8f 5f       	subi	r24, 0xFF	; 255
     f3c:	86 32       	cpi	r24, 0x26	; 38
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <read_block+0x116>
		for(c=0;c < n2;c++)		//loop for all the bytes	
			{
				LCD_CONTROL |= (1 << EN);
				delay();

				buf[o++] = PINC;	//read data
     f40:	86 b1       	in	r24, 0x06	; 6
     f42:	f6 01       	movw	r30, r12
     f44:	e2 0f       	add	r30, r18
     f46:	f1 1d       	adc	r31, r1
     f48:	80 83       	st	Z, r24

				LCD_CONTROL &= ~(1 << EN);
     f4a:	5a 98       	cbi	0x0b, 2	; 11
     f4c:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     f4e:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	86 32       	cpi	r24, 0x26	; 38
     f54:	e1 f7       	brne	.-8      	; 0xf4e <read_block+0x12c>
			LCD_CONTROL = LCD_READ1;
		
		CLK_LCD;			//dummy clk
		

		for(c=0;c < n2;c++)		//loop for all the bytes	
     f56:	9f 5f       	subi	r25, 0xFF	; 255
     f58:	9f 15       	cp	r25, r15
     f5a:	50 f3       	brcs	.-44     	; 0xf30 <read_block+0x10e>
				LCD_CONTROL &= ~(1 << EN);
				delay();

			}

		LCD_CONTROL = LCD_IDLE;	
     f5c:	80 e2       	ldi	r24, 0x20	; 32
     f5e:	8b b9       	out	0x0b, r24	; 11
     f60:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     f62:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     f64:	8f 5f       	subi	r24, 0xFF	; 255
     f66:	86 32       	cpi	r24, 0x26	; 38
     f68:	e1 f7       	brne	.-8      	; 0xf62 <read_block+0x140>
     f6a:	b0 cf       	rjmp	.-160    	; 0xecc <read_block+0xaa>

	if (n2>0)
	{	
		set_x(0);			// we got here because we overran the previous side. always start @ 0
		if  (side==1) 			//select proper chip, note this is opposite of normal because this read catches overrun from previous side
			LCD_CONTROL = LCD_READ2;	
     f6c:	88 e7       	ldi	r24, 0x78	; 120
     f6e:	8b b9       	out	0x0b, r24	; 11
     f70:	d2 cf       	rjmp	.-92     	; 0xf16 <read_block+0xf4>

00000f72 <clear_screen>:
		
	}	
}

void clear_screen(char option)
{
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
	char x, y;

	if (option==0)	//actual erase of screen
     f7a:	88 23       	and	r24, r24
     f7c:	d9 f5       	brne	.+118    	; 0xff4 <clear_screen+0x82>
     f7e:	10 e0       	ldi	r17, 0x00	; 0
			set_x(0x00);
			
			//y address increments after every write
			//write data
			//need to set data bus to outputs
			DDRC = 0xFF; 
     f80:	0f ef       	ldi	r16, 0xFF	; 255
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
			else set_data(0);

			LCD_CONTROL = LCD_DATA12;		//write data to both chips
     f82:	98 ee       	ldi	r25, 0xE8	; 232
     f84:	f9 2e       	mov	r15, r25
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
			{
				delay();
				CLK_LCD;
			}
			LCD_CONTROL = LCD_IDLE;
     f86:	80 e2       	ldi	r24, 0x20	; 32
     f88:	e8 2e       	mov	r14, r24
	{		
		
		for (x = 0; x < 8; x++)
		{
			//set x address (page)
			set_page(x);
     f8a:	81 2f       	mov	r24, r17
     f8c:	88 6b       	ori	r24, 0xB8	; 184
     f8e:	60 e0       	ldi	r22, 0x00	; 0
     f90:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
			
			//Set y address to zero
			set_x(0x00);
     f94:	80 e4       	ldi	r24, 0x40	; 64
     f96:	60 e0       	ldi	r22, 0x00	; 0
     f98:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
			
			//y address increments after every write
			//write data
			//need to set data bus to outputs
			DDRC = 0xFF; 
     f9c:	07 b9       	out	0x07, r16	; 7
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
     f9e:	80 91 6b 0b 	lds	r24, 0x0B6B
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	29 f1       	breq	.+74     	; 0xff0 <clear_screen+0x7e>
			else set_data(0);
     fa6:	18 b8       	out	0x08, r1	; 8

			LCD_CONTROL = LCD_DATA12;		//write data to both chips
     fa8:	fb b8       	out	0x0b, r15	; 11
     faa:	90 e0       	ldi	r25, 0x00	; 0
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
     fac:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     fae:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     fb0:	8f 5f       	subi	r24, 0xFF	; 255
     fb2:	86 32       	cpi	r24, 0x26	; 38
     fb4:	e1 f7       	brne	.-8      	; 0xfae <clear_screen+0x3c>

			LCD_CONTROL = LCD_DATA12;		//write data to both chips
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
			{
				delay();
				CLK_LCD;
     fb6:	5a 9a       	sbi	0x0b, 2	; 11
     fb8:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     fba:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	86 32       	cpi	r24, 0x26	; 38
     fc0:	e1 f7       	brne	.-8      	; 0xfba <clear_screen+0x48>

			LCD_CONTROL = LCD_DATA12;		//write data to both chips
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
			{
				delay();
				CLK_LCD;
     fc2:	5a 98       	cbi	0x0b, 2	; 11
     fc4:	80 e0       	ldi	r24, 0x00	; 0
{
	char y;
	
	for(y = 0; y < 38; y++)
	{
		asm volatile ("nop");
     fc6:	00 00       	nop
//delay for display timing
void delay(void)
{
	char y;
	
	for(y = 0; y < 38; y++)
     fc8:	8f 5f       	subi	r24, 0xFF	; 255
     fca:	86 32       	cpi	r24, 0x26	; 38
     fcc:	e1 f7       	brne	.-8      	; 0xfc6 <clear_screen+0x54>
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
			else set_data(0);

			LCD_CONTROL = LCD_DATA12;		//write data to both chips
			for (y = 0; y < 64; y++)		//clock for all 64 horizontal positions
     fce:	9f 5f       	subi	r25, 0xFF	; 255
     fd0:	90 34       	cpi	r25, 0x40	; 64
     fd2:	61 f7       	brne	.-40     	; 0xfac <clear_screen+0x3a>
			{
				delay();
				CLK_LCD;
			}
			LCD_CONTROL = LCD_IDLE;
     fd4:	eb b8       	out	0x0b, r14	; 11

			//set the data bus back to inputs
			DDRC = 0;
     fd6:	17 b8       	out	0x07, r1	; 7

			x_offset = 0;
     fd8:	10 92 71 0b 	sts	0x0B71, r1

			y_offset = 0;
     fdc:	10 92 72 0b 	sts	0x0B72, r1
	char x, y;

	if (option==0)	//actual erase of screen
	{		
		
		for (x = 0; x < 8; x++)
     fe0:	1f 5f       	subi	r17, 0xFF	; 255
     fe2:	18 30       	cpi	r17, 0x08	; 8
     fe4:	91 f6       	brne	.-92     	; 0xf8a <clear_screen+0x18>
			for (x=0;x<128;x++)
				buffer[x]=~buffer[x];	//invert the data
			write_block(0,y,128,buffer);	//write data back to screen
		}
	}//end if(option)
}
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ff 90       	pop	r15
     fec:	ef 90       	pop	r14
     fee:	08 95       	ret
			//y address increments after every write
			//write data
			//need to set data bus to outputs
			DDRC = 0xFF; 
		
			if (reverse == 1) set_data(0xFF);	//since data never changes when clearing the screen, set it once and do a bunch of clocks
     ff0:	08 b9       	out	0x08, r16	; 8
     ff2:	da cf       	rjmp	.-76     	; 0xfa8 <clear_screen+0x36>
	char x, y;

	if (option==0)	//actual erase of screen
	{		
		
		for (x = 0; x < 8; x++)
     ff4:	10 e0       	ldi	r17, 0x00	; 0
	}//end normal clear
	else	//reverse mode switch, do a logical inversion of the screen
	{
		for(y=0;y<8;y++)	//loop for each page
		{
			read_block(0,y,128,buffer);	//read in display data
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	61 2f       	mov	r22, r17
     ffa:	40 e8       	ldi	r20, 0x80	; 128
     ffc:	2e e8       	ldi	r18, 0x8E	; 142
     ffe:	3c e0       	ldi	r19, 0x0C	; 12
    1000:	0e 94 11 07 	call	0xe22	; 0xe22 <read_block>
    1004:	90 e0       	ldi	r25, 0x00	; 0
			for (x=0;x<128;x++)
				buffer[x]=~buffer[x];	//invert the data
    1006:	e9 2f       	mov	r30, r25
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	e2 57       	subi	r30, 0x72	; 114
    100c:	f3 4f       	sbci	r31, 0xF3	; 243
    100e:	80 81       	ld	r24, Z
    1010:	80 95       	com	r24
    1012:	80 83       	st	Z, r24
	else	//reverse mode switch, do a logical inversion of the screen
	{
		for(y=0;y<8;y++)	//loop for each page
		{
			read_block(0,y,128,buffer);	//read in display data
			for (x=0;x<128;x++)
    1014:	9f 5f       	subi	r25, 0xFF	; 255
    1016:	90 38       	cpi	r25, 0x80	; 128
    1018:	b1 f7       	brne	.-20     	; 0x1006 <clear_screen+0x94>
				buffer[x]=~buffer[x];	//invert the data
			write_block(0,y,128,buffer);	//write data back to screen
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	61 2f       	mov	r22, r17
    101e:	40 e8       	ldi	r20, 0x80	; 128
    1020:	2e e8       	ldi	r18, 0x8E	; 142
    1022:	3c e0       	ldi	r19, 0x0C	; 12
    1024:	0e 94 51 06 	call	0xca2	; 0xca2 <write_block>
			y_offset = 0;
		}//end page loop normal clear
	}//end normal clear
	else	//reverse mode switch, do a logical inversion of the screen
	{
		for(y=0;y<8;y++)	//loop for each page
    1028:	1f 5f       	subi	r17, 0xFF	; 255
    102a:	18 30       	cpi	r17, 0x08	; 8
    102c:	21 f7       	brne	.-56     	; 0xff6 <clear_screen+0x84>
    102e:	db cf       	rjmp	.-74     	; 0xfe6 <clear_screen+0x74>

00001030 <bitblt>:
//width is width in pixels
//height is height in pixels
//mode determines how the bits in the image combine with the bits already present on the display 
//mode 0=AND, 1=NAND, 2=OR, 3=NOR, 4=XOR, 5=NXOR, 6=fill(used for block erase, data[0] sets fill byte), 7=copy(overwrites background)
void bitblt(char x, char y, char width, char height, char mode, char* data)
{
    1030:	2f 92       	push	r2
    1032:	3f 92       	push	r3
    1034:	4f 92       	push	r4
    1036:	5f 92       	push	r5
    1038:	6f 92       	push	r6
    103a:	7f 92       	push	r7
    103c:	8f 92       	push	r8
    103e:	9f 92       	push	r9
    1040:	af 92       	push	r10
    1042:	bf 92       	push	r11
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	2e 97       	sbiw	r28, 0x0e	; 14
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	88 87       	std	Y+8, r24	; 0x08
    1066:	34 2e       	mov	r3, r20
    1068:	a2 2e       	mov	r10, r18
    106a:	b0 2e       	mov	r11, r16
    106c:	87 01       	movw	r16, r14
	unsigned char row, column, shift, shift2, mask1, mask2, n, n2, temp, RX_temp;
	int offset, offset2;

	//make sure legal dimensions
	if ((height<1) || (height >64))
    106e:	82 2f       	mov	r24, r18
    1070:	81 50       	subi	r24, 0x01	; 1
    1072:	80 34       	cpi	r24, 0x40	; 64
    1074:	38 f1       	brcs	.+78     	; 0x10c4 <bitblt+0x94>
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    1076:	22 23       	and	r18, r18
    1078:	61 f0       	breq	.+24     	; 0x1092 <bitblt+0x62>
    107a:	10 e0       	ldi	r17, 0x00	; 0
			for(column=0;column<width;column++)
    107c:	33 20       	and	r3, r3
    107e:	31 f0       	breq	.+12     	; 0x108c <bitblt+0x5c>
	int offset, offset2;

	//make sure legal dimensions
	if ((height<1) || (height >64))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    1080:	00 e0       	ldi	r16, 0x00	; 0
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
    1082:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>

	//make sure legal dimensions
	if ((height<1) || (height >64))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
    1086:	0f 5f       	subi	r16, 0xFF	; 255
    1088:	03 15       	cp	r16, r3
    108a:	d8 f3       	brcs	.-10     	; 0x1082 <bitblt+0x52>
	int offset, offset2;

	//make sure legal dimensions
	if ((height<1) || (height >64))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    108c:	1f 5f       	subi	r17, 0xFF	; 255
    108e:	1a 15       	cp	r17, r10
    1090:	a8 f3       	brcs	.-22     	; 0x107c <bitblt+0x4c>
				if ((mode % 2 == 1) && (mode < 6))
					buffer[column] = ~buffer[column];	//if we wanted an inverted operation, do it
			}//end column loop
		write_block(x,(row+(y/8)),width,buffer);	//write new row to display
	}//row loop
}
    1092:	2e 96       	adiw	r28, 0x0e	; 14
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	7f 90       	pop	r7
    10b8:	6f 90       	pop	r6
    10ba:	5f 90       	pop	r5
    10bc:	4f 90       	pop	r4
    10be:	3f 90       	pop	r3
    10c0:	2f 90       	pop	r2
    10c2:	08 95       	ret
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
    10c4:	84 2f       	mov	r24, r20
    10c6:	81 50       	subi	r24, 0x01	; 1
    10c8:	87 fd       	sbrc	r24, 7
    10ca:	63 c1       	rjmp	.+710    	; 0x1392 <__stack+0x293>
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
		return;	
	}
	shift = y % 8;				//calculate how much to shift the data bytes to line them up with the pages
    10cc:	86 2f       	mov	r24, r22
    10ce:	87 70       	andi	r24, 0x07	; 7
	shift2 = 8 - shift;
    10d0:	58 e0       	ldi	r21, 0x08	; 8
    10d2:	25 2e       	mov	r2, r21
    10d4:	28 1a       	sub	r2, r24
	n = ((height-1+shift)/8)+1;		//number of pages(rows) the image occupies(need to loop through all of these, each gets pixels changed)
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	c8 2e       	mov	r12, r24
    10da:	dd 24       	eor	r13, r13
    10dc:	08 94       	sec
    10de:	c1 08       	sbc	r12, r1
    10e0:	d1 08       	sbc	r13, r1
    10e2:	c6 01       	movw	r24, r12
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	08 94       	sec
    10ea:	c1 1c       	adc	r12, r1
    10ec:	d1 1c       	adc	r13, r1
    10ee:	97 fd       	sbrc	r25, 7
    10f0:	60 c1       	rjmp	.+704    	; 0x13b2 <__stack+0x2b3>
    10f2:	95 95       	asr	r25
    10f4:	87 95       	ror	r24
    10f6:	95 95       	asr	r25
    10f8:	87 95       	ror	r24
    10fa:	95 95       	asr	r25
    10fc:	87 95       	ror	r24
    10fe:	48 2f       	mov	r20, r24
    1100:	4f 5f       	subi	r20, 0xFF	; 255
    1102:	4c 83       	std	Y+4, r20	; 0x04
	n2 = height/8;				//number of rows in image
    1104:	a6 94       	lsr	r10
    1106:	a6 94       	lsr	r10
    1108:	a6 94       	lsr	r10
    110a:	ab 82       	std	Y+3, r10	; 0x03
	if (height % 8 != 0)
    110c:	c9 01       	movw	r24, r18
    110e:	87 70       	andi	r24, 0x07	; 7
    1110:	90 70       	andi	r25, 0x00	; 0
    1112:	89 2b       	or	r24, r25
    1114:	19 f0       	breq	.+6      	; 0x111c <__stack+0x1d>
		n2++;
    1116:	8a 2d       	mov	r24, r10
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	8b 83       	std	Y+3, r24	; 0x03
	
	mask1 =	0xFF << shift;			//mask1 needs to have 0's for each pixel in the top row NOT occupied by new image data	
    111c:	4f ef       	ldi	r20, 0xFF	; 255
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	ca 01       	movw	r24, r20
    1122:	0c 2c       	mov	r0, r12
    1124:	02 c0       	rjmp	.+4      	; 0x112a <__stack+0x2b>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <__stack+0x27>
    112e:	8e 83       	std	Y+6, r24	; 0x06
	mask2 = 0xFF >> (8-( (height+y) % 8) );	//mask2 needs to have 0's for each pixel in the bottom row NOT occupied by new image data
    1130:	26 0f       	add	r18, r22
    1132:	31 1d       	adc	r19, r1
    1134:	27 70       	andi	r18, 0x07	; 7
    1136:	30 70       	andi	r19, 0x00	; 0
	
	if ( ((height+y) % 8) == 0)
    1138:	21 15       	cp	r18, r1
    113a:	31 05       	cpc	r19, r1
    113c:	09 f0       	breq	.+2      	; 0x1140 <__stack+0x41>
    113e:	1e c1       	rjmp	.+572    	; 0x137c <__stack+0x27d>
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	9d 83       	std	Y+5, r25	; 0x05
		mask2=0xff;			//special case of exact fit in last row
		
		offset=0;			//start at the beginning of data
		offset2=-width;			//offset2 points a the previous row
    1144:	83 2d       	mov	r24, r3
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	ee 24       	eor	r14, r14
    114a:	ff 24       	eor	r15, r15
    114c:	e8 1a       	sub	r14, r24
    114e:	f9 0a       	sbc	r15, r25
    1150:	66 95       	lsr	r22
    1152:	66 95       	lsr	r22
    1154:	66 95       	lsr	r22
    1156:	69 83       	std	Y+1, r22	; 0x01
    1158:	1c 86       	std	Y+12, r1	; 0x0c
    115a:	1b 86       	std	Y+11, r1	; 0x0b
    115c:	66 24       	eor	r6, r6
    115e:	77 24       	eor	r7, r7
		//it is necessary to have 2 rows of data, current and previous to do bitblt
		//since 0<width<128 (display is only 128 wide), we can use the second 128 bytes in buffer to hold the previous row

		read_block(x,(row+(y/8)),width,buffer);				//read the row in(background image data)

			for(column=0;column<width;column++)			//loop for columns
    1160:	8b 2c       	mov	r8, r11
    1162:	99 24       	eor	r9, r9
    1164:	a1 e0       	ldi	r26, 0x01	; 1
    1166:	8a 22       	and	r8, r26
    1168:	99 24       	eor	r9, r9
				if (row == 0)		//some special treatment for first and last rows
				{
					//if this is the first row, we need to mask off the blank pixels at the top of the row(these pix have random data)
					temp &= mask1; //mask1 has shift blank pixels starting from LSB (LSB is the top of the stripe) 
				}
				else if (row == (n-1))
    116a:	bc 81       	ldd	r27, Y+4	; 0x04
    116c:	4b 2e       	mov	r4, r27
    116e:	55 24       	eor	r5, r5
    1170:	08 94       	sec
    1172:	41 08       	sbc	r4, r1
    1174:	51 08       	sbc	r5, r1
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
					else if (row == (n-1))
						buffer[column] &= ~mask2;	//last row, clear top bits of background
    1176:	ed 81       	ldd	r30, Y+5	; 0x05
    1178:	e0 95       	com	r30
    117a:	e9 87       	std	Y+9, r30	; 0x09
				 case 6:	//for copy and fill, we don't want the background bits to interfere with the image, so we clear them
				 case 7:
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
    117c:	fe 81       	ldd	r31, Y+6	; 0x06
    117e:	f0 95       	com	r31
    1180:	fa 87       	std	Y+10, r31	; 0x0a
//width is width in pixels
//height is height in pixels
//mode determines how the bits in the image combine with the bits already present on the display 
//mode 0=AND, 1=NAND, 2=OR, 3=NOR, 4=XOR, 5=NXOR, 6=fill(used for block erase, data[0] sets fill byte), 7=copy(overwrites background)
void bitblt(char x, char y, char width, char height, char mode, char* data)
{
    1182:	a6 2c       	mov	r10, r6
    1184:	29 81       	ldd	r18, Y+1	; 0x01
    1186:	26 0d       	add	r18, r6
    1188:	2f 83       	std	Y+7, r18	; 0x07
	{
		//if NULL was passed for data, take it from the serial port. 
		//it is necessary to have 2 rows of data, current and previous to do bitblt
		//since 0<width<128 (display is only 128 wide), we can use the second 128 bytes in buffer to hold the previous row

		read_block(x,(row+(y/8)),width,buffer);				//read the row in(background image data)
    118a:	88 85       	ldd	r24, Y+8	; 0x08
    118c:	62 2f       	mov	r22, r18
    118e:	43 2d       	mov	r20, r3
    1190:	2e e8       	ldi	r18, 0x8E	; 142
    1192:	3c e0       	ldi	r19, 0x0C	; 12
    1194:	0e 94 11 07 	call	0xe22	; 0xe22 <read_block>

			for(column=0;column<width;column++)			//loop for columns
    1198:	33 20       	and	r3, r3
    119a:	09 f4       	brne	.+2      	; 0x119e <__stack+0x9f>
    119c:	e0 c0       	rjmp	.+448    	; 0x135e <__stack+0x25f>
    119e:	6e e0       	ldi	r22, 0x0E	; 14
    11a0:	7d e0       	ldi	r23, 0x0D	; 13
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	50 e0       	ldi	r21, 0x00	; 0
    11a6:	20 c0       	rjmp	.+64     	; 0x11e8 <__stack+0xe9>
					temp = ( (data[0] << shift) | (data[0] >> shift2) );				

				if (row == 0)		//some special treatment for first and last rows
				{
					//if this is the first row, we need to mask off the blank pixels at the top of the row(these pix have random data)
					temp &= mask1; //mask1 has shift blank pixels starting from LSB (LSB is the top of the stripe) 
    11a8:	be 81       	ldd	r27, Y+6	; 0x06
    11aa:	2b 23       	and	r18, r27
					//if this is the last row, we need to maks off the blank pixels at the bottom of the image
					temp &= mask2; //mask2 has blank pixels starting at MSB (MSB is the bottom of the stripe)
				}
								
				//combine image data with background
				switch(mode)	
    11ac:	f3 e0       	ldi	r31, 0x03	; 3
    11ae:	fb 15       	cp	r31, r11
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <__stack+0xb5>
    11b2:	4e c0       	rjmp	.+156    	; 0x1250 <__stack+0x151>
    11b4:	32 e0       	ldi	r19, 0x02	; 2
    11b6:	b3 16       	cp	r11, r19
    11b8:	08 f4       	brcc	.+2      	; 0x11bc <__stack+0xbd>
    11ba:	6d c0       	rjmp	.+218    	; 0x1296 <__stack+0x197>
				 case 1:
					buffer[column] &= temp;			//AND it with buffer
				 break;
				 case 2:
				 case 3:
					buffer[column] |= temp;			//OR it with buffer
    11bc:	fa 01       	movw	r30, r20
    11be:	e2 57       	subi	r30, 0x72	; 114
    11c0:	f3 4f       	sbci	r31, 0xF3	; 243
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2b       	or	r18, r24
    11c6:	20 83       	st	Z, r18
					
					buffer[column] |= temp;			//OR it with buffer
				 break;
				}
			
				if ((mode % 2 == 1) && (mode < 6))
    11c8:	81 14       	cp	r8, r1
    11ca:	91 04       	cpc	r9, r1
    11cc:	31 f0       	breq	.+12     	; 0x11da <__stack+0xdb>
    11ce:	b5 e0       	ldi	r27, 0x05	; 5
    11d0:	bb 15       	cp	r27, r11
    11d2:	18 f0       	brcs	.+6      	; 0x11da <__stack+0xdb>
					buffer[column] = ~buffer[column];	//if we wanted an inverted operation, do it
    11d4:	80 81       	ld	r24, Z
    11d6:	80 95       	com	r24
    11d8:	80 83       	st	Z, r24
    11da:	4f 5f       	subi	r20, 0xFF	; 255
    11dc:	5f 4f       	sbci	r21, 0xFF	; 255
    11de:	6f 5f       	subi	r22, 0xFF	; 255
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
		//it is necessary to have 2 rows of data, current and previous to do bitblt
		//since 0<width<128 (display is only 128 wide), we can use the second 128 bytes in buffer to hold the previous row

		read_block(x,(row+(y/8)),width,buffer);				//read the row in(background image data)

			for(column=0;column<width;column++)			//loop for columns
    11e2:	43 15       	cp	r20, r3
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__stack+0xe9>
    11e6:	bb c0       	rjmp	.+374    	; 0x135e <__stack+0x25f>
			{
				if (data!=NULL)					//decide if data comes from ram or serial			
    11e8:	01 15       	cp	r16, r1
    11ea:	11 05       	cpc	r17, r1
    11ec:	09 f4       	brne	.+2      	; 0x11f0 <__stack+0xf1>
    11ee:	61 c0       	rjmp	.+194    	; 0x12b2 <__stack+0x1b3>
					temp = ( (data[offset++] << shift) | (data[offset2++] >> shift2) );	//data from ram
    11f0:	f8 01       	movw	r30, r16
    11f2:	ee 0d       	add	r30, r14
    11f4:	ff 1d       	adc	r31, r15
    11f6:	20 81       	ld	r18, Z
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	02 2c       	mov	r0, r2
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <__stack+0x103>
    11fe:	35 95       	asr	r19
    1200:	27 95       	ror	r18
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <__stack+0xff>
    1206:	eb 85       	ldd	r30, Y+11	; 0x0b
    1208:	fc 85       	ldd	r31, Y+12	; 0x0c
    120a:	e0 0f       	add	r30, r16
    120c:	f1 1f       	adc	r31, r17
    120e:	80 81       	ld	r24, Z
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0c 2c       	mov	r0, r12
    1214:	02 c0       	rjmp	.+4      	; 0x121a <__stack+0x11b>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <__stack+0x117>
    121e:	28 2b       	or	r18, r24
    1220:	8b 85       	ldd	r24, Y+11	; 0x0b
    1222:	9c 85       	ldd	r25, Y+12	; 0x0c
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	9c 87       	std	Y+12, r25	; 0x0c
    1228:	8b 87       	std	Y+11, r24	; 0x0b
    122a:	08 94       	sec
    122c:	e1 1c       	adc	r14, r1
    122e:	f1 1c       	adc	r15, r1
					}
					temp = ( (RX_temp << shift) | (buffer[128+column] >> shift2) );
					buffer[128+column] = RX_temp;					//store most recent byte for future use
				}
				
				if (mode==6)		//fill is a special case, just use data[0]
    1230:	f6 e0       	ldi	r31, 0x06	; 6
    1232:	bf 16       	cp	r11, r31
    1234:	f1 f0       	breq	.+60     	; 0x1272 <__stack+0x173>
					temp = ( (data[0] << shift) | (data[0] >> shift2) );				

				if (row == 0)		//some special treatment for first and last rows
    1236:	aa 20       	and	r10, r10
    1238:	09 f4       	brne	.+2      	; 0x123c <__stack+0x13d>
    123a:	b6 cf       	rjmp	.-148    	; 0x11a8 <__stack+0xa9>
				{
					//if this is the first row, we need to mask off the blank pixels at the top of the row(these pix have random data)
					temp &= mask1; //mask1 has shift blank pixels starting from LSB (LSB is the top of the stripe) 
				}
				else if (row == (n-1))
    123c:	64 14       	cp	r6, r4
    123e:	75 04       	cpc	r7, r5
    1240:	09 f0       	breq	.+2      	; 0x1244 <__stack+0x145>
    1242:	b4 cf       	rjmp	.-152    	; 0x11ac <__stack+0xad>
				{
					//if this is the last row, we need to maks off the blank pixels at the bottom of the image
					temp &= mask2; //mask2 has blank pixels starting at MSB (MSB is the bottom of the stripe)
    1244:	ed 81       	ldd	r30, Y+5	; 0x05
    1246:	2e 23       	and	r18, r30
				}
								
				//combine image data with background
				switch(mode)	
    1248:	f3 e0       	ldi	r31, 0x03	; 3
    124a:	fb 15       	cp	r31, r11
    124c:	08 f0       	brcs	.+2      	; 0x1250 <__stack+0x151>
    124e:	b2 cf       	rjmp	.-156    	; 0x11b4 <__stack+0xb5>
    1250:	85 e0       	ldi	r24, 0x05	; 5
    1252:	8b 15       	cp	r24, r11
    1254:	38 f5       	brcc	.+78     	; 0x12a4 <__stack+0x1a5>
				 break;
				 case 6:	//for copy and fill, we don't want the background bits to interfere with the image, so we clear them
				 case 7:
				 default:
					
					if (row == 0)
    1256:	aa 20       	and	r10, r10
    1258:	09 f0       	breq	.+2      	; 0x125c <__stack+0x15d>
    125a:	71 c0       	rjmp	.+226    	; 0x133e <__stack+0x23f>
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
    125c:	fa 01       	movw	r30, r20
    125e:	e2 57       	subi	r30, 0x72	; 114
    1260:	f3 4f       	sbci	r31, 0xF3	; 243
    1262:	80 81       	ld	r24, Z
    1264:	9a 85       	ldd	r25, Y+10	; 0x0a
    1266:	89 23       	and	r24, r25
    1268:	80 83       	st	Z, r24
					else if (row == (n-1))
						buffer[column] &= ~mask2;	//last row, clear top bits of background
					else
						buffer[column] = 0;		//middle row, clear all of the background
					
					buffer[column] |= temp;			//OR it with buffer
    126a:	80 81       	ld	r24, Z
    126c:	28 2b       	or	r18, r24
    126e:	20 83       	st	Z, r18
    1270:	ab cf       	rjmp	.-170    	; 0x11c8 <__stack+0xc9>
					temp = ( (RX_temp << shift) | (buffer[128+column] >> shift2) );
					buffer[128+column] = RX_temp;					//store most recent byte for future use
				}
				
				if (mode==6)		//fill is a special case, just use data[0]
					temp = ( (data[0] << shift) | (data[0] >> shift2) );				
    1272:	d8 01       	movw	r26, r16
    1274:	8c 91       	ld	r24, X
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	9c 01       	movw	r18, r24
    127a:	02 2c       	mov	r0, r2
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <__stack+0x183>
    127e:	35 95       	asr	r19
    1280:	27 95       	ror	r18
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <__stack+0x17f>
    1286:	0c 2c       	mov	r0, r12
    1288:	02 c0       	rjmp	.+4      	; 0x128e <__stack+0x18f>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <__stack+0x18b>
    1292:	28 2b       	or	r18, r24
    1294:	d0 cf       	rjmp	.-96     	; 0x1236 <__stack+0x137>
				//combine image data with background
				switch(mode)	
				{
				 case 0:
				 case 1:
					buffer[column] &= temp;			//AND it with buffer
    1296:	fa 01       	movw	r30, r20
    1298:	e2 57       	subi	r30, 0x72	; 114
    129a:	f3 4f       	sbci	r31, 0xF3	; 243
    129c:	80 81       	ld	r24, Z
    129e:	28 23       	and	r18, r24
    12a0:	20 83       	st	Z, r18
    12a2:	92 cf       	rjmp	.-220    	; 0x11c8 <__stack+0xc9>
				 case 3:
					buffer[column] |= temp;			//OR it with buffer
				 break;
				 case 4:
				 case 5:
					buffer[column] ^= temp;			//XOR it with buffer
    12a4:	fa 01       	movw	r30, r20
    12a6:	e2 57       	subi	r30, 0x72	; 114
    12a8:	f3 4f       	sbci	r31, 0xF3	; 243
    12aa:	80 81       	ld	r24, Z
    12ac:	28 27       	eor	r18, r24
    12ae:	20 83       	st	Z, r18
    12b0:	8b cf       	rjmp	.-234    	; 0x11c8 <__stack+0xc9>
			{
				if (data!=NULL)					//decide if data comes from ram or serial			
					temp = ( (data[offset++] << shift) | (data[offset2++] >> shift2) );	//data from ram
				else
				{	
					if (row<n2)					//only read the number of rows in the image
    12b2:	9b 81       	ldd	r25, Y+3	; 0x03
    12b4:	a9 16       	cp	r10, r25
    12b6:	a8 f0       	brcs	.+42     	; 0x12e2 <__stack+0x1e3>
							{
								PORTA |= (1<<CTS);	//resume reception
								RX_pause=0;	//flag it
							}	
					}
					temp = ( (RX_temp << shift) | (buffer[128+column] >> shift2) );
    12b8:	ea 81       	ldd	r30, Y+2	; 0x02
    12ba:	2e 2f       	mov	r18, r30
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	0c 2c       	mov	r0, r12
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <__stack+0x1c7>
    12c2:	22 0f       	add	r18, r18
    12c4:	33 1f       	adc	r19, r19
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <__stack+0x1c3>
    12ca:	db 01       	movw	r26, r22
    12cc:	8c 91       	ld	r24, X
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2c       	mov	r0, r2
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <__stack+0x1d9>
    12d4:	95 95       	asr	r25
    12d6:	87 95       	ror	r24
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <__stack+0x1d5>
    12dc:	28 2b       	or	r18, r24
					buffer[128+column] = RX_temp;					//store most recent byte for future use
    12de:	ec 93       	st	X, r30
    12e0:	a7 cf       	rjmp	.-178    	; 0x1230 <__stack+0x131>
				else
				{	
					if (row<n2)					//only read the number of rows in the image
					{
						//we want bitblt to be fast, so inline RX_get_byte code to avoid the overhead of a function call
						while(RX_bytes==0);							//wait for data to be available
    12e2:	80 91 69 0b 	lds	r24, 0x0B69
    12e6:	88 23       	and	r24, r24
    12e8:	e1 f3       	breq	.-8      	; 0x12e2 <__stack+0x1e3>
						RX_temp = RX_array[RX_read++];				//get char from buffer and increment read pointer
    12ea:	80 91 67 0b 	lds	r24, 0x0B67
    12ee:	90 91 68 0b 	lds	r25, 0x0B68
    12f2:	dc 01       	movw	r26, r24
    12f4:	a3 57       	subi	r26, 0x73	; 115
    12f6:	b4 4f       	sbci	r27, 0xF4	; 244
    12f8:	bc 91       	ld	r27, X
    12fa:	ba 83       	std	Y+2, r27	; 0x02
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	90 93 68 0b 	sts	0x0B68, r25
    1302:	80 93 67 0b 	sts	0x0B67, r24
						if(RX_read >= RX_BUFFER_SIZE) RX_read = 0;	//if the read pointer reaches the end of the buffer, wrap back to the beginning
    1306:	8f 3f       	cpi	r24, 0xFF	; 255
    1308:	91 05       	cpc	r25, r1
    130a:	29 f0       	breq	.+10     	; 0x1316 <__stack+0x217>
    130c:	20 f0       	brcs	.+8      	; 0x1316 <__stack+0x217>
    130e:	10 92 68 0b 	sts	0x0B68, r1
    1312:	10 92 67 0b 	sts	0x0B67, r1
						cli();										//interrupts must be disabled when changing RX_bytes, since it can be chabged here and in the ISR
    1316:	f8 94       	cli
						RX_bytes--;
    1318:	80 91 69 0b 	lds	r24, 0x0B69
    131c:	81 50       	subi	r24, 0x01	; 1
    131e:	80 93 69 0b 	sts	0x0B69, r24
						sei();
    1322:	78 94       	sei
						//check to see if we need to re-enable reception 

						if (RX_pause==1)		//if USART reception is suspended
    1324:	80 91 6a 0b 	lds	r24, 0x0B6A
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	31 f6       	brne	.-116    	; 0x12b8 <__stack+0x1b9>
							if (RX_bytes < (unsigned char)(RX_BUFFER_SIZE *.25) )		//if RX_buffer is suitably empty
    132c:	80 91 69 0b 	lds	r24, 0x0B69
    1330:	80 34       	cpi	r24, 0x40	; 64
    1332:	08 f0       	brcs	.+2      	; 0x1336 <__stack+0x237>
    1334:	c1 cf       	rjmp	.-126    	; 0x12b8 <__stack+0x1b9>
							{
								PORTA |= (1<<CTS);	//resume reception
    1336:	17 9a       	sbi	0x02, 7	; 2
								RX_pause=0;	//flag it
    1338:	10 92 6a 0b 	sts	0x0B6A, r1
    133c:	bd cf       	rjmp	.-134    	; 0x12b8 <__stack+0x1b9>
				 case 7:
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
					else if (row == (n-1))
    133e:	64 14       	cp	r6, r4
    1340:	75 04       	cpc	r7, r5
    1342:	29 f0       	breq	.+10     	; 0x134e <__stack+0x24f>
						buffer[column] &= ~mask2;	//last row, clear top bits of background
					else
						buffer[column] = 0;		//middle row, clear all of the background
    1344:	fa 01       	movw	r30, r20
    1346:	e2 57       	subi	r30, 0x72	; 114
    1348:	f3 4f       	sbci	r31, 0xF3	; 243
    134a:	10 82       	st	Z, r1
    134c:	8e cf       	rjmp	.-228    	; 0x126a <__stack+0x16b>
				 default:
					
					if (row == 0)
						buffer[column] &= ~mask1;	//first row, clear bottom bits of the background
					else if (row == (n-1))
						buffer[column] &= ~mask2;	//last row, clear top bits of background
    134e:	fa 01       	movw	r30, r20
    1350:	e2 57       	subi	r30, 0x72	; 114
    1352:	f3 4f       	sbci	r31, 0xF3	; 243
    1354:	80 81       	ld	r24, Z
    1356:	a9 85       	ldd	r26, Y+9	; 0x09
    1358:	8a 23       	and	r24, r26
    135a:	80 83       	st	Z, r24
    135c:	86 cf       	rjmp	.-244    	; 0x126a <__stack+0x16b>
				}
			
				if ((mode % 2 == 1) && (mode < 6))
					buffer[column] = ~buffer[column];	//if we wanted an inverted operation, do it
			}//end column loop
		write_block(x,(row+(y/8)),width,buffer);	//write new row to display
    135e:	88 85       	ldd	r24, Y+8	; 0x08
    1360:	6f 81       	ldd	r22, Y+7	; 0x07
    1362:	43 2d       	mov	r20, r3
    1364:	2e e8       	ldi	r18, 0x8E	; 142
    1366:	3c e0       	ldi	r19, 0x0C	; 12
    1368:	0e 94 51 06 	call	0xca2	; 0xca2 <write_block>
    136c:	08 94       	sec
    136e:	61 1c       	adc	r6, r1
    1370:	71 1c       	adc	r7, r1
		mask2=0xff;			//special case of exact fit in last row
		
		offset=0;			//start at the beginning of data
		offset2=-width;			//offset2 points a the previous row

	for(row = 0;row < n;row++)		//loop through all rows
    1372:	ec 81       	ldd	r30, Y+4	; 0x04
    1374:	6e 16       	cp	r6, r30
    1376:	08 f4       	brcc	.+2      	; 0x137a <__stack+0x27b>
    1378:	04 cf       	rjmp	.-504    	; 0x1182 <__stack+0x83>
    137a:	8b ce       	rjmp	.-746    	; 0x1092 <bitblt+0x62>
	n2 = height/8;				//number of rows in image
	if (height % 8 != 0)
		n2++;
	
	mask1 =	0xFF << shift;			//mask1 needs to have 0's for each pixel in the top row NOT occupied by new image data	
	mask2 = 0xFF >> (8-( (height+y) % 8) );	//mask2 needs to have 0's for each pixel in the bottom row NOT occupied by new image data
    137c:	88 e0       	ldi	r24, 0x08	; 8
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	82 1b       	sub	r24, r18
    1382:	93 0b       	sbc	r25, r19
    1384:	02 c0       	rjmp	.+4      	; 0x138a <__stack+0x28b>
    1386:	55 95       	asr	r21
    1388:	47 95       	ror	r20
    138a:	8a 95       	dec	r24
    138c:	e2 f7       	brpl	.-8      	; 0x1386 <__stack+0x287>
    138e:	4d 83       	std	Y+5, r20	; 0x05
    1390:	d9 ce       	rjmp	.-590    	; 0x1144 <__stack+0x45>
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    1392:	22 23       	and	r18, r18
    1394:	09 f4       	brne	.+2      	; 0x1398 <__stack+0x299>
    1396:	7d ce       	rjmp	.-774    	; 0x1092 <bitblt+0x62>
    1398:	00 e0       	ldi	r16, 0x00	; 0
			for(column=0;column<width;column++)
    139a:	33 20       	and	r3, r3
    139c:	31 f0       	breq	.+12     	; 0x13aa <__stack+0x2ab>
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    139e:	10 e0       	ldi	r17, 0x00	; 0
			for(column=0;column<width;column++)
				RX_get_byte();			//read it, but do nothing
    13a0:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
			for(column=0;column<width;column++)
    13a4:	1f 5f       	subi	r17, 0xFF	; 255
    13a6:	13 15       	cp	r17, r3
    13a8:	d8 f3       	brcs	.-10     	; 0x13a0 <__stack+0x2a1>
				RX_get_byte();			//read it, but do nothing
		return;
	}
	if ((width<1) || (width > 128))
	{
		for(row=0;row<height;row++)			//loop for all the data that's coming
    13aa:	0f 5f       	subi	r16, 0xFF	; 255
    13ac:	0a 15       	cp	r16, r10
    13ae:	a8 f3       	brcs	.-22     	; 0x139a <__stack+0x29b>
    13b0:	70 ce       	rjmp	.-800    	; 0x1092 <bitblt+0x62>
				RX_get_byte();			//read it, but do nothing
		return;	
	}
	shift = y % 8;				//calculate how much to shift the data bytes to line them up with the pages
	shift2 = 8 - shift;
	n = ((height-1+shift)/8)+1;		//number of pages(rows) the image occupies(need to loop through all of these, each gets pixels changed)
    13b2:	07 96       	adiw	r24, 0x07	; 7
    13b4:	9e ce       	rjmp	.-708    	; 0x10f2 <bitblt+0xc2>

000013b6 <print_char>:


//prints a character to the screen
//at x_offset, y_offset(top/left corner of character). Automatically augments offsets for next write
void print_char(char txt)
{
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    // x_offset counts pixels from the left side of the screen
    // y_offset counts pixels from the top of the screen

    short text_array_offset, j;
    char k;
	text_array_offset = (txt - 32) * font_bytes+3;	// txt-32 is the ascii offset to 'space', font_bytes is the # of bytes/character, and 3 for font width,height,space which are stores at the beginning of the array
    13bc:	90 91 83 0b 	lds	r25, 0x0B83
    13c0:	49 2f       	mov	r20, r25
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	80 97       	sbiw	r24, 0x20	; 32
    13c8:	84 9f       	mul	r24, r20
    13ca:	90 01       	movw	r18, r0
    13cc:	85 9f       	mul	r24, r21
    13ce:	30 0d       	add	r19, r0
    13d0:	94 9f       	mul	r25, r20
    13d2:	30 0d       	add	r19, r0
    13d4:	11 24       	eor	r1, r1
    13d6:	2d 5f       	subi	r18, 0xFD	; 253
    13d8:	3f 4f       	sbci	r19, 0xFF	; 255

	//get data for character
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
    13da:	80 91 73 0b 	lds	r24, 0x0B73
    13de:	88 23       	and	r24, r24
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <print_char+0x2e>
    13e2:	64 c0       	rjmp	.+200    	; 0x14ac <print_char+0xf6>
	{
		if (reverse == 1)
    13e4:	80 91 6b 0b 	lds	r24, 0x0B6B
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <print_char+0x38>
    13ec:	a3 c0       	rjmp	.+326    	; 0x1534 <print_char+0x17e>
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    13ee:	c9 01       	movw	r24, r18
    13f0:	84 0f       	add	r24, r20
    13f2:	95 1f       	adc	r25, r21
    13f4:	28 17       	cp	r18, r24
    13f6:	39 07       	cpc	r19, r25
    13f8:	9c f4       	brge	.+38     	; 0x1420 <print_char+0x6a>
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
	{
		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    13fa:	28 54       	subi	r18, 0x48	; 72
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	bc 01       	movw	r22, r24
    1402:	68 54       	subi	r22, 0x48	; 72
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = pgm_read_byte(&text_array[j]);
    1406:	f9 01       	movw	r30, r18
    1408:	84 91       	lpm	r24, Z+
    140a:	e4 2f       	mov	r30, r20
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	e2 57       	subi	r30, 0x72	; 114
    1410:	f3 4f       	sbci	r31, 0xF3	; 243
    1412:	80 83       	st	Z, r24
    1414:	4f 5f       	subi	r20, 0xFF	; 255
    1416:	2f 5f       	subi	r18, 0xFF	; 255
    1418:	3f 4f       	sbci	r19, 0xFF	; 255
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    141a:	26 17       	cp	r18, r22
    141c:	37 07       	cpc	r19, r23
    141e:	99 f7       	brne	.-26     	; 0x1406 <print_char+0x50>
				buffer[k++] = pgm_read_byte(&aux_text_array[j]);
		}
	}
	//bitblt it
	
	bitblt(x_offset, y_offset, font_w, font_h, font_mode, buffer+128);
    1420:	80 91 71 0b 	lds	r24, 0x0B71
    1424:	60 91 72 0b 	lds	r22, 0x0B72
    1428:	40 91 8d 0c 	lds	r20, 0x0C8D
    142c:	20 91 84 0b 	lds	r18, 0x0B84
    1430:	00 91 63 0b 	lds	r16, 0x0B63
    1434:	7e e0       	ldi	r23, 0x0E	; 14
    1436:	e7 2e       	mov	r14, r23
    1438:	7d e0       	ldi	r23, 0x0D	; 13
    143a:	f7 2e       	mov	r15, r23
    143c:	0e 94 18 08 	call	0x1030	; 0x1030 <bitblt>
	
	x_offset+=font_w+font_space;
    1440:	20 91 8d 0c 	lds	r18, 0x0C8D
    1444:	30 91 8e 0d 	lds	r19, 0x0D8E
    1448:	83 2f       	mov	r24, r19
    144a:	82 0f       	add	r24, r18
    144c:	90 91 71 0b 	lds	r25, 0x0B71
    1450:	89 0f       	add	r24, r25
    1452:	80 93 71 0b 	sts	0x0B71, r24
	
//check x offset and do necessary wrapping
	
    if ((x_offset + font_w + font_space) > 127)
    1456:	48 2f       	mov	r20, r24
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	62 2f       	mov	r22, r18
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	63 0f       	add	r22, r19
    1460:	71 1d       	adc	r23, r1
    1462:	ca 01       	movw	r24, r20
    1464:	86 0f       	add	r24, r22
    1466:	97 1f       	adc	r25, r23
    1468:	80 38       	cpi	r24, 0x80	; 128
    146a:	91 05       	cpc	r25, r1
    146c:	dc f0       	brlt	.+54     	; 0x14a4 <print_char+0xee>
	{
		x_offset = x_offset % (font_w+font_space);	//this makes sure text on the next line will line up with the previous line
    146e:	ca 01       	movw	r24, r20
    1470:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divmodhi4>
    1474:	80 93 71 0b 	sts	0x0B71, r24
		if (y_offset > (64-font_h-font_h))
    1478:	70 91 72 0b 	lds	r23, 0x0B72
    147c:	60 91 84 0b 	lds	r22, 0x0B84
    1480:	86 2f       	mov	r24, r22
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	47 2f       	mov	r20, r23
    1486:	50 e0       	ldi	r21, 0x00	; 0
    1488:	22 27       	eor	r18, r18
    148a:	33 27       	eor	r19, r19
    148c:	28 1b       	sub	r18, r24
    148e:	39 0b       	sbc	r19, r25
    1490:	28 1b       	sub	r18, r24
    1492:	39 0b       	sbc	r19, r25
    1494:	20 5c       	subi	r18, 0xC0	; 192
    1496:	3f 4f       	sbci	r19, 0xFF	; 255
    1498:	24 17       	cp	r18, r20
    149a:	35 07       	cpc	r19, r21
    149c:	34 f1       	brlt	.+76     	; 0x14ea <print_char+0x134>
			y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
		else 
			y_offset += font_h;
    149e:	67 0f       	add	r22, r23
    14a0:	60 93 72 0b 	sts	0x0B72, r22
	}
}
    14a4:	0f 91       	pop	r16
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	08 95       	ret
		}
	}
	else	//using aux font
	{

		if (reverse == 1)
    14ac:	80 91 6b 0b 	lds	r24, 0x0B6B
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	21 f1       	breq	.+72     	; 0x14fc <print_char+0x146>
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    14b4:	c9 01       	movw	r24, r18
    14b6:	84 0f       	add	r24, r20
    14b8:	95 1f       	adc	r25, r21
    14ba:	28 17       	cp	r18, r24
    14bc:	39 07       	cpc	r19, r25
    14be:	0c f0       	brlt	.+2      	; 0x14c2 <print_char+0x10c>
    14c0:	af cf       	rjmp	.-162    	; 0x1420 <print_char+0x6a>
	else	//using aux font
	{

		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    14c2:	2a 56       	subi	r18, 0x6A	; 106
    14c4:	3d 4f       	sbci	r19, 0xFD	; 253
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	bc 01       	movw	r22, r24
    14ca:	6a 56       	subi	r22, 0x6A	; 106
    14cc:	7d 4f       	sbci	r23, 0xFD	; 253
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = pgm_read_byte(&aux_text_array[j]);
    14ce:	f9 01       	movw	r30, r18
    14d0:	84 91       	lpm	r24, Z+
    14d2:	e4 2f       	mov	r30, r20
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	e2 57       	subi	r30, 0x72	; 114
    14d8:	f3 4f       	sbci	r31, 0xF3	; 243
    14da:	80 83       	st	Z, r24
    14dc:	4f 5f       	subi	r20, 0xFF	; 255
    14de:	2f 5f       	subi	r18, 0xFF	; 255
    14e0:	3f 4f       	sbci	r19, 0xFF	; 255
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
		}
		else
		{
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    14e2:	26 17       	cp	r18, r22
    14e4:	37 07       	cpc	r19, r23
    14e6:	99 f7       	brne	.-26     	; 0x14ce <print_char+0x118>
    14e8:	9b cf       	rjmp	.-202    	; 0x1420 <print_char+0x6a>
	
    if ((x_offset + font_w + font_space) > 127)
	{
		x_offset = x_offset % (font_w+font_space);	//this makes sure text on the next line will line up with the previous line
		if (y_offset > (64-font_h-font_h))
			y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
    14ea:	87 2f       	mov	r24, r23
    14ec:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__udivmodqi4>
    14f0:	90 93 72 0b 	sts	0x0B72, r25
		else 
			y_offset += font_h;
	}
}
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	ef 90       	pop	r14
    14fa:	08 95       	ret
	else	//using aux font
	{

		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    14fc:	c9 01       	movw	r24, r18
    14fe:	84 0f       	add	r24, r20
    1500:	95 1f       	adc	r25, r21
    1502:	28 17       	cp	r18, r24
    1504:	39 07       	cpc	r19, r25
    1506:	0c f0       	brlt	.+2      	; 0x150a <print_char+0x154>
    1508:	8b cf       	rjmp	.-234    	; 0x1420 <print_char+0x6a>
    150a:	2a 56       	subi	r18, 0x6A	; 106
    150c:	3d 4f       	sbci	r19, 0xFD	; 253
    150e:	40 e8       	ldi	r20, 0x80	; 128
    1510:	bc 01       	movw	r22, r24
    1512:	6a 56       	subi	r22, 0x6A	; 106
    1514:	7d 4f       	sbci	r23, 0xFD	; 253
				buffer[k++] = ~pgm_read_byte(&aux_text_array[j]);
    1516:	f9 01       	movw	r30, r18
    1518:	84 91       	lpm	r24, Z+
    151a:	e4 2f       	mov	r30, r20
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	e2 57       	subi	r30, 0x72	; 114
    1520:	f3 4f       	sbci	r31, 0xF3	; 243
    1522:	80 95       	com	r24
    1524:	80 83       	st	Z, r24
    1526:	4f 5f       	subi	r20, 0xFF	; 255
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
	else	//using aux font
	{

		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    152c:	26 17       	cp	r18, r22
    152e:	37 07       	cpc	r19, r23
    1530:	91 f7       	brne	.-28     	; 0x1516 <print_char+0x160>
    1532:	76 cf       	rjmp	.-276    	; 0x1420 <print_char+0x6a>
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
	{
		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    1534:	c9 01       	movw	r24, r18
    1536:	84 0f       	add	r24, r20
    1538:	95 1f       	adc	r25, r21
    153a:	28 17       	cp	r18, r24
    153c:	39 07       	cpc	r19, r25
    153e:	0c f0       	brlt	.+2      	; 0x1542 <print_char+0x18c>
    1540:	6f cf       	rjmp	.-290    	; 0x1420 <print_char+0x6a>
    1542:	28 54       	subi	r18, 0x48	; 72
    1544:	3f 4f       	sbci	r19, 0xFF	; 255
    1546:	40 e8       	ldi	r20, 0x80	; 128
    1548:	bc 01       	movw	r22, r24
    154a:	68 54       	subi	r22, 0x48	; 72
    154c:	7f 4f       	sbci	r23, 0xFF	; 255
				buffer[k++] = ~pgm_read_byte(&text_array[j]);
    154e:	f9 01       	movw	r30, r18
    1550:	84 91       	lpm	r24, Z+
    1552:	e4 2f       	mov	r30, r20
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	e2 57       	subi	r30, 0x72	; 114
    1558:	f3 4f       	sbci	r31, 0xF3	; 243
    155a:	80 95       	com	r24
    155c:	80 83       	st	Z, r24
    155e:	4f 5f       	subi	r20, 0xFF	; 255
    1560:	2f 5f       	subi	r18, 0xFF	; 255
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
	k=128;			//put in upper half of buffer, lower half is used by bitblt
	if (aux_font==0)	//using default font?
	{
		if (reverse == 1)
		{	
			for (j=text_array_offset; j < text_array_offset + font_bytes; j++) //loop for one character worth of bytes 
    1564:	26 17       	cp	r18, r22
    1566:	37 07       	cpc	r19, r23
    1568:	91 f7       	brne	.-28     	; 0x154e <print_char+0x198>
    156a:	5a cf       	rjmp	.-332    	; 0x1420 <print_char+0x6a>

0000156c <read_byte>:
        }
}


char read_byte(char byte, char side)
{
    156c:	1f 93       	push	r17
    156e:	16 2f       	mov	r17, r22
	set_x(byte);
    1570:	80 64       	ori	r24, 0x40	; 64
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
	return read_data_LCD(side);
    1578:	81 2f       	mov	r24, r17
    157a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <read_data_LCD>
}
    157e:	1f 91       	pop	r17
    1580:	08 95       	ret

00001582 <pixel>:
	}//row loop
}

//mapping to Cartesian coordinates, (0,0) is in the lower left corner, (127,63) is in the upper right
void pixel(char S_R, char x, char y)
{
    1582:	ef 92       	push	r14
    1584:	ff 92       	push	r15
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	f8 2e       	mov	r15, r24
	static char temp_page, temp_side, temp_x = 0, temp_data1 = 0, temp_data2 = 0;
	
	//don't try to print something outside of our range
	if (x > 127) return;
    158c:	67 fd       	sbrc	r22, 7
    158e:	52 c0       	rjmp	.+164    	; 0x1634 <pixel+0xb2>
	if (y > 63) return;
    1590:	40 34       	cpi	r20, 0x40	; 64
    1592:	08 f0       	brcs	.+2      	; 0x1596 <pixel+0x14>
    1594:	4f c0       	rjmp	.+158    	; 0x1634 <pixel+0xb2>
	
	y=63-y;	
    1596:	5f e3       	ldi	r21, 0x3F	; 63
    1598:	54 1b       	sub	r21, r20

	if (reverse == 1) S_R ^= 1;
    159a:	80 91 6b 0b 	lds	r24, 0x0B6B
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <pixel+0x22>
    15a2:	58 c0       	rjmp	.+176    	; 0x1654 <pixel+0xd2>
	
	if (x >= 64) temp_side = 2, temp_x = x - 64;
    15a4:	60 34       	cpi	r22, 0x40	; 64
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <pixel+0x28>
    15a8:	4a c0       	rjmp	.+148    	; 0x163e <pixel+0xbc>
	else temp_side = 1, temp_x = x;
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	80 93 7f 0b 	sts	0x0B7F, r24
    15b0:	60 93 7e 0b 	sts	0x0B7E, r22
		
	temp_page = 7 - (y >> 3);
    15b4:	95 2f       	mov	r25, r21
    15b6:	96 95       	lsr	r25
    15b8:	96 95       	lsr	r25
    15ba:	96 95       	lsr	r25
    15bc:	87 e0       	ldi	r24, 0x07	; 7
    15be:	89 1b       	sub	r24, r25
    15c0:	80 93 80 0b 	sts	0x0B80, r24
		
	//data = (1 << (y - ((7 - temp_page) * 8)));

	temp_data1 = (1 << (7 - (y - ((7 - temp_page) * 8))));
    15c4:	27 e0       	ldi	r18, 0x07	; 7
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	b9 01       	movw	r22, r18
    15ca:	65 1b       	sub	r22, r21
    15cc:	71 09       	sbc	r23, r1
    15ce:	ab 01       	movw	r20, r22
    15d0:	28 1b       	sub	r18, r24
    15d2:	31 09       	sbc	r19, r1
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	42 0f       	add	r20, r18
    15e2:	53 1f       	adc	r21, r19
    15e4:	21 e0       	ldi	r18, 0x01	; 1
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <pixel+0x6c>
    15ea:	22 0f       	add	r18, r18
    15ec:	33 1f       	adc	r19, r19
    15ee:	4a 95       	dec	r20
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <pixel+0x68>
    15f2:	12 2f       	mov	r17, r18
    15f4:	20 93 7d 0b 	sts	0x0B7D, r18
		
	set_page(temp_page);
    15f8:	88 6b       	ori	r24, 0xB8	; 184
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
				
	//need to read the existing byte here, then or it with the new byte
	temp_data2 = read_byte(temp_x, temp_side);
    1600:	00 91 7e 0b 	lds	r16, 0x0B7E
    1604:	e0 90 7f 0b 	lds	r14, 0x0B7F
    1608:	80 2f       	mov	r24, r16
    160a:	6e 2d       	mov	r22, r14
    160c:	0e 94 b6 0a 	call	0x156c	; 0x156c <read_byte>
    1610:	80 93 7c 0b 	sts	0x0B7C, r24
		
	if (S_R == 0)
    1614:	ff 20       	and	r15, r15
    1616:	d1 f4       	brne	.+52     	; 0x164c <pixel+0xca>
	{
		temp_data1 = ~temp_data1;
    1618:	10 95       	com	r17
		temp_data1 &= temp_data2;
    161a:	18 23       	and	r17, r24
    161c:	10 93 7d 0b 	sts	0x0B7D, r17
	}
	else temp_data1 |= temp_data2;
		
	set_x(temp_x);//reset this...
    1620:	80 2f       	mov	r24, r16
    1622:	80 64       	ori	r24, 0x40	; 64
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
	write_data_LCD(temp_data1, temp_side);
    162a:	80 91 7d 0b 	lds	r24, 0x0B7D
    162e:	6e 2d       	mov	r22, r14
    1630:	0e 94 27 06 	call	0xc4e	; 0xc4e <write_data_LCD>
}
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	08 95       	ret
	
	y=63-y;	

	if (reverse == 1) S_R ^= 1;
	
	if (x >= 64) temp_side = 2, temp_x = x - 64;
    163e:	82 e0       	ldi	r24, 0x02	; 2
    1640:	80 93 7f 0b 	sts	0x0B7F, r24
    1644:	60 54       	subi	r22, 0x40	; 64
    1646:	60 93 7e 0b 	sts	0x0B7E, r22
    164a:	b4 cf       	rjmp	.-152    	; 0x15b4 <pixel+0x32>
	if (S_R == 0)
	{
		temp_data1 = ~temp_data1;
		temp_data1 &= temp_data2;
	}
	else temp_data1 |= temp_data2;
    164c:	18 2b       	or	r17, r24
    164e:	10 93 7d 0b 	sts	0x0B7D, r17
    1652:	e6 cf       	rjmp	.-52     	; 0x1620 <pixel+0x9e>
	if (x > 127) return;
	if (y > 63) return;
	
	y=63-y;	

	if (reverse == 1) S_R ^= 1;
    1654:	f8 26       	eor	r15, r24
    1656:	a6 cf       	rjmp	.-180    	; 0x15a4 <pixel+0x22>

00001658 <line>:
}


//draws (S_R = 1) or erases (S_R = 0) a line from x0, y0 to x1, y1 using Bresenham's line algorithm.
void line(char S_R, char x0, char y0, char x1, char y1)
{
    1658:	4f 92       	push	r4
    165a:	5f 92       	push	r5
    165c:	6f 92       	push	r6
    165e:	7f 92       	push	r7
    1660:	8f 92       	push	r8
    1662:	9f 92       	push	r9
    1664:	af 92       	push	r10
    1666:	bf 92       	push	r11
    1668:	cf 92       	push	r12
    166a:	df 92       	push	r13
    166c:	ef 92       	push	r14
    166e:	ff 92       	push	r15
    1670:	0f 93       	push	r16
    1672:	1f 93       	push	r17
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	48 2e       	mov	r4, r24
    167a:	a4 2f       	mov	r26, r20
    167c:	72 2f       	mov	r23, r18
	
	unsigned char steep;
	unsigned char swp;

    steep = (abs(y1 - y0) > abs(x1 - x0));
    167e:	40 2f       	mov	r20, r16
    1680:	50 e0       	ldi	r21, 0x00	; 0
    1682:	ea 2f       	mov	r30, r26
    1684:	f0 e0       	ldi	r31, 0x00	; 0
    1686:	e2 2e       	mov	r14, r18
    1688:	ff 24       	eor	r15, r15
    168a:	a6 2e       	mov	r10, r22
    168c:	bb 24       	eor	r11, r11
    168e:	55 24       	eor	r5, r5
    1690:	9a 01       	movw	r18, r20
    1692:	2e 1b       	sub	r18, r30
    1694:	3f 0b       	sbc	r19, r31
    1696:	37 fd       	sbrc	r19, 7
    1698:	80 c0       	rjmp	.+256    	; 0x179a <line+0x142>
    169a:	c7 01       	movw	r24, r14
    169c:	8a 19       	sub	r24, r10
    169e:	9b 09       	sbc	r25, r11
    16a0:	97 fd       	sbrc	r25, 7
    16a2:	83 c0       	rjmp	.+262    	; 0x17aa <line+0x152>
    16a4:	82 17       	cp	r24, r18
    16a6:	93 07       	cpc	r25, r19
    16a8:	74 f4       	brge	.+28     	; 0x16c6 <line+0x6e>
    16aa:	55 24       	eor	r5, r5
    16ac:	53 94       	inc	r5
    if (steep) 
    16ae:	8a 2f       	mov	r24, r26
    16b0:	a6 2f       	mov	r26, r22
    16b2:	68 2f       	mov	r22, r24
    16b4:	80 2f       	mov	r24, r16
    16b6:	07 2f       	mov	r16, r23
    16b8:	78 2f       	mov	r23, r24
    16ba:	cf 01       	movw	r24, r30
    16bc:	f5 01       	movw	r30, r10
    16be:	5c 01       	movw	r10, r24
    16c0:	ca 01       	movw	r24, r20
    16c2:	a7 01       	movw	r20, r14
    16c4:	7c 01       	movw	r14, r24
		swp=x1;
		x1=y1;
		y1=swp;
	}

    if (x0 > x1) 
    16c6:	76 17       	cp	r23, r22
    16c8:	08 f4       	brcc	.+2      	; 0x16cc <line+0x74>
    16ca:	54 c0       	rjmp	.+168    	; 0x1774 <line+0x11c>
    16cc:	c7 01       	movw	r24, r14
    16ce:	75 01       	movw	r14, r10
    16d0:	5c 01       	movw	r10, r24
    16d2:	ca 01       	movw	r24, r20
    16d4:	af 01       	movw	r20, r30
    16d6:	fc 01       	movw	r30, r24
		y0=y1;
		y1=swp;
	}

	int deltax = x1 - x0;
	int deltay = abs(y1 - y0);
    16d8:	6f 01       	movw	r12, r30
    16da:	c4 1a       	sub	r12, r20
    16dc:	d5 0a       	sbc	r13, r21
    16de:	d7 fc       	sbrc	r13, 7
    16e0:	51 c0       	rjmp	.+162    	; 0x1784 <line+0x12c>
	int error = deltax / 2;
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
    16e2:	a0 17       	cp	r26, r16
    16e4:	08 f4       	brcc	.+2      	; 0x16e8 <line+0x90>
    16e6:	55 c0       	rjmp	.+170    	; 0x1792 <line+0x13a>
    16e8:	66 24       	eor	r6, r6
    16ea:	6a 94       	dec	r6
    16ec:	76 2c       	mov	r7, r6
        for (x = x0; x <= x1; ++x)
    16ee:	ae 14       	cp	r10, r14
    16f0:	bf 04       	cpc	r11, r15
    16f2:	7c f1       	brlt	.+94     	; 0x1752 <line+0xfa>
		swp=y0;
		y0=y1;
		y1=swp;
	}

	int deltax = x1 - x0;
    16f4:	45 01       	movw	r8, r10
    16f6:	8e 18       	sub	r8, r14
    16f8:	9f 08       	sbc	r9, r15
	int deltay = abs(y1 - y0);
	int error = deltax / 2;
    16fa:	c4 01       	movw	r24, r8
    16fc:	97 fc       	sbrc	r9, 7
    16fe:	59 c0       	rjmp	.+178    	; 0x17b2 <line+0x15a>
    1700:	ec 01       	movw	r28, r24
    1702:	d5 95       	asr	r29
    1704:	c7 95       	ror	r28
    1706:	8a 01       	movw	r16, r20
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <line+0xd0>
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
        for (x = x0; x <= x1; ++x)
	{
            if (steep) pixel(S_R,y,x); else pixel(S_R,x,y);
    170a:	84 2d       	mov	r24, r4
    170c:	60 2f       	mov	r22, r16
    170e:	4e 2d       	mov	r20, r14
    1710:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>

            error = error - deltay;
    1714:	cc 19       	sub	r28, r12
    1716:	dd 09       	sbc	r29, r13
		if (error < 0) 
    1718:	d7 fd       	sbrc	r29, 7
    171a:	11 c0       	rjmp	.+34     	; 0x173e <line+0xe6>
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
        for (x = x0; x <= x1; ++x)
    171c:	08 94       	sec
    171e:	e1 1c       	adc	r14, r1
    1720:	f1 1c       	adc	r15, r1
    1722:	ae 14       	cp	r10, r14
    1724:	bf 04       	cpc	r11, r15
    1726:	ac f0       	brlt	.+42     	; 0x1752 <line+0xfa>
	{
            if (steep) pixel(S_R,y,x); else pixel(S_R,x,y);
    1728:	55 20       	and	r5, r5
    172a:	79 f7       	brne	.-34     	; 0x170a <line+0xb2>
    172c:	84 2d       	mov	r24, r4
    172e:	6e 2d       	mov	r22, r14
    1730:	40 2f       	mov	r20, r16
    1732:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>

            error = error - deltay;
    1736:	cc 19       	sub	r28, r12
    1738:	dd 09       	sbc	r29, r13
		if (error < 0) 
    173a:	d7 ff       	sbrs	r29, 7
    173c:	ef cf       	rjmp	.-34     	; 0x171c <line+0xc4>
		{
			y = y + ystep;
    173e:	06 0d       	add	r16, r6
    1740:	17 1d       	adc	r17, r7
			error = error + deltax;
    1742:	c8 0d       	add	r28, r8
    1744:	d9 1d       	adc	r29, r9
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
        for (x = x0; x <= x1; ++x)
    1746:	08 94       	sec
    1748:	e1 1c       	adc	r14, r1
    174a:	f1 1c       	adc	r15, r1
    174c:	ae 14       	cp	r10, r14
    174e:	bf 04       	cpc	r11, r15
    1750:	5c f7       	brge	.-42     	; 0x1728 <line+0xd0>
		{
			y = y + ystep;
			error = error + deltax;
		}
        }
}
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	1f 91       	pop	r17
    1758:	0f 91       	pop	r16
    175a:	ff 90       	pop	r15
    175c:	ef 90       	pop	r14
    175e:	df 90       	pop	r13
    1760:	cf 90       	pop	r12
    1762:	bf 90       	pop	r11
    1764:	af 90       	pop	r10
    1766:	9f 90       	pop	r9
    1768:	8f 90       	pop	r8
    176a:	7f 90       	pop	r7
    176c:	6f 90       	pop	r6
    176e:	5f 90       	pop	r5
    1770:	4f 90       	pop	r4
    1772:	08 95       	ret
		swp=x1;
		x1=y1;
		y1=swp;
	}

    if (x0 > x1) 
    1774:	80 2f       	mov	r24, r16
    1776:	0a 2f       	mov	r16, r26
    1778:	a8 2f       	mov	r26, r24
		y0=y1;
		y1=swp;
	}

	int deltax = x1 - x0;
	int deltay = abs(y1 - y0);
    177a:	6f 01       	movw	r12, r30
    177c:	c4 1a       	sub	r12, r20
    177e:	d5 0a       	sbc	r13, r21
    1780:	d7 fe       	sbrs	r13, 7
    1782:	af cf       	rjmp	.-162    	; 0x16e2 <line+0x8a>
    1784:	d0 94       	com	r13
    1786:	c1 94       	neg	r12
    1788:	d1 08       	sbc	r13, r1
    178a:	d3 94       	inc	r13
	int error = deltax / 2;
	int ystep;
	int y = y0;
	int x;

        if (y0 < y1) ystep = 1; else ystep = -1;
    178c:	a0 17       	cp	r26, r16
    178e:	08 f0       	brcs	.+2      	; 0x1792 <line+0x13a>
    1790:	ab cf       	rjmp	.-170    	; 0x16e8 <line+0x90>
    1792:	a1 e0       	ldi	r26, 0x01	; 1
    1794:	6a 2e       	mov	r6, r26
    1796:	71 2c       	mov	r7, r1
    1798:	aa cf       	rjmp	.-172    	; 0x16ee <line+0x96>
{
	
	unsigned char steep;
	unsigned char swp;

    steep = (abs(y1 - y0) > abs(x1 - x0));
    179a:	30 95       	com	r19
    179c:	21 95       	neg	r18
    179e:	3f 4f       	sbci	r19, 0xFF	; 255
    17a0:	c7 01       	movw	r24, r14
    17a2:	8a 19       	sub	r24, r10
    17a4:	9b 09       	sbc	r25, r11
    17a6:	97 ff       	sbrs	r25, 7
    17a8:	7d cf       	rjmp	.-262    	; 0x16a4 <line+0x4c>
    17aa:	90 95       	com	r25
    17ac:	81 95       	neg	r24
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	79 cf       	rjmp	.-270    	; 0x16a4 <line+0x4c>
		y1=swp;
	}

	int deltax = x1 - x0;
	int deltay = abs(y1 - y0);
	int error = deltax / 2;
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	a5 cf       	rjmp	.-182    	; 0x1700 <line+0xa8>

000017b6 <circle>:
}


//draws (S_R = 1) or erases (S_R = 0) a circle at x, y with radius r, using midpoint circle algorithm
void circle(char S_R, int x0, int y0, int r)
{
    17b6:	2f 92       	push	r2
    17b8:	3f 92       	push	r3
    17ba:	4f 92       	push	r4
    17bc:	5f 92       	push	r5
    17be:	6f 92       	push	r6
    17c0:	7f 92       	push	r7
    17c2:	8f 92       	push	r8
    17c4:	9f 92       	push	r9
    17c6:	af 92       	push	r10
    17c8:	bf 92       	push	r11
    17ca:	cf 92       	push	r12
    17cc:	df 92       	push	r13
    17ce:	ef 92       	push	r14
    17d0:	ff 92       	push	r15
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	c8 2e       	mov	r12, r24
    17dc:	46 2e       	mov	r4, r22
    17de:	54 2e       	mov	r5, r20
    17e0:	79 01       	movw	r14, r18
	int ddF_x = 1;
	int ddF_y = -2 * r;
	int x = 0;
	int y = r;
 
  pixel(S_R, x0, y0 + r);
    17e2:	42 2f       	mov	r20, r18
    17e4:	45 0d       	add	r20, r5
    17e6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
  pixel(S_R, x0, y0 - r);
    17ea:	45 2d       	mov	r20, r5
    17ec:	4e 19       	sub	r20, r14
    17ee:	8c 2d       	mov	r24, r12
    17f0:	64 2d       	mov	r22, r4
    17f2:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
  pixel(S_R, x0 + r, y0);
    17f6:	6e 2d       	mov	r22, r14
    17f8:	64 0d       	add	r22, r4
    17fa:	8c 2d       	mov	r24, r12
    17fc:	45 2d       	mov	r20, r5
    17fe:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
  pixel(S_R, x0 - r, y0);
    1802:	64 2d       	mov	r22, r4
    1804:	6e 19       	sub	r22, r14
    1806:	8c 2d       	mov	r24, r12
    1808:	45 2d       	mov	r20, r5
    180a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
 
  while(x < y)
    180e:	1e 14       	cp	r1, r14
    1810:	1f 04       	cpc	r1, r15
    1812:	0c f0       	brlt	.+2      	; 0x1816 <circle+0x60>
    1814:	63 c0       	rjmp	.+198    	; 0x18dc <circle+0x126>

//draws (S_R = 1) or erases (S_R = 0) a circle at x, y with radius r, using midpoint circle algorithm
void circle(char S_R, int x0, int y0, int r)
{
	
	int f = 1 - r;
    1816:	c1 e0       	ldi	r28, 0x01	; 1
    1818:	d0 e0       	ldi	r29, 0x00	; 0
    181a:	ce 19       	sub	r28, r14
    181c:	df 09       	sbc	r29, r15
	int ddF_x = 1;
	int ddF_y = -2 * r;
    181e:	c7 01       	movw	r24, r14
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	22 24       	eor	r2, r2
    1826:	33 24       	eor	r3, r3
    1828:	28 1a       	sub	r2, r24
    182a:	39 0a       	sbc	r3, r25
    182c:	47 01       	movw	r8, r14
    182e:	b1 e0       	ldi	r27, 0x01	; 1
    1830:	6b 2e       	mov	r6, r27
    1832:	71 2c       	mov	r7, r1
    1834:	aa 24       	eor	r10, r10
    1836:	bb 24       	eor	r11, r11
    1838:	06 c0       	rjmp	.+12     	; 0x1846 <circle+0x90>
      y--;
      ddF_y += 2;
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    183a:	82 e0       	ldi	r24, 0x02	; 2
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	68 0e       	add	r6, r24
    1840:	79 1e       	adc	r7, r25
    f += ddF_x;    
    1842:	c6 0d       	add	r28, r6
    1844:	d7 1d       	adc	r29, r7
  pixel(S_R, x0 + r, y0);
  pixel(S_R, x0 - r, y0);
 
  while(x < y)
  {
    if(f >= 0) 
    1846:	d7 fd       	sbrc	r29, 7
    1848:	09 c0       	rjmp	.+18     	; 0x185c <circle+0xa6>
    {
      y--;
    184a:	08 94       	sec
    184c:	81 08       	sbc	r8, r1
    184e:	91 08       	sbc	r9, r1
      ddF_y += 2;
    1850:	82 e0       	ldi	r24, 0x02	; 2
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	28 0e       	add	r2, r24
    1856:	39 1e       	adc	r3, r25
      f += ddF_y;
    1858:	c2 0d       	add	r28, r2
    185a:	d3 1d       	adc	r29, r3
    }
    x++;
    185c:	08 94       	sec
    185e:	a1 1c       	adc	r10, r1
    1860:	b1 1c       	adc	r11, r1
}


//draws (S_R = 1) or erases (S_R = 0) a circle at x, y with radius r, using midpoint circle algorithm
void circle(char S_R, int x0, int y0, int r)
{
    1862:	da 2c       	mov	r13, r10
    1864:	d4 0c       	add	r13, r4
      f += ddF_y;
    }
    x++;
    ddF_x += 2;
    f += ddF_x;    
    pixel(S_R, x0 + x, y0 + y);
    1866:	18 2d       	mov	r17, r8
    1868:	15 0d       	add	r17, r5
    186a:	8c 2d       	mov	r24, r12
    186c:	6d 2d       	mov	r22, r13
    186e:	41 2f       	mov	r20, r17
    1870:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    1874:	e4 2c       	mov	r14, r4
    1876:	ea 18       	sub	r14, r10
    pixel(S_R, x0 - x, y0 + y);
    1878:	8c 2d       	mov	r24, r12
    187a:	6e 2d       	mov	r22, r14
    187c:	41 2f       	mov	r20, r17
    187e:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    pixel(S_R, x0 + x, y0 - y);
    1882:	15 2d       	mov	r17, r5
    1884:	18 19       	sub	r17, r8
    1886:	8c 2d       	mov	r24, r12
    1888:	6d 2d       	mov	r22, r13
    188a:	41 2f       	mov	r20, r17
    188c:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    pixel(S_R, x0 - x, y0 - y);
    1890:	8c 2d       	mov	r24, r12
    1892:	6e 2d       	mov	r22, r14
    1894:	41 2f       	mov	r20, r17
    1896:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    pixel(S_R, x0 + y, y0 + x);
    189a:	e8 2c       	mov	r14, r8
    189c:	e4 0c       	add	r14, r4
    189e:	1a 2d       	mov	r17, r10
    18a0:	15 0d       	add	r17, r5
    18a2:	8c 2d       	mov	r24, r12
    18a4:	6e 2d       	mov	r22, r14
    18a6:	41 2f       	mov	r20, r17
    18a8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    pixel(S_R, x0 - y, y0 + x);
    18ac:	94 2d       	mov	r25, r4
    18ae:	98 19       	sub	r25, r8
    18b0:	09 2f       	mov	r16, r25
    18b2:	8c 2d       	mov	r24, r12
    18b4:	69 2f       	mov	r22, r25
    18b6:	41 2f       	mov	r20, r17
    18b8:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    18bc:	15 2d       	mov	r17, r5
    18be:	1a 19       	sub	r17, r10
    pixel(S_R, x0 + y, y0 - x);
    18c0:	8c 2d       	mov	r24, r12
    18c2:	6e 2d       	mov	r22, r14
    18c4:	41 2f       	mov	r20, r17
    18c6:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    pixel(S_R, x0 - y, y0 - x);
    18ca:	8c 2d       	mov	r24, r12
    18cc:	60 2f       	mov	r22, r16
    18ce:	41 2f       	mov	r20, r17
    18d0:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
  pixel(S_R, x0, y0 + r);
  pixel(S_R, x0, y0 - r);
  pixel(S_R, x0 + r, y0);
  pixel(S_R, x0 - r, y0);
 
  while(x < y)
    18d4:	a8 14       	cp	r10, r8
    18d6:	b9 04       	cpc	r11, r9
    18d8:	0c f4       	brge	.+2      	; 0x18dc <circle+0x126>
    18da:	af cf       	rjmp	.-162    	; 0x183a <circle+0x84>
    pixel(S_R, x0 + y, y0 + x);
    pixel(S_R, x0 - y, y0 + x);
    pixel(S_R, x0 + y, y0 - x);
    pixel(S_R, x0 - y, y0 - x);
  }
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
    18f2:	8f 90       	pop	r8
    18f4:	7f 90       	pop	r7
    18f6:	6f 90       	pop	r6
    18f8:	5f 90       	pop	r5
    18fa:	4f 90       	pop	r4
    18fc:	3f 90       	pop	r3
    18fe:	2f 90       	pop	r2
    1900:	08 95       	ret

00001902 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1902:	f9 99       	sbic	0x1f, 1	; 31
    1904:	fe cf       	rjmp	.-4      	; 0x1902 <EEPROM_write>
;
/* Set up address and Data Registers */
EEAR = uiAddress;
    1906:	92 bd       	out	0x22, r25	; 34
    1908:	81 bd       	out	0x21, r24	; 33
EEDR = ucData;
    190a:	60 bd       	out	0x20, r22	; 32
/* Write logical one to EEMPE */
EECR |= (1<<EEMPE);
    190c:	fa 9a       	sbi	0x1f, 2	; 31
/* Start eeprom write by setting EEPE */
EECR |= (1<<EEPE);
    190e:	f9 9a       	sbi	0x1f, 1	; 31
}
    1910:	08 95       	ret

00001912 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEPE))
    1912:	f9 99       	sbic	0x1f, 1	; 31
    1914:	fe cf       	rjmp	.-4      	; 0x1912 <EEPROM_read>
;
/* Set up address register */
EEAR = uiAddress;
    1916:	92 bd       	out	0x22, r25	; 34
    1918:	81 bd       	out	0x21, r24	; 33
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    191a:	f8 9a       	sbi	0x1f, 0	; 31
/* Return data from Data Register */
return EEDR;
    191c:	80 b5       	in	r24, 0x20	; 32
}
    191e:	08 95       	ret

00001920 <set_backlight>:

void set_backlight(unsigned char dutycycle)
{
	//Set up Timer 0
	TCCR0A = 0x02;//CTC mode
    1920:	22 e0       	ldi	r18, 0x02	; 2
    1922:	24 bd       	out	0x24, r18	; 36
	//OCR0A = dutycycle;
	
	//SREG |= 0x80;
	
	
	if(BL_dutycycle >= 100)
    1924:	90 91 39 01 	lds	r25, 0x0139
    1928:	94 36       	cpi	r25, 0x64	; 100
    192a:	a0 f4       	brcc	.+40     	; 0x1954 <set_backlight+0x34>
		TIMSK0 = 0;//disable timer ints
		
		//Backlight on
		PORTA |= (1<<BL_EN);
	}
	else if (BL_dutycycle == 0)
    192c:	99 23       	and	r25, r25
    192e:	69 f0       	breq	.+26     	; 0x194a <set_backlight+0x2a>
	}
	
	
	else
	{
		TCCR0B = 0;
    1930:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
    1932:	10 92 6e 00 	sts	0x006E, r1
		
		OCR0A = 100 - BL_dutycycle;
    1936:	84 e6       	ldi	r24, 0x64	; 100
    1938:	89 1b       	sub	r24, r25
    193a:	87 bd       	out	0x27, r24	; 39
		
		TIMSK0 = 0x02;//enable match on A
    193c:	20 93 6e 00 	sts	0x006E, r18
		TCCR0B = 0x02;
    1940:	25 bd       	out	0x25, r18	; 37
		
		SREG |= 0x80;
    1942:	8f b7       	in	r24, 0x3f	; 63
    1944:	80 68       	ori	r24, 0x80	; 128
    1946:	8f bf       	out	0x3f, r24	; 63
    1948:	08 95       	ret
		//Backlight on
		PORTA |= (1<<BL_EN);
	}
	else if (BL_dutycycle == 0)
	{
		TCCR0B = 0;
    194a:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
    194c:	10 92 6e 00 	sts	0x006E, r1

		
		//Backlight off
		PORTA &= (~(1<<BL_EN));
    1950:	13 98       	cbi	0x02, 3	; 2
    1952:	08 95       	ret
	//SREG |= 0x80;
	
	
	if(BL_dutycycle >= 100)
	{
		TCCR0B = 0;
    1954:	15 bc       	out	0x25, r1	; 37
		TIMSK0 = 0;//disable timer ints
    1956:	10 92 6e 00 	sts	0x006E, r1
		
		//Backlight on
		PORTA |= (1<<BL_EN);
    195a:	13 9a       	sbi	0x02, 3	; 2
    195c:	08 95       	ret

0000195e <draw_block>:

//draws a block on the screen. Block is described
//by a diagonal line from x, y1 to x2, y2
//block is filled with byte data (describes a vertical row of 8 pixels, use 0x00 to clear the block, 0xFF to fill it, etc)
void draw_block(char x1, char y1, char x2, char y2, char data)
{
    195e:	ef 92       	push	r14
    1960:	ff 92       	push	r15
    1962:	0f 93       	push	r16
    1964:	df 93       	push	r29
    1966:	cf 93       	push	r28
    1968:	0f 92       	push	r0
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	52 2f       	mov	r21, r18
	static signed int width = 0, height = 0,x,y;
	char n;
	n=data;
	if (x1>x2)
    1970:	48 17       	cp	r20, r24
    1972:	a0 f5       	brcc	.+104    	; 0x19dc <draw_block+0x7e>
	{
		width=x1-x2;
    1974:	24 2f       	mov	r18, r20
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	82 1b       	sub	r24, r18
    197c:	93 0b       	sbc	r25, r19
    197e:	90 93 7b 0b 	sts	0x0B7B, r25
    1982:	80 93 7a 0b 	sts	0x0B7A, r24
		x=x2;
    1986:	30 93 77 0b 	sts	0x0B77, r19
    198a:	20 93 76 0b 	sts	0x0B76, r18
	else
	{
		width=x2-x1;
		x=x1;
	}
	if (y1>y2)
    198e:	56 17       	cp	r21, r22
    1990:	a8 f1       	brcs	.+106    	; 0x19fc <draw_block+0x9e>
		height=y1-y2;
		y=y2;
	}	
	else
	{
		height=y2-y1;
    1992:	26 2f       	mov	r18, r22
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	85 2f       	mov	r24, r21
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	82 1b       	sub	r24, r18
    199c:	93 0b       	sbc	r25, r19
    199e:	90 93 79 0b 	sts	0x0B79, r25
    19a2:	80 93 78 0b 	sts	0x0B78, r24
		y=y1;
    19a6:	30 93 75 0b 	sts	0x0B75, r19
    19aa:	20 93 74 0b 	sts	0x0B74, r18
	}
	
	bitblt(x, y, width, height, 6, &n);	//use erase mode of bitblt
    19ae:	80 91 76 0b 	lds	r24, 0x0B76
    19b2:	60 91 74 0b 	lds	r22, 0x0B74
    19b6:	40 91 7a 0b 	lds	r20, 0x0B7A
    19ba:	20 91 78 0b 	lds	r18, 0x0B78
//block is filled with byte data (describes a vertical row of 8 pixels, use 0x00 to clear the block, 0xFF to fill it, etc)
void draw_block(char x1, char y1, char x2, char y2, char data)
{
	static signed int width = 0, height = 0,x,y;
	char n;
	n=data;
    19be:	09 83       	std	Y+1, r16	; 0x01
	{
		height=y2-y1;
		y=y1;
	}
	
	bitblt(x, y, width, height, 6, &n);	//use erase mode of bitblt
    19c0:	06 e0       	ldi	r16, 0x06	; 6
    19c2:	7e 01       	movw	r14, r28
    19c4:	08 94       	sec
    19c6:	e1 1c       	adc	r14, r1
    19c8:	f1 1c       	adc	r15, r1
    19ca:	0e 94 18 08 	call	0x1030	; 0x1030 <bitblt>

}
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	08 95       	ret
		width=x1-x2;
		x=x2;
	}
	else
	{
		width=x2-x1;
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	84 2f       	mov	r24, r20
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	82 1b       	sub	r24, r18
    19e6:	93 0b       	sbc	r25, r19
    19e8:	90 93 7b 0b 	sts	0x0B7B, r25
    19ec:	80 93 7a 0b 	sts	0x0B7A, r24
		x=x1;
    19f0:	30 93 77 0b 	sts	0x0B77, r19
    19f4:	20 93 76 0b 	sts	0x0B76, r18
	}
	if (y1>y2)
    19f8:	56 17       	cp	r21, r22
    19fa:	58 f6       	brcc	.-106    	; 0x1992 <draw_block+0x34>
	{
		height=y1-y2;
    19fc:	25 2f       	mov	r18, r21
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	86 2f       	mov	r24, r22
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	82 1b       	sub	r24, r18
    1a06:	93 0b       	sbc	r25, r19
    1a08:	90 93 79 0b 	sts	0x0B79, r25
    1a0c:	80 93 78 0b 	sts	0x0B78, r24
		y=y2;
    1a10:	30 93 75 0b 	sts	0x0B75, r19
    1a14:	20 93 74 0b 	sts	0x0B74, r18
    1a18:	ca cf       	rjmp	.-108    	; 0x19ae <draw_block+0x50>

00001a1a <del_char>:
}


//Deletes a full character space previous to the current location (backspace)
void del_char()
{
    1a1a:	0f 93       	push	r16
	char f;

	if (x_offset <= font_w)					//if previous char wouldn't have fit
    1a1c:	30 91 71 0b 	lds	r19, 0x0B71
    1a20:	40 91 8d 0c 	lds	r20, 0x0C8D
    1a24:	43 17       	cp	r20, r19
    1a26:	50 f1       	brcs	.+84     	; 0x1a7c <del_char+0x62>
	{			
		x_offset = (128 - (font_w+1) - ((128-x_offset) % (font_w+1)) );			
    1a28:	24 2f       	mov	r18, r20
    1a2a:	20 95       	com	r18
    1a2c:	20 58       	subi	r18, 0x80	; 128
    1a2e:	64 2f       	mov	r22, r20
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	6f 5f       	subi	r22, 0xFF	; 255
    1a34:	7f 4f       	sbci	r23, 0xFF	; 255
    1a36:	80 e8       	ldi	r24, 0x80	; 128
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	83 1b       	sub	r24, r19
    1a3c:	91 09       	sbc	r25, r1
    1a3e:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divmodhi4>
    1a42:	28 1b       	sub	r18, r24
    1a44:	20 93 71 0b 	sts	0x0B71, r18
				
		if (y_offset < font_h) 	
    1a48:	50 91 72 0b 	lds	r21, 0x0B72
    1a4c:	30 91 84 0b 	lds	r19, 0x0B84
    1a50:	53 17       	cp	r21, r19
    1a52:	60 f5       	brcc	.+88     	; 0x1aac <del_char+0x92>
			y_offset = (64 - font_h - ((64-y_offset) % font_h) );	//if we run off the top of the screen
    1a54:	23 2f       	mov	r18, r19
    1a56:	21 95       	neg	r18
    1a58:	20 5c       	subi	r18, 0xC0	; 192
    1a5a:	80 e4       	ldi	r24, 0x40	; 64
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	85 1b       	sub	r24, r21
    1a60:	91 09       	sbc	r25, r1
    1a62:	63 2f       	mov	r22, r19
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divmodhi4>
    1a6a:	28 1b       	sub	r18, r24
    1a6c:	20 93 72 0b 	sts	0x0B72, r18
	}
	
	else x_offset -= (font_w+1);					// back x_offset up by the font width + 1 pixel space btwn characters
	
	f=0;
	if (reverse==1)
    1a70:	80 91 6b 0b 	lds	r24, 0x0B6B
    1a74:	81 30       	cpi	r24, 0x01	; 1
    1a76:	69 f4       	brne	.+26     	; 0x1a92 <del_char+0x78>
    1a78:	0f ef       	ldi	r16, 0xFF	; 255
    1a7a:	0c c0       	rjmp	.+24     	; 0x1a94 <del_char+0x7a>
			y_offset = (64 - font_h - ((64-y_offset) % font_h) );	//if we run off the top of the screen
		else
			y_offset-=font_h;
	}
	
	else x_offset -= (font_w+1);					// back x_offset up by the font width + 1 pixel space btwn characters
    1a7c:	84 2f       	mov	r24, r20
    1a7e:	80 95       	com	r24
    1a80:	83 0f       	add	r24, r19
    1a82:	80 93 71 0b 	sts	0x0B71, r24
    1a86:	30 91 84 0b 	lds	r19, 0x0B84
	
	f=0;
	if (reverse==1)
    1a8a:	80 91 6b 0b 	lds	r24, 0x0B6B
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	99 f3       	breq	.-26     	; 0x1a78 <del_char+0x5e>
    1a92:	00 e0       	ldi	r16, 0x00	; 0
		f=0xff;	

	draw_block(x_offset, y_offset, x_offset+font_w, y_offset+font_h-1,f);	//erase the block
    1a94:	80 91 71 0b 	lds	r24, 0x0B71
    1a98:	60 91 72 0b 	lds	r22, 0x0B72
    1a9c:	48 0f       	add	r20, r24
    1a9e:	36 0f       	add	r19, r22
    1aa0:	31 50       	subi	r19, 0x01	; 1
    1aa2:	23 2f       	mov	r18, r19
    1aa4:	0e 94 af 0c 	call	0x195e	; 0x195e <draw_block>
}
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret
		x_offset = (128 - (font_w+1) - ((128-x_offset) % (font_w+1)) );			
				
		if (y_offset < font_h) 	
			y_offset = (64 - font_h - ((64-y_offset) % font_h) );	//if we run off the top of the screen
		else
			y_offset-=font_h;
    1aac:	53 1b       	sub	r21, r19
    1aae:	50 93 72 0b 	sts	0x0B72, r21
    1ab2:	eb cf       	rjmp	.-42     	; 0x1a8a <del_char+0x70>

00001ab4 <box>:

//draws a box. The box is described

//by a diagonal line from x, y1 to x2, y2
void box(char x1, char y1, char x2, char y2)
{
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	f8 2e       	mov	r15, r24
    1ac0:	d6 2e       	mov	r13, r22
    1ac2:	e4 2e       	mov	r14, r20
    1ac4:	12 2f       	mov	r17, r18
	
	line(1, x2, y2, x2, y1);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	64 2f       	mov	r22, r20
    1aca:	42 2f       	mov	r20, r18
    1acc:	2e 2d       	mov	r18, r14
    1ace:	0d 2d       	mov	r16, r13
    1ad0:	0e 94 2c 0b 	call	0x1658	; 0x1658 <line>
	line(1, x1, y2, x2, y2);
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	6f 2d       	mov	r22, r15
    1ad8:	41 2f       	mov	r20, r17
    1ada:	2e 2d       	mov	r18, r14
    1adc:	01 2f       	mov	r16, r17
    1ade:	0e 94 2c 0b 	call	0x1658	; 0x1658 <line>
	line(1, x1, y2, x1, y1);
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	6f 2d       	mov	r22, r15
    1ae6:	41 2f       	mov	r20, r17
    1ae8:	2f 2d       	mov	r18, r15
    1aea:	0d 2d       	mov	r16, r13
    1aec:	0e 94 2c 0b 	call	0x1658	; 0x1658 <line>
	line(1, x1, y1, x2, y1);
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	6f 2d       	mov	r22, r15
    1af4:	4d 2d       	mov	r20, r13
    1af6:	2e 2d       	mov	r18, r14
    1af8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <line>
}
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	df 90       	pop	r13
    1b06:	08 95       	ret

00001b08 <draw_sprite>:

void draw_sprite(char x, char y, char n, char mode)	//draws nth sprite at (x,y) using mode
{
    1b08:	ef 92       	push	r14
    1b0a:	ff 92       	push	r15
    1b0c:	0f 93       	push	r16
    1b0e:	02 2f       	mov	r16, r18
	uint16_t o;
	o=n*SPRITE_SIZE;				//offset to sprite
    1b10:	92 e8       	ldi	r25, 0x82	; 130
    1b12:	49 9f       	mul	r20, r25
    1b14:	a0 01       	movw	r20, r0
    1b16:	11 24       	eor	r1, r1
	bitblt(x, y, sprite[o], sprite[o+1], mode, sprite + 2 + o);
    1b18:	eb e3       	ldi	r30, 0x3B	; 59
    1b1a:	f1 e0       	ldi	r31, 0x01	; 1
    1b1c:	df 01       	movw	r26, r30
    1b1e:	a4 0f       	add	r26, r20
    1b20:	b5 1f       	adc	r27, r21
    1b22:	4e 5f       	subi	r20, 0xFE	; 254
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	e4 0f       	add	r30, r20
    1b28:	f5 1f       	adc	r31, r21
    1b2a:	4c 91       	ld	r20, X
    1b2c:	11 96       	adiw	r26, 0x01	; 1
    1b2e:	2c 91       	ld	r18, X
    1b30:	7f 01       	movw	r14, r30
    1b32:	0e 94 18 08 	call	0x1030	; 0x1030 <bitblt>
}
    1b36:	0f 91       	pop	r16
    1b38:	ff 90       	pop	r15
    1b3a:	ef 90       	pop	r14
    1b3c:	08 95       	ret

00001b3e <set_baud>:

void set_baud(char b)
{
	if (b == 1) USART_Init( 1250000/2400-1);//4800
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	a9 f0       	breq	.+42     	; 0x1b6c <set_baud+0x2e>
	else if (b == 2) USART_Init( 1250000/4800-1);//9600
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	c1 f0       	breq	.+48     	; 0x1b76 <set_baud+0x38>
	else if (b == 3) USART_Init( 1250000/9600-1);//19200
    1b46:	83 30       	cpi	r24, 0x03	; 3
    1b48:	d9 f0       	breq	.+54     	; 0x1b80 <set_baud+0x42>
	else if (b == 4) USART_Init( 1250000/19200-1);//38400
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	f1 f0       	breq	.+60     	; 0x1b8a <set_baud+0x4c>
	else if (b == 5) USART_Init( 1250000/28800-1);//57600
    1b4e:	85 30       	cpi	r24, 0x05	; 5
    1b50:	41 f0       	breq	.+16     	; 0x1b62 <set_baud+0x24>
	else if (b == 6) USART_Init( 1250000/57600-1);//115200
    1b52:	86 30       	cpi	r24, 0x06	; 6
    1b54:	09 f0       	breq	.+2      	; 0x1b58 <set_baud+0x1a>
    1b56:	08 95       	ret
    1b58:	84 e1       	ldi	r24, 0x14	; 20
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Init>
    1b60:	08 95       	ret
{
	if (b == 1) USART_Init( 1250000/2400-1);//4800
	else if (b == 2) USART_Init( 1250000/4800-1);//9600
	else if (b == 3) USART_Init( 1250000/9600-1);//19200
	else if (b == 4) USART_Init( 1250000/19200-1);//38400
	else if (b == 5) USART_Init( 1250000/28800-1);//57600
    1b62:	8a e2       	ldi	r24, 0x2A	; 42
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Init>
    1b6a:	08 95       	ret
	bitblt(x, y, sprite[o], sprite[o+1], mode, sprite + 2 + o);
}

void set_baud(char b)
{
	if (b == 1) USART_Init( 1250000/2400-1);//4800
    1b6c:	87 e0       	ldi	r24, 0x07	; 7
    1b6e:	92 e0       	ldi	r25, 0x02	; 2
    1b70:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Init>
    1b74:	08 95       	ret
	else if (b == 2) USART_Init( 1250000/4800-1);//9600
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	91 e0       	ldi	r25, 0x01	; 1
    1b7a:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Init>
    1b7e:	08 95       	ret
	else if (b == 3) USART_Init( 1250000/9600-1);//19200
    1b80:	81 e8       	ldi	r24, 0x81	; 129
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Init>
    1b88:	08 95       	ret
	else if (b == 4) USART_Init( 1250000/19200-1);//38400
    1b8a:	80 e4       	ldi	r24, 0x40	; 64
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0e 94 b2 05 	call	0xb64	; 0xb64 <USART_Init>
    1b92:	08 95       	ret

00001b94 <LCD_reset>:
	
}

void LCD_reset(void)
{
	LCD_CONTROL = 0x00;
    1b94:	1b b8       	out	0x0b, r1	; 11
	delay_ms(60);
    1b96:	8c e3       	ldi	r24, 0x3C	; 60
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	0e 94 9c 05 	call	0xb38	; 0xb38 <delay_ms>
	LCD_CONTROL = LCD_IDLE;
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	8b b9       	out	0x0b, r24	; 11
	delay_ms(60);
    1ba2:	8c e3       	ldi	r24, 0x3C	; 60
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 9c 05 	call	0xb38	; 0xb38 <delay_ms>

	clear_screen(0);
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	0e 94 b9 07 	call	0xf72	; 0xf72 <clear_screen>

	display_on();
    1bb0:	8f e3       	ldi	r24, 0x3F	; 63
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
	
	set_page(0);
    1bb8:	88 eb       	ldi	r24, 0xB8	; 184
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
			
	set_x(0);
    1bc0:	80 e4       	ldi	r24, 0x40	; 64
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
			
	//set display start line to 0, command 0xC0
	write_command_LCD(0xC0,0);
    1bc8:	80 ec       	ldi	r24, 0xC0	; 192
    1bca:	60 e0       	ldi	r22, 0x00	; 0
    1bcc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
	
	x_offset = 0;
    1bd0:	10 92 71 0b 	sts	0x0B71, r1

	set_page(0);
    1bd4:	88 eb       	ldi	r24, 0xB8	; 184
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
}
    1bdc:	08 95       	ret

00001bde <main>:
	TCCR0B = 0x02;
}


int main (void)
{
    1bde:	2f 92       	push	r2
    1be0:	3f 92       	push	r3
    1be2:	4f 92       	push	r4
    1be4:	5f 92       	push	r5
    1be6:	6f 92       	push	r6
    1be8:	7f 92       	push	r7
    1bea:	8f 92       	push	r8
    1bec:	9f 92       	push	r9
    1bee:	af 92       	push	r10
    1bf0:	bf 92       	push	r11
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ef 92       	push	r14
    1bf8:	ff 92       	push	r15
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	df 93       	push	r29
    1c00:	cf 93       	push	r28
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	2e 97       	sbiw	r28, 0x0e	; 14
    1c08:	0f b6       	in	r0, 0x3f	; 63
    1c0a:	f8 94       	cli
    1c0c:	de bf       	out	0x3e, r29	; 62
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	cd bf       	out	0x3d, r28	; 61
	char x, y, z, temp, q, p, A, B;	//variables used for loops, buffering of command bytes, counters etc.
	uint16_t count, count2;		//counters for long stuff that may go over 256
	
	ioinit(); 			//Setup IO pins and defaults
    1c12:	0e 94 76 05 	call	0xaec	; 0xaec <ioinit>

	set_baud(6);			//115200
    1c16:	86 e0       	ldi	r24, 0x06	; 6
    1c18:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <set_baud>
	rprintf_devopen(put_char);      // init rprintf 
    1c1c:	8f ee       	ldi	r24, 0xEF	; 239
    1c1e:	95 e0       	ldi	r25, 0x05	; 5
    1c20:	0e 94 75 13 	call	0x26ea	; 0x26ea <rprintf_devopen>
	PORTA |= (1<<CTS);		//assert CTS
    1c24:	17 9a       	sbi	0x02, 7	; 2
		CR_LF = EEPROM_read((unsigned int)CRLF);
	}
	*/


		BL_dutycycle=10;
    1c26:	8a e0       	ldi	r24, 0x0A	; 10
    1c28:	80 93 39 01 	sts	0x0139, r24
		baud_rate = 6;
    1c2c:	86 e0       	ldi	r24, 0x06	; 6
    1c2e:	80 93 37 01 	sts	0x0137, r24
		splash_screen = 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	80 93 38 01 	sts	0x0138, r24
		reverse = 0;
    1c38:	10 92 6b 0b 	sts	0x0B6B, r1
		debug_msg = 0;
    1c3c:	10 92 6c 0b 	sts	0x0B6C, r1
		CR_LF = 1;
    1c40:	80 93 64 0b 	sts	0x0B64, r24

	//Set up the default font===========================================
	font_w = pgm_read_byte(&text_array[0]);	
    1c44:	e8 eb       	ldi	r30, 0xB8	; 184
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	84 91       	lpm	r24, Z+
    1c4a:	80 93 8d 0c 	sts	0x0C8D, r24
	font_h = pgm_read_byte(&text_array[1]);	
    1c4e:	7f 01       	movw	r14, r30
    1c50:	08 94       	sec
    1c52:	e1 1c       	adc	r14, r1
    1c54:	f1 1c       	adc	r15, r1
    1c56:	f7 01       	movw	r30, r14
    1c58:	84 91       	lpm	r24, Z+
    1c5a:	80 93 84 0b 	sts	0x0B84, r24
	font_space = pgm_read_byte(&text_array[2]);
    1c5e:	08 eb       	ldi	r16, 0xB8	; 184
    1c60:	10 e0       	ldi	r17, 0x00	; 0
    1c62:	0e 5f       	subi	r16, 0xFE	; 254
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	f8 01       	movw	r30, r16
    1c68:	24 91       	lpm	r18, Z+
    1c6a:	20 93 8e 0d 	sts	0x0D8E, r18
	font_bytes = font_h/8;	//8 pixels/byte
    1c6e:	28 2f       	mov	r18, r24
    1c70:	26 95       	lsr	r18
    1c72:	26 95       	lsr	r18
    1c74:	26 95       	lsr	r18
    1c76:	20 93 83 0b 	sts	0x0B83, r18
	if (font_h % 8 != 0)
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	87 70       	andi	r24, 0x07	; 7
    1c7e:	90 70       	andi	r25, 0x00	; 0
    1c80:	89 2b       	or	r24, r25
    1c82:	19 f0       	breq	.+6      	; 0x1c8a <main+0xac>
		font_bytes++;	//partial rows count too
    1c84:	2f 5f       	subi	r18, 0xFF	; 255
    1c86:	20 93 83 0b 	sts	0x0B83, r18
	font_bytes *= font_w;	//need font_w stacks of rows	
    1c8a:	80 91 83 0b 	lds	r24, 0x0B83
    1c8e:	90 91 8d 0c 	lds	r25, 0x0C8D
    1c92:	89 9f       	mul	r24, r25
    1c94:	80 2d       	mov	r24, r0
    1c96:	11 24       	eor	r1, r1
    1c98:	80 93 83 0b 	sts	0x0B83, r24

	//Reset the display=================================================

	LCD_reset();
    1c9c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_reset>
	
	set_backlight(BL_dutycycle);
    1ca0:	80 91 39 01 	lds	r24, 0x0139
    1ca4:	0e 94 90 0c 	call	0x1920	; 0x1920 <set_backlight>
	
	delay_ms(500);
    1ca8:	84 ef       	ldi	r24, 0xF4	; 244
    1caa:	91 e0       	ldi	r25, 0x01	; 1
    1cac:	0e 94 9c 05 	call	0xb38	; 0xb38 <delay_ms>

	
	//Logo==========================================================
	if (splash_screen == 1)
    1cb0:	80 91 38 01 	lds	r24, 0x0138
    1cb4:	81 30       	cpi	r24, 0x01	; 1
    1cb6:	09 f4       	brne	.+2      	; 0x1cba <main+0xdc>
    1cb8:	0c c5       	rjmp	.+2584   	; 0x26d2 <main+0xaf4>
	{
		draw_sprite(56,24,0,4);	//XOR'ing the sprite works in normal and reverse modes
	}

	cli();
    1cba:	f8 94       	cli
	RX_in = 0;	//clear RX input buffer
    1cbc:	10 92 66 0b 	sts	0x0B66, r1
	RX_read = 0;
    1cc0:	10 92 68 0b 	sts	0x0B68, r1
    1cc4:	10 92 67 0b 	sts	0x0B67, r1
	RX_bytes = 0;
    1cc8:	10 92 69 0b 	sts	0x0B69, r1
	sei();	
    1ccc:	78 94       	sei

	delay_ms(1000);	//display the splash screen for a second
    1cce:	88 ee       	ldi	r24, 0xE8	; 232
    1cd0:	93 e0       	ldi	r25, 0x03	; 3
    1cd2:	0e 94 9c 05 	call	0xb38	; 0xb38 <delay_ms>
	clear_screen(0);	//clear the screen
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	0e 94 b9 07 	call	0xf72	; 0xf72 <clear_screen>
	
	if (RX_in > 0)	//revert to 115200
    1cdc:	80 91 66 0b 	lds	r24, 0x0B66
    1ce0:	88 23       	and	r24, r24
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <main+0x108>
    1ce4:	fd c4       	rjmp	.+2554   	; 0x26e0 <main+0xb02>
	{
		print_char('1');
    1ce6:	81 e3       	ldi	r24, 0x31	; 49
    1ce8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <print_char>
		print_char('1');
    1cec:	81 e3       	ldi	r24, 0x31	; 49
    1cee:	0e 94 db 09 	call	0x13b6	; 0x13b6 <print_char>
		print_char('5');
    1cf2:	85 e3       	ldi	r24, 0x35	; 53
    1cf4:	0e 94 db 09 	call	0x13b6	; 0x13b6 <print_char>
		print_char('2');
    1cf8:	82 e3       	ldi	r24, 0x32	; 50
    1cfa:	0e 94 db 09 	call	0x13b6	; 0x13b6 <print_char>
		print_char('0');
    1cfe:	80 e3       	ldi	r24, 0x30	; 48
    1d00:	0e 94 db 09 	call	0x13b6	; 0x13b6 <print_char>
		print_char('0');
    1d04:	80 e3       	ldi	r24, 0x30	; 48
    1d06:	0e 94 db 09 	call	0x13b6	; 0x13b6 <print_char>
		
		baud_rate = 6;
    1d0a:	86 e0       	ldi	r24, 0x06	; 6
    1d0c:	80 93 37 01 	sts	0x0137, r24
		set_baud(6);//115200
    1d10:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <set_baud>
		
		cli();
    1d14:	f8 94       	cli
		
		EEPROM_write((unsigned int) BPS, 6);
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	66 e0       	ldi	r22, 0x06	; 6
    1d1c:	0e 94 81 0c 	call	0x1902	; 0x1902 <EEPROM_write>
		
		sei();//Enable Interrupts
    1d20:	78 94       	sei
	}
	
	else (set_baud(baud_rate));
	
	delay_ms(1000);
    1d22:	88 ee       	ldi	r24, 0xE8	; 232
    1d24:	93 e0       	ldi	r25, 0x03	; 3
    1d26:	0e 94 9c 05 	call	0xb38	; 0xb38 <delay_ms>
	clear_screen(0);
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	0e 94 b9 07 	call	0xf72	; 0xf72 <clear_screen>
	
	//flush any received chars

	cli();
    1d30:	f8 94       	cli
	RX_read=0;
    1d32:	10 92 68 0b 	sts	0x0B68, r1
    1d36:	10 92 67 0b 	sts	0x0B67, r1
	RX_in=0;
    1d3a:	10 92 66 0b 	sts	0x0B66, r1
	RX_bytes=0;
    1d3e:	10 92 69 0b 	sts	0x0B69, r1
	sei();
    1d42:	78 94       	sei
    1d44:	e0 e0       	ldi	r30, 0x00	; 0
    1d46:	ae 2e       	mov	r10, r30
    1d48:	e1 e0       	ldi	r30, 0x01	; 1
    1d4a:	be 2e       	mov	r11, r30
    1d4c:	e6 e9       	ldi	r30, 0x96	; 150
    1d4e:	f2 e0       	ldi	r31, 0x02	; 2
    1d50:	cf 01       	movw	r24, r30
    1d52:	02 96       	adiw	r24, 0x02	; 2
    1d54:	74 e1       	ldi	r23, 0x14	; 20
    1d56:	87 2e       	mov	r8, r23
    1d58:	71 e0       	ldi	r23, 0x01	; 1
    1d5a:	97 2e       	mov	r9, r23
    1d5c:	68 e1       	ldi	r22, 0x18	; 24
    1d5e:	66 2e       	mov	r6, r22
    1d60:	61 e0       	ldi	r22, 0x01	; 1
    1d62:	76 2e       	mov	r7, r22
void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    1d64:	5a e0       	ldi	r21, 0x0A	; 10
    1d66:	c5 2e       	mov	r12, r21
    1d68:	4d e0       	ldi	r20, 0x0D	; 13
    1d6a:	54 2e       	mov	r5, r20
				//************************************************************************************************************
				 case 25:		//set y_offset
							//wait for byte
					y_offset = RX_get_byte();		//get new y offset
							
					if (y_offset > 127) y_offset = 127;	//coerce y offset to valid range		
    1d6c:	3f e7       	ldi	r19, 0x7F	; 127
    1d6e:	43 2e       	mov	r4, r19
				//************************************************************************************************************
				 case 24:		//set x_offset
							//wait for byte
					x_offset = RX_get_byte();		//get new x offset
							
					if (x_offset > 159) x_offset = 159;	//coerce x offset to valid range
    1d70:	2f e9       	ldi	r18, 0x9F	; 159
    1d72:	32 2e       	mov	r3, r18
					EEPROM_write((unsigned int) REV, reverse);
					sei();
				 break;	
				//************************************************************************************************************
				 case 21:	//toggle splash
					splash_screen ^= 1;
    1d74:	22 24       	eor	r2, r2
    1d76:	23 94       	inc	r2
						font_bytes *= font_w;	//need font_w stacks of rows	
					}
					else			//if using default font, set to aux
					{
						aux_font=1;
						font_w = pgm_read_byte(&aux_text_array[0]);	
    1d78:	24 91       	lpm	r18, Z+
    1d7a:	29 83       	std	Y+1, r18	; 0x01
    1d7c:	31 96       	adiw	r30, 0x01	; 1
						font_h = pgm_read_byte(&aux_text_array[1]);	
    1d7e:	a4 91       	lpm	r26, Z+
    1d80:	aa 83       	std	Y+2, r26	; 0x02
						font_space = pgm_read_byte(&aux_text_array[2]);
    1d82:	fc 01       	movw	r30, r24
    1d84:	f4 91       	lpm	r31, Z+
    1d86:	fb 83       	std	Y+3, r31	; 0x03
						font_bytes = font_h/8;	//8 pixels/byte
    1d88:	a6 95       	lsr	r26
    1d8a:	a6 95       	lsr	r26
    1d8c:	a6 95       	lsr	r26
    1d8e:	ac 83       	std	Y+4, r26	; 0x04
						if (font_h % 8 != 0)
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	89 2f       	mov	r24, r25
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	87 70       	andi	r24, 0x07	; 7
    1d98:	90 70       	andi	r25, 0x00	; 0
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
							font_bytes++;	//partial rows count too
    1d9e:	af 5f       	subi	r26, 0xFF	; 255
    1da0:	af 83       	std	Y+7, r26	; 0x07
				 case 8:	//toggle aux font
				
					if (aux_font==1)	//if using aux font, set back to default
					{
						aux_font=0;
						font_w = pgm_read_byte(&text_array[0]);	
    1da2:	e8 eb       	ldi	r30, 0xB8	; 184
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	f4 91       	lpm	r31, Z+
    1da8:	f8 87       	std	Y+8, r31	; 0x08
						font_h = pgm_read_byte(&text_array[1]);	
    1daa:	f7 01       	movw	r30, r14
    1dac:	f4 91       	lpm	r31, Z+
    1dae:	f9 87       	std	Y+9, r31	; 0x09
						font_space = pgm_read_byte(&text_array[2]);
    1db0:	f8 01       	movw	r30, r16
    1db2:	f4 91       	lpm	r31, Z+
    1db4:	fa 87       	std	Y+10, r31	; 0x0a
						font_bytes = font_h/8;	//8 pixels/byte
    1db6:	29 85       	ldd	r18, Y+9	; 0x09
    1db8:	26 95       	lsr	r18
    1dba:	26 95       	lsr	r18
    1dbc:	26 95       	lsr	r18
    1dbe:	2b 87       	std	Y+11, r18	; 0x0b
						if (font_h % 8 != 0)
    1dc0:	99 85       	ldd	r25, Y+9	; 0x09
    1dc2:	89 2f       	mov	r24, r25
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	87 70       	andi	r24, 0x07	; 7
    1dc8:	90 70       	andi	r25, 0x00	; 0
    1dca:	9d 87       	std	Y+13, r25	; 0x0d
    1dcc:	8c 87       	std	Y+12, r24	; 0x0c
							font_bytes++;	//partial rows count too
    1dce:	2f 5f       	subi	r18, 0xFF	; 255
    1dd0:	2e 87       	std	Y+14, r18	; 0x0e

	//main loop===================================================
	//main loop waits for characters on the serial port, and either prints them, or interprets them as a command
	while(1)
	{
		if (RX_bytes!=0)
    1dd2:	80 91 69 0b 	lds	r24, 0x0B69
    1dd6:	88 23       	and	r24, r24
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <main+0x1fe>
    1dda:	68 c0       	rjmp	.+208    	; 0x1eac <main+0x2ce>
			//--------------------------------------------------------------------------------------------------------------------
			}//end switch for backspace/command/normal char
		}//end if RX char recieved

		//place code to read buttons here
		A = PINA;
    1ddc:	20 b1       	in	r18, 0x00	; 0
		B = PINB;
    1dde:	83 b1       	in	r24, 0x03	; 3
		
		// buttons are active low (pressed button clears a bit on port a or b)
		if (B & BUTTON0)
    1de0:	98 2f       	mov	r25, r24
    1de2:	80 ff       	sbrs	r24, 0
    1de4:	7c c0       	rjmp	.+248    	; 0x1ede <main+0x300>
		{
			debounce[0]=0;		//clear counter when released
    1de6:	10 92 85 0b 	sts	0x0B85, r1
			buttons &= (~(1));	//clear bit
    1dea:	80 91 70 0b 	lds	r24, 0x0B70
    1dee:	8e 7f       	andi	r24, 0xFE	; 254
    1df0:	80 93 70 0b 	sts	0x0B70, r24
			if (debounce[0]==0) 	//if counter rolled over
				buttons |= 1;	//set bit

		}

		if (B & BUTTON1)
    1df4:	91 ff       	sbrs	r25, 1
    1df6:	82 c0       	rjmp	.+260    	; 0x1efc <main+0x31e>
		{
			debounce[1]=0;		//clear counter when released
    1df8:	10 92 86 0b 	sts	0x0B86, r1
			buttons &= (~(2));	//clear bit
    1dfc:	80 91 70 0b 	lds	r24, 0x0B70
    1e00:	8d 7f       	andi	r24, 0xFD	; 253
    1e02:	80 93 70 0b 	sts	0x0B70, r24
			debounce[1]++;		//increment debounce counter
			if (debounce[1]==0) 	//if counter rolled over
				buttons |= 2;	//set bit
		}

		if (B & BUTTON2)
    1e06:	92 ff       	sbrs	r25, 2
    1e08:	88 c0       	rjmp	.+272    	; 0x1f1a <main+0x33c>
		{
			debounce[2]=0;		//clear counter when released
    1e0a:	10 92 87 0b 	sts	0x0B87, r1
			buttons &= (~(4));	//clear bit
    1e0e:	80 91 70 0b 	lds	r24, 0x0B70
    1e12:	8b 7f       	andi	r24, 0xFB	; 251
    1e14:	80 93 70 0b 	sts	0x0B70, r24
			debounce[2]++;		//increment debounce counter
			if (debounce[2]==0) 	//if counter rolled over
				buttons |= 4;	//set bit
		}

		if (B & BUTTON3)
    1e18:	93 ff       	sbrs	r25, 3
    1e1a:	8e c0       	rjmp	.+284    	; 0x1f38 <main+0x35a>
		{
			debounce[3]=0;		//clear counter when released
    1e1c:	10 92 88 0b 	sts	0x0B88, r1
			buttons &= (~(8));	//clear bit
    1e20:	80 91 70 0b 	lds	r24, 0x0B70
    1e24:	87 7f       	andi	r24, 0xF7	; 247
    1e26:	80 93 70 0b 	sts	0x0B70, r24
			debounce[3]++;		//increment debounce counter
			if (debounce[3]==0) 	//if counter rolled over	
				buttons |= 8;	//set bit
		}

		if (B & BUTTON4)
    1e2a:	94 ff       	sbrs	r25, 4
    1e2c:	94 c0       	rjmp	.+296    	; 0x1f56 <main+0x378>
		{
			debounce[4]=0;		//clear counter when released
    1e2e:	10 92 89 0b 	sts	0x0B89, r1
			buttons &= (~(16));	//clear bit
    1e32:	80 91 70 0b 	lds	r24, 0x0B70
    1e36:	8f 7e       	andi	r24, 0xEF	; 239
    1e38:	80 93 70 0b 	sts	0x0B70, r24

			if (debounce[4]==0) 	//if counter rolled over			
				buttons |= 16;	//set bit
		}
		
		if (A & BUTTON5)
    1e3c:	92 2f       	mov	r25, r18
    1e3e:	20 ff       	sbrs	r18, 0
    1e40:	9a c0       	rjmp	.+308    	; 0x1f76 <main+0x398>
		{
			debounce[5]=0;		//clear counter when released
    1e42:	10 92 8a 0b 	sts	0x0B8A, r1
			buttons &= (~(32));	//clear bit
    1e46:	80 91 70 0b 	lds	r24, 0x0B70
    1e4a:	8f 7d       	andi	r24, 0xDF	; 223
    1e4c:	80 93 70 0b 	sts	0x0B70, r24
			debounce[5]++;		//increment debounce counter
			if (debounce[5]==0) 	//if counter rolled over			
				buttons |= 32;	//set bit
		}

		if (A & BUTTON6)
    1e50:	91 ff       	sbrs	r25, 1
    1e52:	a0 c0       	rjmp	.+320    	; 0x1f94 <main+0x3b6>
		{
			debounce[6]=0;		//clear counter when released
    1e54:	10 92 8b 0b 	sts	0x0B8B, r1
			buttons &= (~(64));	//clear bit
    1e58:	80 91 70 0b 	lds	r24, 0x0B70
    1e5c:	8f 7b       	andi	r24, 0xBF	; 191
    1e5e:	80 93 70 0b 	sts	0x0B70, r24

			if (debounce[6]==0) 	//if counter rolled over			
				buttons |= 64;	//set bit
		}

		if (A & BUTTON7)
    1e62:	92 ff       	sbrs	r25, 2
    1e64:	a6 c0       	rjmp	.+332    	; 0x1fb2 <main+0x3d4>
		{
			debounce[7]=0;		//clear counter when released
    1e66:	10 92 8c 0b 	sts	0x0B8C, r1
			buttons &= (~(128));	//clear bit
    1e6a:	80 91 70 0b 	lds	r24, 0x0B70
    1e6e:	8f 77       	andi	r24, 0x7F	; 127
    1e70:	80 93 70 0b 	sts	0x0B70, r24
				buttons |= 128;	//set bit

		}

		//code to drive RGB LED
		RGB_counter++;		//increment counter
    1e74:	90 91 6f 0b 	lds	r25, 0x0B6F
    1e78:	9f 5f       	subi	r25, 0xFF	; 255
    1e7a:	90 93 6f 0b 	sts	0x0B6F, r25
		if (RGB_red>RGB_counter)
    1e7e:	80 91 3a 01 	lds	r24, 0x013A
    1e82:	98 17       	cp	r25, r24
    1e84:	08 f0       	brcs	.+2      	; 0x1e88 <main+0x2aa>
    1e86:	ae c0       	rjmp	.+348    	; 0x1fe4 <main+0x406>
			PORTA &= (~(1<<RED));	//pin low turns on led
    1e88:	16 98       	cbi	0x02, 6	; 2
		else
			PORTA |= (1<<RED);	//pin high turns off led

		if (RGB_green>RGB_counter)
    1e8a:	80 91 6d 0b 	lds	r24, 0x0B6D
    1e8e:	98 17       	cp	r25, r24
    1e90:	08 f0       	brcs	.+2      	; 0x1e94 <main+0x2b6>
    1e92:	a6 c0       	rjmp	.+332    	; 0x1fe0 <main+0x402>
			PORTA &= (~(1<<GREEN));	//pin low turns on led
    1e94:	14 98       	cbi	0x02, 4	; 2
		else
			PORTA |= (1<<GREEN);	//pin high turns off led

		if (RGB_blue>RGB_counter)
    1e96:	80 91 6e 0b 	lds	r24, 0x0B6E
    1e9a:	98 17       	cp	r25, r24
    1e9c:	08 f0       	brcs	.+2      	; 0x1ea0 <main+0x2c2>
    1e9e:	9e c0       	rjmp	.+316    	; 0x1fdc <main+0x3fe>
			PORTA &= (~(1<<BLUE));	//pin low turns on led
    1ea0:	15 98       	cbi	0x02, 5	; 2

	//main loop===================================================
	//main loop waits for characters on the serial port, and either prints them, or interprets them as a command
	while(1)
	{
		if (RX_bytes!=0)
    1ea2:	80 91 69 0b 	lds	r24, 0x0B69
    1ea6:	88 23       	and	r24, r24
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <main+0x2ce>
    1eaa:	98 cf       	rjmp	.-208    	; 0x1ddc <main+0x1fe>
		{			
			x = RX_get_byte();	
    1eac:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    1eb0:	98 2f       	mov	r25, r24
			switch(x)		//switch based on received character
    1eb2:	8a 30       	cpi	r24, 0x0A	; 10
    1eb4:	09 f4       	brne	.+2      	; 0x1eb8 <main+0x2da>
    1eb6:	ab c3       	rjmp	.+1878   	; 0x260e <main+0xa30>
    1eb8:	8b 30       	cpi	r24, 0x0B	; 11
    1eba:	08 f0       	brcs	.+2      	; 0x1ebe <main+0x2e0>
    1ebc:	95 c0       	rjmp	.+298    	; 0x1fe8 <main+0x40a>
    1ebe:	88 30       	cpi	r24, 0x08	; 8
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <main+0x2e6>
    1ec2:	96 c3       	rjmp	.+1836   	; 0x25f0 <main+0xa12>
				 break;
				}
			 break;
			//--------------------------------------------------------------------------------------------------------------------
			 default:		//nothing special, print character to screen
				if (debug_msg==2)
    1ec4:	80 91 6c 0b 	lds	r24, 0x0B6C
    1ec8:	82 30       	cpi	r24, 0x02	; 2
    1eca:	09 f4       	brne	.+2      	; 0x1ece <main+0x2f0>
    1ecc:	80 c0       	rjmp	.+256    	; 0x1fce <main+0x3f0>
					put_char(x);	//if ASCII debug, echo characters typed
				print_char(x);
    1ece:	89 2f       	mov	r24, r25
    1ed0:	0e 94 db 09 	call	0x13b6	; 0x13b6 <print_char>
			//--------------------------------------------------------------------------------------------------------------------
			}//end switch for backspace/command/normal char
		}//end if RX char recieved

		//place code to read buttons here
		A = PINA;
    1ed4:	20 b1       	in	r18, 0x00	; 0
		B = PINB;
    1ed6:	83 b1       	in	r24, 0x03	; 3
		
		// buttons are active low (pressed button clears a bit on port a or b)
		if (B & BUTTON0)
    1ed8:	98 2f       	mov	r25, r24
    1eda:	80 fd       	sbrc	r24, 0
    1edc:	84 cf       	rjmp	.-248    	; 0x1de6 <main+0x208>
			buttons &= (~(1));	//clear bit
		}
		else
		{

			debounce[0]++;		//increment debounce counter
    1ede:	80 91 85 0b 	lds	r24, 0x0B85
    1ee2:	8f 5f       	subi	r24, 0xFF	; 255
    1ee4:	80 93 85 0b 	sts	0x0B85, r24

			if (debounce[0]==0) 	//if counter rolled over
    1ee8:	88 23       	and	r24, r24
    1eea:	09 f0       	breq	.+2      	; 0x1eee <main+0x310>
    1eec:	83 cf       	rjmp	.-250    	; 0x1df4 <main+0x216>
				buttons |= 1;	//set bit
    1eee:	80 91 70 0b 	lds	r24, 0x0B70
    1ef2:	81 60       	ori	r24, 0x01	; 1
    1ef4:	80 93 70 0b 	sts	0x0B70, r24

		}

		if (B & BUTTON1)
    1ef8:	91 fd       	sbrc	r25, 1
    1efa:	7e cf       	rjmp	.-260    	; 0x1df8 <main+0x21a>
			debounce[1]=0;		//clear counter when released
			buttons &= (~(2));	//clear bit
		}
		else
		{
			debounce[1]++;		//increment debounce counter
    1efc:	80 91 86 0b 	lds	r24, 0x0B86
    1f00:	8f 5f       	subi	r24, 0xFF	; 255
    1f02:	80 93 86 0b 	sts	0x0B86, r24
			if (debounce[1]==0) 	//if counter rolled over
    1f06:	88 23       	and	r24, r24
    1f08:	09 f0       	breq	.+2      	; 0x1f0c <main+0x32e>
    1f0a:	7d cf       	rjmp	.-262    	; 0x1e06 <main+0x228>
				buttons |= 2;	//set bit
    1f0c:	80 91 70 0b 	lds	r24, 0x0B70
    1f10:	82 60       	ori	r24, 0x02	; 2
    1f12:	80 93 70 0b 	sts	0x0B70, r24
		}

		if (B & BUTTON2)
    1f16:	92 fd       	sbrc	r25, 2
    1f18:	78 cf       	rjmp	.-272    	; 0x1e0a <main+0x22c>
			buttons &= (~(4));	//clear bit
		}
		else
		{

			debounce[2]++;		//increment debounce counter
    1f1a:	80 91 87 0b 	lds	r24, 0x0B87
    1f1e:	8f 5f       	subi	r24, 0xFF	; 255
    1f20:	80 93 87 0b 	sts	0x0B87, r24
			if (debounce[2]==0) 	//if counter rolled over
    1f24:	88 23       	and	r24, r24
    1f26:	09 f0       	breq	.+2      	; 0x1f2a <main+0x34c>
    1f28:	77 cf       	rjmp	.-274    	; 0x1e18 <main+0x23a>
				buttons |= 4;	//set bit
    1f2a:	80 91 70 0b 	lds	r24, 0x0B70
    1f2e:	84 60       	ori	r24, 0x04	; 4
    1f30:	80 93 70 0b 	sts	0x0B70, r24
		}

		if (B & BUTTON3)
    1f34:	93 fd       	sbrc	r25, 3
    1f36:	72 cf       	rjmp	.-284    	; 0x1e1c <main+0x23e>
			debounce[3]=0;		//clear counter when released
			buttons &= (~(8));	//clear bit
		}
		else
		{
			debounce[3]++;		//increment debounce counter
    1f38:	80 91 88 0b 	lds	r24, 0x0B88
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	80 93 88 0b 	sts	0x0B88, r24
			if (debounce[3]==0) 	//if counter rolled over	
    1f42:	88 23       	and	r24, r24
    1f44:	09 f0       	breq	.+2      	; 0x1f48 <main+0x36a>
    1f46:	71 cf       	rjmp	.-286    	; 0x1e2a <main+0x24c>
				buttons |= 8;	//set bit
    1f48:	80 91 70 0b 	lds	r24, 0x0B70
    1f4c:	88 60       	ori	r24, 0x08	; 8
    1f4e:	80 93 70 0b 	sts	0x0B70, r24
		}

		if (B & BUTTON4)
    1f52:	94 fd       	sbrc	r25, 4
    1f54:	6c cf       	rjmp	.-296    	; 0x1e2e <main+0x250>
			debounce[4]=0;		//clear counter when released
			buttons &= (~(16));	//clear bit
		}
		else
		{
			debounce[4]++;		//increment debounce counter
    1f56:	80 91 89 0b 	lds	r24, 0x0B89
    1f5a:	8f 5f       	subi	r24, 0xFF	; 255
    1f5c:	80 93 89 0b 	sts	0x0B89, r24

			if (debounce[4]==0) 	//if counter rolled over			
    1f60:	88 23       	and	r24, r24
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <main+0x388>
    1f64:	6b cf       	rjmp	.-298    	; 0x1e3c <main+0x25e>
				buttons |= 16;	//set bit
    1f66:	80 91 70 0b 	lds	r24, 0x0B70
    1f6a:	80 61       	ori	r24, 0x10	; 16
    1f6c:	80 93 70 0b 	sts	0x0B70, r24
		}
		
		if (A & BUTTON5)
    1f70:	92 2f       	mov	r25, r18
    1f72:	20 fd       	sbrc	r18, 0
    1f74:	66 cf       	rjmp	.-308    	; 0x1e42 <main+0x264>
			debounce[5]=0;		//clear counter when released
			buttons &= (~(32));	//clear bit
		}
		else
		{
			debounce[5]++;		//increment debounce counter
    1f76:	80 91 8a 0b 	lds	r24, 0x0B8A
    1f7a:	8f 5f       	subi	r24, 0xFF	; 255
    1f7c:	80 93 8a 0b 	sts	0x0B8A, r24
			if (debounce[5]==0) 	//if counter rolled over			
    1f80:	88 23       	and	r24, r24
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <main+0x3a8>
    1f84:	65 cf       	rjmp	.-310    	; 0x1e50 <main+0x272>
				buttons |= 32;	//set bit
    1f86:	80 91 70 0b 	lds	r24, 0x0B70
    1f8a:	80 62       	ori	r24, 0x20	; 32
    1f8c:	80 93 70 0b 	sts	0x0B70, r24
		}

		if (A & BUTTON6)
    1f90:	91 fd       	sbrc	r25, 1
    1f92:	60 cf       	rjmp	.-320    	; 0x1e54 <main+0x276>
			debounce[6]=0;		//clear counter when released
			buttons &= (~(64));	//clear bit
		}
		else
		{
			debounce[6]++;		//increment debounce counter
    1f94:	80 91 8b 0b 	lds	r24, 0x0B8B
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	80 93 8b 0b 	sts	0x0B8B, r24

			if (debounce[6]==0) 	//if counter rolled over			
    1f9e:	88 23       	and	r24, r24
    1fa0:	09 f0       	breq	.+2      	; 0x1fa4 <main+0x3c6>
    1fa2:	5f cf       	rjmp	.-322    	; 0x1e62 <main+0x284>
				buttons |= 64;	//set bit
    1fa4:	80 91 70 0b 	lds	r24, 0x0B70
    1fa8:	80 64       	ori	r24, 0x40	; 64
    1faa:	80 93 70 0b 	sts	0x0B70, r24
		}

		if (A & BUTTON7)
    1fae:	92 fd       	sbrc	r25, 2
    1fb0:	5a cf       	rjmp	.-332    	; 0x1e66 <main+0x288>
			debounce[7]=0;		//clear counter when released
			buttons &= (~(128));	//clear bit
		}
		else
		{
			debounce[7]++;		//increment debounce counter
    1fb2:	80 91 8c 0b 	lds	r24, 0x0B8C
    1fb6:	8f 5f       	subi	r24, 0xFF	; 255
    1fb8:	80 93 8c 0b 	sts	0x0B8C, r24
			if (debounce[7]==0) 	//if counter rolled over			
    1fbc:	88 23       	and	r24, r24
    1fbe:	09 f0       	breq	.+2      	; 0x1fc2 <main+0x3e4>
    1fc0:	59 cf       	rjmp	.-334    	; 0x1e74 <main+0x296>
				buttons |= 128;	//set bit
    1fc2:	80 91 70 0b 	lds	r24, 0x0B70
    1fc6:	80 68       	ori	r24, 0x80	; 128
    1fc8:	80 93 70 0b 	sts	0x0B70, r24
    1fcc:	53 cf       	rjmp	.-346    	; 0x1e74 <main+0x296>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1fce:	80 91 c0 00 	lds	r24, 0x00C0
    1fd2:	85 ff       	sbrs	r24, 5
    1fd4:	fc cf       	rjmp	.-8      	; 0x1fce <main+0x3f0>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    1fd6:	90 93 c6 00 	sts	0x00C6, r25
    1fda:	79 cf       	rjmp	.-270    	; 0x1ece <main+0x2f0>
			PORTA |= (1<<GREEN);	//pin high turns off led

		if (RGB_blue>RGB_counter)
			PORTA &= (~(1<<BLUE));	//pin low turns on led
		else
			PORTA |= (1<<BLUE);	//pin high turns off led
    1fdc:	15 9a       	sbi	0x02, 5	; 2
    1fde:	f9 ce       	rjmp	.-526    	; 0x1dd2 <main+0x1f4>
			PORTA |= (1<<RED);	//pin high turns off led

		if (RGB_green>RGB_counter)
			PORTA &= (~(1<<GREEN));	//pin low turns on led
		else
			PORTA |= (1<<GREEN);	//pin high turns off led
    1fe0:	14 9a       	sbi	0x02, 4	; 2
    1fe2:	59 cf       	rjmp	.-334    	; 0x1e96 <main+0x2b8>
		//code to drive RGB LED
		RGB_counter++;		//increment counter
		if (RGB_red>RGB_counter)
			PORTA &= (~(1<<RED));	//pin low turns on led
		else
			PORTA |= (1<<RED);	//pin high turns off led
    1fe4:	16 9a       	sbi	0x02, 6	; 2
    1fe6:	51 cf       	rjmp	.-350    	; 0x1e8a <main+0x2ac>
	while(1)
	{
		if (RX_bytes!=0)
		{			
			x = RX_get_byte();	
			switch(x)		//switch based on received character
    1fe8:	8d 30       	cpi	r24, 0x0D	; 13
    1fea:	09 f4       	brne	.+2      	; 0x1fee <main+0x410>
    1fec:	c0 c2       	rjmp	.+1408   	; 0x256e <main+0x990>
    1fee:	8c 37       	cpi	r24, 0x7C	; 124
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <main+0x416>
    1ff2:	68 cf       	rjmp	.-304    	; 0x1ec4 <main+0x2e6>
				if (debug_msg==2)
					put_char(x);	//if ASCII debug, echo characters typed
			 break;
			//--------------------------------------------------------------------------------------------------------------------
			 case 124:					//received character indicated a coming command
				y = RX_get_byte();			//get char from buffer
    1ff4:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    1ff8:	18 2f       	mov	r17, r24

				switch (debug_msg)		//output for debugging or monitoring purposes
    1ffa:	20 91 6c 0b 	lds	r18, 0x0B6C
    1ffe:	21 30       	cpi	r18, 0x01	; 1
    2000:	11 f1       	breq	.+68     	; 0x2046 <main+0x468>
    2002:	22 30       	cpi	r18, 0x02	; 2
    2004:	99 f4       	brne	.+38     	; 0x202c <main+0x44e>
				{
				 case 1:			//print binary debug msg
					put_char(y);
				 break;
				 case 2:			//print ASCII debug msg
					rprintf("Entered Command %d\n",y);
    2006:	00 d0       	rcall	.+0      	; 0x2008 <main+0x42a>
    2008:	00 d0       	rcall	.+0      	; 0x200a <main+0x42c>
    200a:	ed b7       	in	r30, 0x3d	; 61
    200c:	fe b7       	in	r31, 0x3e	; 62
    200e:	31 96       	adiw	r30, 0x01	; 1
    2010:	ad b7       	in	r26, 0x3d	; 61
    2012:	be b7       	in	r27, 0x3e	; 62
    2014:	12 96       	adiw	r26, 0x02	; 2
    2016:	bc 92       	st	X, r11
    2018:	ae 92       	st	-X, r10
    201a:	11 97       	sbiw	r26, 0x01	; 1
    201c:	82 83       	std	Z+2, r24	; 0x02
    201e:	13 82       	std	Z+3, r1	; 0x03
    2020:	0e 94 8f 13 	call	0x271e	; 0x271e <rprintf>
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
				 break;
				 default:
				 break;
				}
	
				switch(y)				//switch to which command was sent
    202c:	e1 2f       	mov	r30, r17
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	e4 32       	cpi	r30, 0x24	; 36
    2032:	f1 05       	cpc	r31, r1
    2034:	98 f4       	brcc	.+38     	; 0x205c <main+0x47e>
    2036:	e8 5c       	subi	r30, 0xC8	; 200
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	ee 0f       	add	r30, r30
    203c:	ff 1f       	adc	r31, r31
    203e:	05 90       	lpm	r0, Z+
    2040:	f4 91       	lpm	r31, Z+
    2042:	e0 2d       	mov	r30, r0
    2044:	09 94       	ijmp
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2046:	80 91 c0 00 	lds	r24, 0x00C0
    204a:	85 ff       	sbrs	r24, 5
    204c:	fc cf       	rjmp	.-8      	; 0x2046 <main+0x468>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    204e:	10 93 c6 00 	sts	0x00C6, r17
				 break;
				 default:
				 break;
				}
	
				switch(y)				//switch to which command was sent
    2052:	e1 2f       	mov	r30, r17
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	e4 32       	cpi	r30, 0x24	; 36
    2058:	f1 05       	cpc	r31, r1
    205a:	68 f3       	brcs	.-38     	; 0x2036 <main+0x458>
    205c:	20 91 6c 0b 	lds	r18, 0x0B6C
					put_char(buttons);
				 break;	
				//************************************************************************************************************
				}//end switch for which command	

				switch (debug_msg)
    2060:	21 30       	cpi	r18, 0x01	; 1
    2062:	c9 f0       	breq	.+50     	; 0x2096 <main+0x4b8>
    2064:	22 30       	cpi	r18, 0x02	; 2
    2066:	09 f0       	breq	.+2      	; 0x206a <main+0x48c>
    2068:	b9 ce       	rjmp	.-654    	; 0x1ddc <main+0x1fe>
				{
				 case 1:	//print binary debug msg
					put_char(0);
				 break;
				 case 2:	//print ASCII debug msg
					rprintf("Exited Command, RX_buffer=%d\n\n",RX_bytes);
    206a:	80 91 69 0b 	lds	r24, 0x0B69
    206e:	00 d0       	rcall	.+0      	; 0x2070 <main+0x492>
    2070:	00 d0       	rcall	.+0      	; 0x2072 <main+0x494>
    2072:	ed b7       	in	r30, 0x3d	; 61
    2074:	fe b7       	in	r31, 0x3e	; 62
    2076:	31 96       	adiw	r30, 0x01	; 1
    2078:	ad b7       	in	r26, 0x3d	; 61
    207a:	be b7       	in	r27, 0x3e	; 62
    207c:	12 96       	adiw	r26, 0x02	; 2
    207e:	7c 92       	st	X, r7
    2080:	6e 92       	st	-X, r6
    2082:	11 97       	sbiw	r26, 0x01	; 1
    2084:	82 83       	std	Z+2, r24	; 0x02
    2086:	13 82       	std	Z+3, r1	; 0x03
    2088:	0e 94 8f 13 	call	0x271e	; 0x271e <rprintf>
    208c:	0f 90       	pop	r0
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	a3 ce       	rjmp	.-698    	; 0x1ddc <main+0x1fe>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2096:	80 91 c0 00 	lds	r24, 0x00C0
    209a:	85 ff       	sbrs	r24, 5
    209c:	fc cf       	rjmp	.-8      	; 0x2096 <main+0x4b8>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    209e:	10 92 c6 00 	sts	0x00C6, r1
    20a2:	9c ce       	rjmp	.-712    	; 0x1ddc <main+0x1fe>
					write_command_LCD(y,z);			//write command
				 break;	
				//************************************************************************************************************
				 case 27:		//write data
							//wait for byte(data)
					y = RX_get_byte();		
    20a4:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    20a8:	18 2f       	mov	r17, r24
							

							//wait for byte(chip # {1,2,3})
					z = RX_get_byte();	
    20aa:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    20ae:	68 2f       	mov	r22, r24
							

					write_data_LCD(y,z);			//write data
    20b0:	81 2f       	mov	r24, r17
    20b2:	0e 94 27 06 	call	0xc4e	; 0xc4e <write_data_LCD>
	
				//************************************************************************************************************
				 case 28:		//write block
							//wait for byte(x)
					y = RX_get_byte();		
    20b6:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    20ba:	d8 2e       	mov	r13, r24
							

							//wait for byte(page)
					z = RX_get_byte();		
    20bc:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    20c0:	e8 2e       	mov	r14, r24
							

							//wait for byte(length)
					temp = RX_get_byte();		
    20c2:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    20c6:	f8 2e       	mov	r15, r24
    20c8:	b0 e8       	ldi	r27, 0x80	; 128
    20ca:	b8 17       	cp	r27, r24
    20cc:	08 f0       	brcs	.+2      	; 0x20d0 <main+0x4f2>
    20ce:	cb c2       	rjmp	.+1430   	; 0x2666 <main+0xa88>
    20d0:	80 e8       	ldi	r24, 0x80	; 128
    20d2:	f8 2e       	mov	r15, r24
					
					//coerce length, there are only 128 pixels across the whole screen
					if (temp>128)
						temp=128;

					for(q=0;q<temp;q++)
    20d4:	00 e0       	ldi	r16, 0x00	; 0
    20d6:	10 e0       	ldi	r17, 0x00	; 0
					{
								//wait for byte(data)
						buffer[q] = RX_get_byte();	//store data	
    20d8:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    20dc:	f8 01       	movw	r30, r16
    20de:	e2 57       	subi	r30, 0x72	; 114
    20e0:	f3 4f       	sbci	r31, 0xF3	; 243
    20e2:	80 83       	st	Z, r24
    20e4:	0f 5f       	subi	r16, 0xFF	; 255
    20e6:	1f 4f       	sbci	r17, 0xFF	; 255
					
					//coerce length, there are only 128 pixels across the whole screen
					if (temp>128)
						temp=128;

					for(q=0;q<temp;q++)
    20e8:	0f 15       	cp	r16, r15
    20ea:	b0 f3       	brcs	.-20     	; 0x20d8 <main+0x4fa>
					{
								//wait for byte(data)
						buffer[q] = RX_get_byte();	//store data	
								
					}
					write_block(y,z,temp,buffer);			//do block write
    20ec:	8d 2d       	mov	r24, r13
    20ee:	6e 2d       	mov	r22, r14
    20f0:	4f 2d       	mov	r20, r15
    20f2:	2e e8       	ldi	r18, 0x8E	; 142
    20f4:	3c e0       	ldi	r19, 0x0C	; 12
    20f6:	0e 94 51 06 	call	0xca2	; 0xca2 <write_block>
    20fa:	20 91 6c 0b 	lds	r18, 0x0B6C
    20fe:	b0 cf       	rjmp	.-160    	; 0x2060 <main+0x482>
				 break;	
				//************************************************************************************************************
				 case 29:		//read data
							//wait for byte(chip # {1,2})
					y = RX_get_byte();		
    2100:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
							
					
					z = read_data_LCD(y);
    2104:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <read_data_LCD>
    2108:	98 2f       	mov	r25, r24
					if(debug_msg==2)
    210a:	20 91 6c 0b 	lds	r18, 0x0B6C
    210e:	22 30       	cpi	r18, 0x02	; 2
    2110:	09 f4       	brne	.+2      	; 0x2114 <main+0x536>
    2112:	ad c2       	rjmp	.+1370   	; 0x266e <main+0xa90>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2114:	80 91 c0 00 	lds	r24, 0x00C0
    2118:	85 ff       	sbrs	r24, 5
    211a:	fc cf       	rjmp	.-8      	; 0x2114 <main+0x536>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    211c:	90 93 c6 00 	sts	0x00C6, r25
    2120:	9f cf       	rjmp	.-194    	; 0x2060 <main+0x482>
						put_char(temp);
				 break;	
				//************************************************************************************************************
				 case 31:		//read block
							//wait for byte(x)
					y = RX_get_byte();		
    2122:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2126:	f8 2e       	mov	r15, r24
							

							//wait for byte(page)
					z = RX_get_byte();		
    2128:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    212c:	08 2f       	mov	r16, r24
							

							//wait for byte(length)
					temp = RX_get_byte();		
    212e:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2132:	18 2f       	mov	r17, r24
    2134:	81 38       	cpi	r24, 0x81	; 129
    2136:	08 f0       	brcs	.+2      	; 0x213a <main+0x55c>
    2138:	10 e8       	ldi	r17, 0x80	; 128
					
					//coerce length
					if (temp>128)
						temp=128;

					read_block(y,z,temp,buffer);		//do block read
    213a:	8f 2d       	mov	r24, r15
    213c:	60 2f       	mov	r22, r16
    213e:	41 2f       	mov	r20, r17
    2140:	2e e8       	ldi	r18, 0x8E	; 142
    2142:	3c e0       	ldi	r19, 0x0C	; 12
    2144:	0e 94 11 07 	call	0xe22	; 0xe22 <read_block>
					
					for(z=0;z<temp;z++)
    2148:	11 23       	and	r17, r17
    214a:	09 f4       	brne	.+2      	; 0x214e <main+0x570>
    214c:	87 cf       	rjmp	.-242    	; 0x205c <main+0x47e>
    214e:	0e e8       	ldi	r16, 0x8E	; 142
    2150:	e0 2e       	mov	r14, r16
    2152:	0c e0       	ldi	r16, 0x0C	; 12
    2154:	f0 2e       	mov	r15, r16
    2156:	20 91 6c 0b 	lds	r18, 0x0B6C
    215a:	11 50       	subi	r17, 0x01	; 1
    215c:	01 2f       	mov	r16, r17
    215e:	10 e0       	ldi	r17, 0x00	; 0
    2160:	01 57       	subi	r16, 0x71	; 113
    2162:	13 4f       	sbci	r17, 0xF3	; 243
						if(debug_msg==2)
    2164:	22 30       	cpi	r18, 0x02	; 2
    2166:	89 f0       	breq	.+34     	; 0x218a <main+0x5ac>
							rprintf("%d\n",buffer[z]);
						else
							put_char(buffer[z]);			
    2168:	f7 01       	movw	r30, r14
    216a:	90 81       	ld	r25, Z
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    216c:	80 91 c0 00 	lds	r24, 0x00C0
    2170:	85 ff       	sbrs	r24, 5
    2172:	fc cf       	rjmp	.-8      	; 0x216c <main+0x58e>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    2174:	90 93 c6 00 	sts	0x00C6, r25
    2178:	08 94       	sec
    217a:	e1 1c       	adc	r14, r1
    217c:	f1 1c       	adc	r15, r1
					if (temp>128)
						temp=128;

					read_block(y,z,temp,buffer);		//do block read
					
					for(z=0;z<temp;z++)
    217e:	e0 16       	cp	r14, r16
    2180:	f1 06       	cpc	r15, r17
    2182:	09 f4       	brne	.+2      	; 0x2186 <main+0x5a8>
    2184:	6d cf       	rjmp	.-294    	; 0x2060 <main+0x482>
						if(debug_msg==2)
    2186:	22 30       	cpi	r18, 0x02	; 2
    2188:	79 f7       	brne	.-34     	; 0x2168 <main+0x58a>
							rprintf("%d\n",buffer[z]);
    218a:	00 d0       	rcall	.+0      	; 0x218c <main+0x5ae>
    218c:	00 d0       	rcall	.+0      	; 0x218e <main+0x5b0>
    218e:	ed b7       	in	r30, 0x3d	; 61
    2190:	fe b7       	in	r31, 0x3e	; 62
    2192:	31 96       	adiw	r30, 0x01	; 1
    2194:	ad b7       	in	r26, 0x3d	; 61
    2196:	be b7       	in	r27, 0x3e	; 62
    2198:	12 96       	adiw	r26, 0x02	; 2
    219a:	9c 92       	st	X, r9
    219c:	8e 92       	st	-X, r8
    219e:	11 97       	sbiw	r26, 0x01	; 1
    21a0:	d7 01       	movw	r26, r14
    21a2:	8c 91       	ld	r24, X
    21a4:	82 83       	std	Z+2, r24	; 0x02
    21a6:	13 82       	std	Z+3, r1	; 0x03
    21a8:	0e 94 8f 13 	call	0x271e	; 0x271e <rprintf>
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	0f 90       	pop	r0
    21b4:	20 91 6c 0b 	lds	r18, 0x0B6C
    21b8:	df cf       	rjmp	.-66     	; 0x2178 <main+0x59a>
						put_char(z);
				 break;	
				//************************************************************************************************************
				 case 30:		//read byte
							//wait for byte(x)
					y = RX_get_byte();		
    21ba:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    21be:	18 2f       	mov	r17, r24
							
					
							//wait for byte(side)
					z = RX_get_byte();		
    21c0:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    21c4:	68 2f       	mov	r22, r24
							
			
					temp= read_byte(y,z);
    21c6:	81 2f       	mov	r24, r17
    21c8:	0e 94 b6 0a 	call	0x156c	; 0x156c <read_byte>
    21cc:	98 2f       	mov	r25, r24
					
					if(debug_msg==2)
    21ce:	20 91 6c 0b 	lds	r18, 0x0B6C
    21d2:	22 30       	cpi	r18, 0x02	; 2
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <main+0x5fa>
    21d6:	4b c2       	rjmp	.+1174   	; 0x266e <main+0xa90>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    21d8:	80 91 c0 00 	lds	r24, 0x00C0
    21dc:	85 ff       	sbrs	r24, 5
    21de:	fc cf       	rjmp	.-8      	; 0x21d8 <main+0x5fa>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    21e0:	90 93 c6 00 	sts	0x00C6, r25
    21e4:	3d cf       	rjmp	.-390    	; 0x2060 <main+0x482>
					RGB_green = RX_get_byte();		//get new green value							
					RGB_blue = RX_get_byte();		//get new blue value					
				 break;	
				//************************************************************************************************************
				 case 35:		//get button values
					put_char(buttons);
    21e6:	90 91 70 0b 	lds	r25, 0x0B70
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    21ea:	80 91 c0 00 	lds	r24, 0x00C0
    21ee:	85 ff       	sbrs	r24, 5
    21f0:	fc cf       	rjmp	.-8      	; 0x21ea <main+0x60c>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    21f2:	90 93 c6 00 	sts	0x00C6, r25
    21f6:	32 cf       	rjmp	.-412    	; 0x205c <main+0x47e>
					set_page(y);
				 break;	
				//************************************************************************************************************
				 case 34:		//set rgb value
							//wait for byte
					RGB_red = RX_get_byte();		//get new red value
    21f8:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    21fc:	80 93 3a 01 	sts	0x013A, r24
					RGB_green = RX_get_byte();		//get new green value							
    2200:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2204:	80 93 6d 0b 	sts	0x0B6D, r24
					RGB_blue = RX_get_byte();		//get new blue value					
    2208:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    220c:	80 93 6e 0b 	sts	0x0B6E, r24
    2210:	20 91 6c 0b 	lds	r18, 0x0B6C
    2214:	25 cf       	rjmp	.-438    	; 0x2060 <main+0x482>
					set_x(y);
				 break;	
				//************************************************************************************************************
				 case 33:		//set page
							//wait for byte
					y = RX_get_byte();		//get new y offset
    2216:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
							
					
					set_page(y);
    221a:	88 6b       	ori	r24, 0xB8	; 184
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
    2222:	20 91 6c 0b 	lds	r18, 0x0B6C
    2226:	1c cf       	rjmp	.-456    	; 0x2060 <main+0x482>
							put_char(buffer[z]);			
				 break;	
				//************************************************************************************************************
				 case 32:		//set y reg
							//wait for byte
					y = RX_get_byte();		//get new y offset
    2228:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
							
					
					set_x(y);
    222c:	80 64       	ori	r24, 0x40	; 64
    222e:	60 e0       	ldi	r22, 0x00	; 0
    2230:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
    2234:	20 91 6c 0b 	lds	r18, 0x0B6C
    2238:	13 cf       	rjmp	.-474    	; 0x2060 <main+0x482>
					if (y_offset > 127) y_offset = 127;	//coerce y offset to valid range		
				 break;	
				//************************************************************************************************************
 				 case 26:		//write command
							//wait for byte(data)
					y = RX_get_byte();		
    223a:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    223e:	18 2f       	mov	r17, r24
							

							//wait for byte(chip # {1,2,3})
					z = RX_get_byte();	
    2240:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2244:	68 2f       	mov	r22, r24
							

					write_command_LCD(y,z);			//write command
    2246:	81 2f       	mov	r24, r17
    2248:	0e 94 fd 05 	call	0xbfa	; 0xbfa <write_command_LCD>
    224c:	20 91 6c 0b 	lds	r18, 0x0B6C
    2250:	07 cf       	rjmp	.-498    	; 0x2060 <main+0x482>
					if (x_offset > 159) x_offset = 159;	//coerce x offset to valid range
				 break;
				//************************************************************************************************************
				 case 25:		//set y_offset
							//wait for byte
					y_offset = RX_get_byte();		//get new y offset
    2252:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2256:	80 93 72 0b 	sts	0x0B72, r24
							
					if (y_offset > 127) y_offset = 127;	//coerce y offset to valid range		
    225a:	88 23       	and	r24, r24
    225c:	0c f0       	brlt	.+2      	; 0x2260 <main+0x682>
    225e:	fe ce       	rjmp	.-516    	; 0x205c <main+0x47e>
    2260:	40 92 72 0b 	sts	0x0B72, r4
    2264:	20 91 6c 0b 	lds	r18, 0x0B6C
    2268:	fb ce       	rjmp	.-522    	; 0x2060 <main+0x482>
					
				 break;
				//************************************************************************************************************
				 case 24:		//set x_offset
							//wait for byte
					x_offset = RX_get_byte();		//get new x offset
    226a:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    226e:	80 93 71 0b 	sts	0x0B71, r24
							
					if (x_offset > 159) x_offset = 159;	//coerce x offset to valid range
    2272:	80 3a       	cpi	r24, 0xA0	; 160
    2274:	08 f4       	brcc	.+2      	; 0x2278 <main+0x69a>
    2276:	f2 ce       	rjmp	.-540    	; 0x205c <main+0x47e>
    2278:	30 92 71 0b 	sts	0x0B71, r3
    227c:	20 91 6c 0b 	lds	r18, 0x0B6C
    2280:	ef ce       	rjmp	.-546    	; 0x2060 <main+0x482>
					sei();
				 break;	
				//************************************************************************************************************
				 case 22:		//bitblt
						//wait for byte (x coord)
					y = RX_get_byte();	//store it and increment RX_read
    2282:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2286:	f8 2e       	mov	r15, r24
 						//wrap if necessary
						
						//wait for byte (y coord)
					z = RX_get_byte();	//store it and increment RX_read
    2288:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    228c:	e8 2e       	mov	r14, r24
 						//wrap if necessary

						//wait for byte (mode)
					temp = RX_get_byte();	//store it and increment RX_read
    228e:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2292:	08 2f       	mov	r16, r24
 						//wrap if necessary

						//wait for byte (width)
					q = RX_get_byte();	//store it and increment RX_read
    2294:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2298:	18 2f       	mov	r17, r24
 						//wrap if necessary
					
						//wait for byte (height)
					p = RX_get_byte();	//store it and increment RX_read
    229a:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    229e:	28 2f       	mov	r18, r24
 						//wrap if necessary

					bitblt(y, z, q, p, temp, NULL);	//calling bitblt with a NULL pointer tells it to take data from the serial port
    22a0:	8f 2d       	mov	r24, r15
    22a2:	6e 2d       	mov	r22, r14
    22a4:	41 2f       	mov	r20, r17
    22a6:	ee 24       	eor	r14, r14
    22a8:	ff 24       	eor	r15, r15
    22aa:	0e 94 18 08 	call	0x1030	; 0x1030 <bitblt>
    22ae:	20 91 6c 0b 	lds	r18, 0x0B6C
    22b2:	d6 ce       	rjmp	.-596    	; 0x2060 <main+0x482>
					EEPROM_write((unsigned int) REV, reverse);
					sei();
				 break;	
				//************************************************************************************************************
				 case 21:	//toggle splash
					splash_screen ^= 1;
    22b4:	60 91 38 01 	lds	r22, 0x0138
    22b8:	62 25       	eor	r22, r2
    22ba:	60 93 38 01 	sts	0x0138, r22
					cli();
    22be:	f8 94       	cli
					EEPROM_write((unsigned int) SPLASH, splash_screen);
    22c0:	82 e0       	ldi	r24, 0x02	; 2
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 81 0c 	call	0x1902	; 0x1902 <EEPROM_write>
					sei();
    22c8:	78 94       	sei
    22ca:	20 91 6c 0b 	lds	r18, 0x0B6C
    22ce:	c8 ce       	rjmp	.-624    	; 0x2060 <main+0x482>
					draw_block(y ,z , temp, q, p);
				 break;
				//************************************************************************************************************
				// ASCII 19 is XOFF so we can't use it for a command
				 case 20:	//reverse mode
					reverse ^= 1;
    22d0:	80 91 6b 0b 	lds	r24, 0x0B6B
    22d4:	82 25       	eor	r24, r2
    22d6:	80 93 6b 0b 	sts	0x0B6B, r24
					clear_screen(1);
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	0e 94 b9 07 	call	0xf72	; 0xf72 <clear_screen>
					cli();
    22e0:	f8 94       	cli
					EEPROM_write((unsigned int) REV, reverse);
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	60 91 6b 0b 	lds	r22, 0x0B6B
    22ea:	0e 94 81 0c 	call	0x1902	; 0x1902 <EEPROM_write>
					sei();
    22ee:	78 94       	sei
    22f0:	20 91 6c 0b 	lds	r18, 0x0B6C
    22f4:	b5 ce       	rjmp	.-662    	; 0x2060 <main+0x482>
				// ASCII 17 is XON so we can't use it for a command
				 case 18:	//draw filled box
					//need 5 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of corner1)
					y = RX_get_byte();	//store it and increment RX_read
    22f6:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    22fa:	18 2f       	mov	r17, r24
 						//wrap if necessary
						
						//wait for byte (y coord of corner1)
					z = RX_get_byte();	//store it and increment RX_read
    22fc:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2300:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of corner2)
					temp = RX_get_byte();	//store it and increment RX_read
    2302:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2306:	e8 2e       	mov	r14, r24
 						//wrap if necessary

						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
    2308:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    230c:	d8 2e       	mov	r13, r24
 						//wrap if necessary
					
						//wait for byte (fill)
					p = RX_get_byte();	//store it and increment RX_read
    230e:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2312:	08 2f       	mov	r16, r24
 						//wrap if necessary


					draw_block(y ,z , temp, q, p);
    2314:	81 2f       	mov	r24, r17
    2316:	6f 2d       	mov	r22, r15
    2318:	4e 2d       	mov	r20, r14
    231a:	2d 2d       	mov	r18, r13
    231c:	0e 94 af 0c 	call	0x195e	; 0x195e <draw_block>
    2320:	20 91 6c 0b 	lds	r18, 0x0B6C
    2324:	9d ce       	rjmp	.-710    	; 0x2060 <main+0x482>
				//************************************************************************************************************
				 case 16:		//set pixel
					//need 3 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of pixel)
					z = RX_get_byte();	//store it and increment RX_read
    2326:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    232a:	08 2f       	mov	r16, r24
 						//wrap if necessary

						//wait for byte (y coord of pixel)d
					temp = RX_get_byte();
    232c:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2330:	18 2f       	mov	r17, r24
 					

						//wait for byte (S_R of pixel)
					q = RX_get_byte();
    2332:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
 					
					
					pixel(q, z, temp);		//draw the pixel
    2336:	60 2f       	mov	r22, r16
    2338:	41 2f       	mov	r20, r17
    233a:	0e 94 c1 0a 	call	0x1582	; 0x1582 <pixel>
    233e:	20 91 6c 0b 	lds	r18, 0x0B6C
    2342:	8e ce       	rjmp	.-740    	; 0x2060 <main+0x482>
				//************************************************************************************************************
 				 case 15:	//draw box
					//need 4 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of corner1)
					y = RX_get_byte();	//store it and increment RX_read
    2344:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2348:	08 2f       	mov	r16, r24
 						//wrap if necessary
						
						//wait for byte (y coord of corner1)
					z = RX_get_byte();	//store it and increment RX_read
    234a:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    234e:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of corner2)
					temp = RX_get_byte();	//store it and increment RX_read
    2350:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2354:	18 2f       	mov	r17, r24
 						//wrap if necessary

						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
    2356:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    235a:	28 2f       	mov	r18, r24
 						//wrap if necessary

					box(y ,z , temp, q);
    235c:	80 2f       	mov	r24, r16
    235e:	6f 2d       	mov	r22, r15
    2360:	41 2f       	mov	r20, r17
    2362:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <box>
    2366:	20 91 6c 0b 	lds	r18, 0x0B6C
    236a:	7a ce       	rjmp	.-780    	; 0x2060 <main+0x482>
						//send sprite # first 0..(NUM_SPRITES-1), then sprite data
						//sprite format is (char) width (char) height (SPRITE_SIZE-2 char's) data
						//sprite data is in native bitblt format, ie rows of bytes representing 8-pixel high vertical stripes

										//wait for byte (sprite#)
					y = RX_get_byte();					//store it and increment RX_read
    236c:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2370:	84 31       	cpi	r24, 0x14	; 20
    2372:	08 f0       	brcs	.+2      	; 0x2376 <main+0x798>
    2374:	83 e1       	ldi	r24, 0x13	; 19
    2376:	a2 e8       	ldi	r26, 0x82	; 130
    2378:	8a 9f       	mul	r24, r26
    237a:	70 01       	movw	r14, r0
    237c:	11 24       	eor	r1, r1
    237e:	eb e3       	ldi	r30, 0x3B	; 59
    2380:	f1 e0       	ldi	r31, 0x01	; 1
    2382:	ee 0e       	add	r14, r30
    2384:	ff 1e       	adc	r15, r31
    2386:	00 e0       	ldi	r16, 0x00	; 0
    2388:	10 e0       	ldi	r17, 0x00	; 0
					count = y * (uint16_t)SPRITE_SIZE;				//offset to sprite data

					 for (count2=0;count2 < (uint16_t)SPRITE_SIZE ;count2++)	//loop for sprite bytes
					 {
										//wait for byte
						sprite[count++] = RX_get_byte();			//store it and increment RX_read
    238a:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    238e:	d7 01       	movw	r26, r14
    2390:	8d 93       	st	X+, r24
    2392:	7d 01       	movw	r14, r26
					
					//calculate offset to sprite		

					count = y * (uint16_t)SPRITE_SIZE;				//offset to sprite data

					 for (count2=0;count2 < (uint16_t)SPRITE_SIZE ;count2++)	//loop for sprite bytes
    2394:	0f 5f       	subi	r16, 0xFF	; 255
    2396:	1f 4f       	sbci	r17, 0xFF	; 255
    2398:	02 38       	cpi	r16, 0x82	; 130
    239a:	11 05       	cpc	r17, r1
    239c:	b1 f7       	brne	.-20     	; 0x238a <main+0x7ac>
    239e:	5e ce       	rjmp	.-836    	; 0x205c <main+0x47e>
				//************************************************************************************************************
				 case 12:	//line
					//need 5 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of start)
					y = RX_get_byte();	//store it and increment RX_read
    23a0:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    23a4:	18 2f       	mov	r17, r24
 						//wrap if necessary
						
						//wait for byte (y coord of start)
					z = RX_get_byte();	//store it and increment RX_read
    23a6:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    23aa:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of end)
					temp = RX_get_byte();	//store it and increment RX_read
    23ac:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    23b0:	e8 2e       	mov	r14, r24
 						//wrap if necessary

						//wait for byte (y coord of end)
					q = RX_get_byte();	//store it and increment RX_read
    23b2:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    23b6:	08 2f       	mov	r16, r24
 						//wrap if necessary

						//wait for byte (S_R)
					p = RX_get_byte();	//store it and increment RX_read
    23b8:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
 						//wrap if necessary

					line(p, y ,z , temp, q);
    23bc:	61 2f       	mov	r22, r17
    23be:	4f 2d       	mov	r20, r15
    23c0:	2e 2d       	mov	r18, r14
    23c2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <line>
    23c6:	20 91 6c 0b 	lds	r18, 0x0B6C
    23ca:	4a ce       	rjmp	.-876    	; 0x2060 <main+0x482>
				}
	
				switch(y)				//switch to which command was sent
				{
				 case 0:	//clear screen
					clear_screen(0);
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	0e 94 b9 07 	call	0xf72	; 0xf72 <clear_screen>
					x_offset=0;
    23d2:	10 92 71 0b 	sts	0x0B71, r1
					y_offset=0;
    23d6:	10 92 72 0b 	sts	0x0B72, r1
    23da:	20 91 6c 0b 	lds	r18, 0x0B6C
    23de:	40 ce       	rjmp	.-896    	; 0x2060 <main+0x482>
					
				 break;	
				//************************************************************************************************************			
				 case 2:	//set backlight duty cycle
					//wait for byte
					BL_dutycycle = RX_get_byte();		//get char from buffer
    23e0:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    23e4:	80 93 39 01 	sts	0x0139, r24
					
					set_backlight(BL_dutycycle);
    23e8:	0e 94 90 0c 	call	0x1920	; 0x1920 <set_backlight>
					
					cli();
    23ec:	f8 94       	cli
					EEPROM_write((unsigned int) BACKLIGHT, BL_dutycycle);
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	60 91 39 01 	lds	r22, 0x0139
    23f6:	0e 94 81 0c 	call	0x1902	; 0x1902 <EEPROM_write>
					sei();
    23fa:	78 94       	sei
    23fc:	20 91 6c 0b 	lds	r18, 0x0B6C
    2400:	2f ce       	rjmp	.-930    	; 0x2060 <main+0x482>
					y_offset=0;
				 break;	
				//************************************************************************************************************
				 case 1:	//set debug level
								
					debug_msg = RX_get_byte();		//get char from buffer
    2402:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2406:	80 93 6c 0b 	sts	0x0B6C, r24

					if (debug_msg >2) debug_msg=2;
    240a:	83 30       	cpi	r24, 0x03	; 3
    240c:	18 f0       	brcs	.+6      	; 0x2414 <main+0x836>
    240e:	82 e0       	ldi	r24, 0x02	; 2
    2410:	80 93 6c 0b 	sts	0x0B6C, r24
					cli();
    2414:	f8 94       	cli
					EEPROM_write((unsigned int) DEBUG, debug_msg);
    2416:	84 e0       	ldi	r24, 0x04	; 4
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	60 91 6c 0b 	lds	r22, 0x0B6C
    241e:	0e 94 81 0c 	call	0x1902	; 0x1902 <EEPROM_write>
					sei();
    2422:	78 94       	sei
    2424:	20 91 6c 0b 	lds	r18, 0x0B6C
    2428:	1b ce       	rjmp	.-970    	; 0x2060 <main+0x482>
				 break;	
				//************************************************************************************************************
				 case 11:	//draw_sprite
						
						//wait for byte (x coord)
					y = RX_get_byte();	//store it and increment RX_read
    242a:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    242e:	08 2f       	mov	r16, r24
 						//wrap if necessary
						
						//wait for byte (y coord)
					z = RX_get_byte();	//store it and increment RX_read
    2430:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2434:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (sprite #)
					temp = RX_get_byte();	//store it and increment RX_read
    2436:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    243a:	18 2f       	mov	r17, r24
 						//wrap if necessary

						//wait for byte (mode)
					q = RX_get_byte();	//store it and increment RX_read
    243c:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2440:	28 2f       	mov	r18, r24
 						//wrap if necessary
					
					draw_sprite(y,z,temp,q);
    2442:	80 2f       	mov	r24, r16
    2444:	6f 2d       	mov	r22, r15
    2446:	41 2f       	mov	r20, r17
    2448:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <draw_sprite>
    244c:	20 91 6c 0b 	lds	r18, 0x0B6C
    2450:	07 ce       	rjmp	.-1010   	; 0x2060 <main+0x482>
				 break;	
				//************************************************************************************************************
				 case 10:	//set font mode

						//wait for byte (x coord of lower left)
					y = RX_get_byte();	//store it and increment RX_read
    2452:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
 						//wrap if necessary
						
					if (y<0 || y > 7)
						y=7;
					font_mode=y;
    2456:	88 30       	cpi	r24, 0x08	; 8
    2458:	08 f0       	brcs	.+2      	; 0x245c <main+0x87e>
    245a:	87 e0       	ldi	r24, 0x07	; 7
    245c:	80 93 63 0b 	sts	0x0B63, r24
    2460:	20 91 6c 0b 	lds	r18, 0x0B6C
    2464:	fd cd       	rjmp	.-1030   	; 0x2060 <main+0x482>
					sei();
				 break;	
				//************************************************************************************************************
				 case 8:	//toggle aux font
				
					if (aux_font==1)	//if using aux font, set back to default
    2466:	80 91 73 0b 	lds	r24, 0x0B73
    246a:	81 30       	cpi	r24, 0x01	; 1
    246c:	09 f4       	brne	.+2      	; 0x2470 <main+0x892>
    246e:	15 c1       	rjmp	.+554    	; 0x269a <main+0xabc>

						font_bytes *= font_w;	//need font_w stacks of rows	
					}
					else			//if using default font, set to aux
					{
						aux_font=1;
    2470:	20 92 73 0b 	sts	0x0B73, r2
						font_w = pgm_read_byte(&aux_text_array[0]);	
    2474:	a9 81       	ldd	r26, Y+1	; 0x01
    2476:	a0 93 8d 0c 	sts	0x0C8D, r26
						font_h = pgm_read_byte(&aux_text_array[1]);	
    247a:	ba 81       	ldd	r27, Y+2	; 0x02
    247c:	b0 93 84 0b 	sts	0x0B84, r27
						font_space = pgm_read_byte(&aux_text_array[2]);
    2480:	eb 81       	ldd	r30, Y+3	; 0x03
    2482:	e0 93 8e 0d 	sts	0x0D8E, r30
						font_bytes = font_h/8;	//8 pixels/byte
    2486:	fc 81       	ldd	r31, Y+4	; 0x04
    2488:	f0 93 83 0b 	sts	0x0B83, r31
						if (font_h % 8 != 0)
    248c:	8d 81       	ldd	r24, Y+5	; 0x05
    248e:	9e 81       	ldd	r25, Y+6	; 0x06
    2490:	89 2b       	or	r24, r25
    2492:	19 f0       	breq	.+6      	; 0x249a <main+0x8bc>
							font_bytes++;	//partial rows count too
    2494:	9f 81       	ldd	r25, Y+7	; 0x07
    2496:	90 93 83 0b 	sts	0x0B83, r25
						font_bytes *= font_w;	//need font_w stacks of rows	
    249a:	80 91 83 0b 	lds	r24, 0x0B83
    249e:	90 91 8d 0c 	lds	r25, 0x0C8D
    24a2:	89 9f       	mul	r24, r25
    24a4:	80 2d       	mov	r24, r0
    24a6:	11 24       	eor	r1, r1
    24a8:	80 93 83 0b 	sts	0x0B83, r24
    24ac:	20 91 6c 0b 	lds	r18, 0x0B6C
    24b0:	d7 cd       	rjmp	.-1106   	; 0x2060 <main+0x482>
					LCD_reset();
				 break;	
				//************************************************************************************************************
				 case 7:	//change baud rate

					y = RX_get_byte();	//store it and increment RX_read
    24b2:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    24b6:	98 2f       	mov	r25, r24
										
					if ((y > 0) && (y < 7)) baud_rate = y;
    24b8:	81 50       	subi	r24, 0x01	; 1
    24ba:	86 30       	cpi	r24, 0x06	; 6
    24bc:	10 f4       	brcc	.+4      	; 0x24c2 <main+0x8e4>
    24be:	90 93 37 01 	sts	0x0137, r25

					
					set_baud(baud_rate);
    24c2:	80 91 37 01 	lds	r24, 0x0137
    24c6:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <set_baud>
					
					cli();
    24ca:	f8 94       	cli
					EEPROM_write((unsigned int) BPS, baud_rate);
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	60 91 37 01 	lds	r22, 0x0137
    24d4:	0e 94 81 0c 	call	0x1902	; 0x1902 <EEPROM_write>
					sei();
    24d8:	78 94       	sei
    24da:	20 91 6c 0b 	lds	r18, 0x0B6C
    24de:	c0 cd       	rjmp	.-1152   	; 0x2060 <main+0x482>
						p=0xff;
					draw_block(y ,z , temp, q, p);
				 break;
				//************************************************************************************************************
				 case 6:	//LCD reset
					LCD_reset();
    24e0:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <LCD_reset>
    24e4:	20 91 6c 0b 	lds	r18, 0x0B6C
    24e8:	bb cd       	rjmp	.-1162   	; 0x2060 <main+0x482>
				//************************************************************************************************************
				 case 5:	//erase block
					//need 4 bytes, RX_read already pointing at the first
					
						//wait for byte (x coord of corner1)
					y = RX_get_byte();	//store it and increment RX_read
    24ea:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    24ee:	e8 2e       	mov	r14, r24
 						//wrap if necessary
						
						//wait for byte (y coord of corner1)
					z = RX_get_byte();	//store it and increment RX_read
    24f0:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    24f4:	f8 2e       	mov	r15, r24
 						//wrap if necessary

						//wait for byte (x coord of corner2)
					temp = RX_get_byte();	//store it and increment RX_read
    24f6:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    24fa:	18 2f       	mov	r17, r24
 						//wrap if necessary

						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
    24fc:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2500:	28 2f       	mov	r18, r24
 						//wrap if necessary

					p=0;				//do erase by drawing a block filled with 0x00
					if (reverse==1)			//if display is reversed, draw a block filled with 0xFF
    2502:	80 91 6b 0b 	lds	r24, 0x0B6B
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	09 f4       	brne	.+2      	; 0x250c <main+0x92e>
    250a:	de c0       	rjmp	.+444    	; 0x26c8 <main+0xaea>
    250c:	00 e0       	ldi	r16, 0x00	; 0
						p=0xff;
					draw_block(y ,z , temp, q, p);
    250e:	8e 2d       	mov	r24, r14
    2510:	6f 2d       	mov	r22, r15
    2512:	41 2f       	mov	r20, r17
    2514:	0e 94 af 0c 	call	0x195e	; 0x195e <draw_block>
    2518:	20 91 6c 0b 	lds	r18, 0x0B6C
    251c:	a1 cd       	rjmp	.-1214   	; 0x2060 <main+0x482>

					circle(q, y, z, temp);
				 break;
				//************************************************************************************************************
				 case 4:	//toggles CR_LF
					if (CR_LF==1)
    251e:	80 91 64 0b 	lds	r24, 0x0B64
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	09 f4       	brne	.+2      	; 0x2528 <main+0x94a>
    2526:	d2 c0       	rjmp	.+420    	; 0x26cc <main+0xaee>
						CR_LF=0;
					else
						CR_LF=1;
    2528:	20 92 64 0b 	sts	0x0B64, r2
					cli();
    252c:	f8 94       	cli
					EEPROM_write((unsigned int) CRLF, CR_LF);
    252e:	85 e0       	ldi	r24, 0x05	; 5
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	60 91 64 0b 	lds	r22, 0x0B64
    2536:	0e 94 81 0c 	call	0x1902	; 0x1902 <EEPROM_write>
					sei();
    253a:	78 94       	sei
    253c:	20 91 6c 0b 	lds	r18, 0x0B6C
    2540:	8f cd       	rjmp	.-1250   	; 0x2060 <main+0x482>
				//************************************************************************************************************
				 case 3:	//draw circle
					//need 4 bytes, RX_read already pointing at the first
				
						//wait for byte (x coord of circle)
					y = RX_get_byte();	//get char from buffer
    2542:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2546:	18 2f       	mov	r17, r24
						
						//wait for byte (y coord of circle)
					z = RX_get_byte();	//get char from buffer
    2548:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    254c:	08 2f       	mov	r16, r24

						//wait for byte (r of circle)
					temp = RX_get_byte();	//store it and increment RX_read
    254e:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>
    2552:	f8 2e       	mov	r15, r24
 				
						//wait for byte (S_R of circle)
					q = RX_get_byte();	//store it and increment RX_read
    2554:	0e 94 c1 05 	call	0xb82	; 0xb82 <RX_get_byte>

					circle(q, y, z, temp);
    2558:	61 2f       	mov	r22, r17
    255a:	70 e0       	ldi	r23, 0x00	; 0
    255c:	40 2f       	mov	r20, r16
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	2f 2d       	mov	r18, r15
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <circle>
    2568:	20 91 6c 0b 	lds	r18, 0x0B6C
    256c:	79 cd       	rjmp	.-1294   	; 0x2060 <main+0x482>
					put_char(x);	//if ASCII debug, echo characters typed
			 break;
			
			 case 13:			//CR, reset to start of row

				x_offset = x_offset % (font_w+font_space);
    256e:	80 91 8e 0d 	lds	r24, 0x0D8E
    2572:	60 91 8d 0c 	lds	r22, 0x0C8D
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	68 0f       	add	r22, r24
    257a:	71 1d       	adc	r23, r1
    257c:	80 91 71 0b 	lds	r24, 0x0B71
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__divmodhi4>
    2586:	80 93 71 0b 	sts	0x0B71, r24
				if (debug_msg==2)	
    258a:	90 91 6c 0b 	lds	r25, 0x0B6C
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	09 f1       	breq	.+66     	; 0x25d4 <main+0x9f6>
					put_char(x);	//if ASCII debug, echo characters typed

				if (CR_LF==1)
    2592:	80 91 64 0b 	lds	r24, 0x0B64
    2596:	81 30       	cpi	r24, 0x01	; 1
    2598:	09 f0       	breq	.+2      	; 0x259c <main+0x9be>
    259a:	20 cc       	rjmp	.-1984   	; 0x1ddc <main+0x1fe>
				{
					if (debug_msg==2)	
    259c:	92 30       	cpi	r25, 0x02	; 2
    259e:	09 f1       	breq	.+66     	; 0x25e2 <main+0xa04>
						put_char(0x0A);	//if ASCII debug, echo LF as well

					if (y_offset > (64-font_h-font_h))
    25a0:	70 91 72 0b 	lds	r23, 0x0B72
    25a4:	60 91 84 0b 	lds	r22, 0x0B84
    25a8:	86 2f       	mov	r24, r22
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	47 2f       	mov	r20, r23
    25ae:	50 e0       	ldi	r21, 0x00	; 0
    25b0:	22 27       	eor	r18, r18
    25b2:	33 27       	eor	r19, r19
    25b4:	28 1b       	sub	r18, r24
    25b6:	39 0b       	sbc	r19, r25
    25b8:	28 1b       	sub	r18, r24
    25ba:	39 0b       	sbc	r19, r25
    25bc:	20 5c       	subi	r18, 0xC0	; 192
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	24 17       	cp	r18, r20
    25c2:	35 07       	cpc	r19, r21
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <main+0x9ea>
    25c6:	4b c0       	rjmp	.+150    	; 0x265e <main+0xa80>
						y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
    25c8:	87 2f       	mov	r24, r23
    25ca:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__udivmodqi4>
    25ce:	90 93 72 0b 	sts	0x0B72, r25
    25d2:	04 cc       	rjmp	.-2040   	; 0x1ddc <main+0x1fe>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    25d4:	80 91 c0 00 	lds	r24, 0x00C0
    25d8:	85 ff       	sbrs	r24, 5
    25da:	fc cf       	rjmp	.-8      	; 0x25d4 <main+0x9f6>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    25dc:	50 92 c6 00 	sts	0x00C6, r5
    25e0:	d8 cf       	rjmp	.-80     	; 0x2592 <main+0x9b4>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    25e2:	80 91 c0 00 	lds	r24, 0x00C0
    25e6:	85 ff       	sbrs	r24, 5
    25e8:	fc cf       	rjmp	.-8      	; 0x25e2 <main+0xa04>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    25ea:	c0 92 c6 00 	sts	0x00C6, r12
    25ee:	d8 cf       	rjmp	.-80     	; 0x25a0 <main+0x9c2>
		{			
			x = RX_get_byte();	
			switch(x)		//switch based on received character
			{
			 case 8:			//backspace
				del_char();
    25f0:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <del_char>
				if (debug_msg==2)
    25f4:	80 91 6c 0b 	lds	r24, 0x0B6C
    25f8:	82 30       	cpi	r24, 0x02	; 2
    25fa:	09 f0       	breq	.+2      	; 0x25fe <main+0xa20>
    25fc:	ef cb       	rjmp	.-2082   	; 0x1ddc <main+0x1fe>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    25fe:	80 91 c0 00 	lds	r24, 0x00C0
    2602:	85 ff       	sbrs	r24, 5
    2604:	fc cf       	rjmp	.-8      	; 0x25fe <main+0xa20>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    2606:	88 e0       	ldi	r24, 0x08	; 8
    2608:	80 93 c6 00 	sts	0x00C6, r24
    260c:	e7 cb       	rjmp	.-2098   	; 0x1ddc <main+0x1fe>
				}
			 break;

			 case 10:			//LF move to next row

				if (y_offset > (64-font_h-font_h))
    260e:	70 91 72 0b 	lds	r23, 0x0B72
    2612:	60 91 84 0b 	lds	r22, 0x0B84
    2616:	86 2f       	mov	r24, r22
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	47 2f       	mov	r20, r23
    261c:	50 e0       	ldi	r21, 0x00	; 0
    261e:	22 27       	eor	r18, r18
    2620:	33 27       	eor	r19, r19
    2622:	28 1b       	sub	r18, r24
    2624:	39 0b       	sbc	r19, r25
    2626:	28 1b       	sub	r18, r24
    2628:	39 0b       	sbc	r19, r25
    262a:	20 5c       	subi	r18, 0xC0	; 192
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	24 17       	cp	r18, r20
    2630:	35 07       	cpc	r19, r21
    2632:	8c f4       	brge	.+34     	; 0x2656 <main+0xa78>
					y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
    2634:	87 2f       	mov	r24, r23
    2636:	0e 94 f7 14 	call	0x29ee	; 0x29ee <__udivmodqi4>
    263a:	90 93 72 0b 	sts	0x0B72, r25
				else 
					y_offset += font_h;
				if (debug_msg==2)
    263e:	80 91 6c 0b 	lds	r24, 0x0B6C
    2642:	82 30       	cpi	r24, 0x02	; 2
    2644:	09 f0       	breq	.+2      	; 0x2648 <main+0xa6a>
    2646:	ca cb       	rjmp	.-2156   	; 0x1ddc <main+0x1fe>
}

void put_char(char byte)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    2648:	80 91 c0 00 	lds	r24, 0x00C0
    264c:	85 ff       	sbrs	r24, 5
    264e:	fc cf       	rjmp	.-8      	; 0x2648 <main+0xa6a>
	/* Put data into buffer, sends the data */
	UDR0 = byte;
    2650:	c0 92 c6 00 	sts	0x00C6, r12
    2654:	c3 cb       	rjmp	.-2170   	; 0x1ddc <main+0x1fe>
			 case 10:			//LF move to next row

				if (y_offset > (64-font_h-font_h))
					y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
				else 
					y_offset += font_h;
    2656:	67 0f       	add	r22, r23
    2658:	60 93 72 0b 	sts	0x0B72, r22
    265c:	f0 cf       	rjmp	.-32     	; 0x263e <main+0xa60>
						put_char(0x0A);	//if ASCII debug, echo LF as well

					if (y_offset > (64-font_h-font_h))
						y_offset = y_offset % font_h;	//this makes sure that the line restarted at the top will overlap the old one
					else 
						y_offset += font_h;
    265e:	67 0f       	add	r22, r23
    2660:	60 93 72 0b 	sts	0x0B72, r22
    2664:	bb cb       	rjmp	.-2186   	; 0x1ddc <main+0x1fe>
					
					//coerce length, there are only 128 pixels across the whole screen
					if (temp>128)
						temp=128;

					for(q=0;q<temp;q++)
    2666:	88 23       	and	r24, r24
    2668:	09 f0       	breq	.+2      	; 0x266c <main+0xa8e>
    266a:	34 cd       	rjmp	.-1432   	; 0x20d4 <main+0x4f6>
    266c:	3f cd       	rjmp	.-1410   	; 0x20ec <main+0x50e>
							
			
					temp= read_byte(y,z);
					
					if(debug_msg==2)
						rprintf("%d\n",temp);
    266e:	00 d0       	rcall	.+0      	; 0x2670 <main+0xa92>
    2670:	00 d0       	rcall	.+0      	; 0x2672 <main+0xa94>
    2672:	ed b7       	in	r30, 0x3d	; 61
    2674:	fe b7       	in	r31, 0x3e	; 62
    2676:	31 96       	adiw	r30, 0x01	; 1
    2678:	ad b7       	in	r26, 0x3d	; 61
    267a:	be b7       	in	r27, 0x3e	; 62
    267c:	12 96       	adiw	r26, 0x02	; 2
    267e:	9c 92       	st	X, r9
    2680:	8e 92       	st	-X, r8
    2682:	11 97       	sbiw	r26, 0x01	; 1
    2684:	92 83       	std	Z+2, r25	; 0x02
    2686:	13 82       	std	Z+3, r1	; 0x03
    2688:	0e 94 8f 13 	call	0x271e	; 0x271e <rprintf>
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	20 91 6c 0b 	lds	r18, 0x0B6C
    2698:	e3 cc       	rjmp	.-1594   	; 0x2060 <main+0x482>
				//************************************************************************************************************
				 case 8:	//toggle aux font
				
					if (aux_font==1)	//if using aux font, set back to default
					{
						aux_font=0;
    269a:	10 92 73 0b 	sts	0x0B73, r1
						font_w = pgm_read_byte(&text_array[0]);	
    269e:	b8 85       	ldd	r27, Y+8	; 0x08
    26a0:	b0 93 8d 0c 	sts	0x0C8D, r27
						font_h = pgm_read_byte(&text_array[1]);	
    26a4:	e9 85       	ldd	r30, Y+9	; 0x09
    26a6:	e0 93 84 0b 	sts	0x0B84, r30
						font_space = pgm_read_byte(&text_array[2]);
    26aa:	fa 85       	ldd	r31, Y+10	; 0x0a
    26ac:	f0 93 8e 0d 	sts	0x0D8E, r31
						font_bytes = font_h/8;	//8 pixels/byte
    26b0:	2b 85       	ldd	r18, Y+11	; 0x0b
    26b2:	20 93 83 0b 	sts	0x0B83, r18
						if (font_h % 8 != 0)
    26b6:	8c 85       	ldd	r24, Y+12	; 0x0c
    26b8:	9d 85       	ldd	r25, Y+13	; 0x0d
    26ba:	89 2b       	or	r24, r25
    26bc:	09 f4       	brne	.+2      	; 0x26c0 <main+0xae2>
    26be:	ed ce       	rjmp	.-550    	; 0x249a <main+0x8bc>
							font_bytes++;	//partial rows count too
    26c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26c2:	90 93 83 0b 	sts	0x0B83, r25
    26c6:	e9 ce       	rjmp	.-558    	; 0x249a <main+0x8bc>
						//wait for byte (y coord of corner2)
					q = RX_get_byte();	//store it and increment RX_read
 						//wrap if necessary

					p=0;				//do erase by drawing a block filled with 0x00
					if (reverse==1)			//if display is reversed, draw a block filled with 0xFF
    26c8:	0f ef       	ldi	r16, 0xFF	; 255
    26ca:	21 cf       	rjmp	.-446    	; 0x250e <main+0x930>
					circle(q, y, z, temp);
				 break;
				//************************************************************************************************************
				 case 4:	//toggles CR_LF
					if (CR_LF==1)
						CR_LF=0;
    26cc:	10 92 64 0b 	sts	0x0B64, r1
    26d0:	2d cf       	rjmp	.-422    	; 0x252c <main+0x94e>

	
	//Logo==========================================================
	if (splash_screen == 1)
	{
		draw_sprite(56,24,0,4);	//XOR'ing the sprite works in normal and reverse modes
    26d2:	88 e3       	ldi	r24, 0x38	; 56
    26d4:	68 e1       	ldi	r22, 0x18	; 24
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	24 e0       	ldi	r18, 0x04	; 4
    26da:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <draw_sprite>
    26de:	ed ca       	rjmp	.-2598   	; 0x1cba <main+0xdc>
		EEPROM_write((unsigned int) BPS, 6);
		
		sei();//Enable Interrupts
	}
	
	else (set_baud(baud_rate));
    26e0:	80 91 37 01 	lds	r24, 0x0137
    26e4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <set_baud>
    26e8:	1c cb       	rjmp	.-2504   	; 0x1d22 <main+0x144>

000026ea <rprintf_devopen>:

static int (*putcharfunc)(int c);

void rprintf_devopen( int(*put)(int) )
{
   putcharfunc = put;
    26ea:	90 93 82 0b 	sts	0x0B82, r25
    26ee:	80 93 81 0b 	sts	0x0B81, r24
}
    26f2:	08 95       	ret

000026f4 <myputchar>:

static void myputchar(unsigned char c)
{
    26f4:	1f 93       	push	r17
    26f6:	18 2f       	mov	r17, r24
	if(c == '\n') putcharfunc('\r');
    26f8:	8a 30       	cpi	r24, 0x0A	; 10
    26fa:	49 f0       	breq	.+18     	; 0x270e <myputchar+0x1a>
	putcharfunc(c);
    26fc:	e0 91 81 0b 	lds	r30, 0x0B81
    2700:	f0 91 82 0b 	lds	r31, 0x0B82
    2704:	81 2f       	mov	r24, r17
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	09 95       	icall
}
    270a:	1f 91       	pop	r17
    270c:	08 95       	ret
   putcharfunc = put;
}

static void myputchar(unsigned char c)
{
	if(c == '\n') putcharfunc('\r');
    270e:	e0 91 81 0b 	lds	r30, 0x0B81
    2712:	f0 91 82 0b 	lds	r31, 0x0B82
    2716:	8d e0       	ldi	r24, 0x0D	; 13
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	09 95       	icall
    271c:	ef cf       	rjmp	.-34     	; 0x26fc <myputchar+0x8>

0000271e <rprintf>:
	putcharfunc(c);
}

void rprintf(char const *format, ...)
{
    271e:	2f 92       	push	r2
    2720:	3f 92       	push	r3
    2722:	4f 92       	push	r4
    2724:	5f 92       	push	r5
    2726:	6f 92       	push	r6
    2728:	7f 92       	push	r7
    272a:	8f 92       	push	r8
    272c:	9f 92       	push	r9
    272e:	af 92       	push	r10
    2730:	bf 92       	push	r11
    2732:	cf 92       	push	r12
    2734:	df 92       	push	r13
    2736:	ef 92       	push	r14
    2738:	ff 92       	push	r15
    273a:	0f 93       	push	r16
    273c:	1f 93       	push	r17
    273e:	df 93       	push	r29
    2740:	cf 93       	push	r28
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	2d 97       	sbiw	r28, 0x0d	; 13
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	8e 01       	movw	r16, r28
    2754:	0e 5d       	subi	r16, 0xDE	; 222
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	f8 01       	movw	r30, r16
    275a:	21 90       	ld	r2, Z+
    275c:	31 90       	ld	r3, Z+
    275e:	8f 01       	movw	r16, r30
  unsigned char fill;
  unsigned char width;

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
    2760:	f1 01       	movw	r30, r2
    2762:	81 91       	ld	r24, Z+
    2764:	1f 01       	movw	r2, r30
    2766:	85 32       	cpi	r24, 0x25	; 37
    2768:	61 f0       	breq	.+24     	; 0x2782 <rprintf+0x64>
      if (!format_flag){va_end (ap); return;}
    276a:	88 23       	and	r24, r24
    276c:	09 f4       	brne	.+2      	; 0x2770 <rprintf+0x52>
    276e:	b3 c0       	rjmp	.+358    	; 0x28d6 <rprintf+0x1b8>
      myputchar(format_flag);
    2770:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <myputchar>
    2774:	28 01       	movw	r4, r16
    2776:	82 01       	movw	r16, r4
  unsigned char fill;
  unsigned char width;

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
    2778:	f1 01       	movw	r30, r2
    277a:	81 91       	ld	r24, Z+
    277c:	1f 01       	movw	r2, r30
    277e:	85 32       	cpi	r24, 0x25	; 37
    2780:	a1 f7       	brne	.-24     	; 0x276a <rprintf+0x4c>
    }

    issigned=0; //default unsigned
    base = 10;

    format_flag = *format++; //get char after '%'
    2782:	91 91       	ld	r25, Z+
    2784:	1f 01       	movw	r2, r30

#ifdef PADDING
    width=0; //no formatting
    fill=0;  //no formatting
    if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
    2786:	90 33       	cpi	r25, 0x30	; 48
    2788:	09 f4       	brne	.+2      	; 0x278c <rprintf+0x6e>
    278a:	9a c0       	rjmp	.+308    	; 0x28c0 <rprintf+0x1a2>
    278c:	90 32       	cpi	r25, 0x20	; 32
    278e:	09 f4       	brne	.+2      	; 0x2792 <rprintf+0x74>
    2790:	97 c0       	rjmp	.+302    	; 0x28c0 <rprintf+0x1a2>
    2792:	89 2f       	mov	r24, r25
    2794:	66 24       	eor	r6, r6
    2796:	1d 86       	std	Y+13, r1	; 0x0d
#endif

#ifdef USE_LONG
    islong=0; //default int value
#ifdef USE_UPPER
    if(format_flag=='l' || format_flag=='L') //Long value 
    2798:	8c 36       	cpi	r24, 0x6C	; 108
    279a:	41 f1       	breq	.+80     	; 0x27ec <rprintf+0xce>
    279c:	8c 34       	cpi	r24, 0x4C	; 76
    279e:	31 f1       	breq	.+76     	; 0x27ec <rprintf+0xce>
    27a0:	90 e0       	ldi	r25, 0x00	; 0
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    27a2:	88 35       	cpi	r24, 0x58	; 88
    27a4:	49 f1       	breq	.+82     	; 0x27f8 <rprintf+0xda>
    27a6:	89 35       	cpi	r24, 0x59	; 89
    27a8:	68 f4       	brcc	.+26     	; 0x27c4 <rprintf+0xa6>
    27aa:	89 34       	cpi	r24, 0x49	; 73
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <rprintf+0x92>
    27ae:	b4 c0       	rjmp	.+360    	; 0x2918 <rprintf+0x1fa>
    27b0:	8a 34       	cpi	r24, 0x4A	; 74
    27b2:	08 f0       	brcs	.+2      	; 0x27b6 <rprintf+0x98>
    27b4:	01 c1       	rjmp	.+514    	; 0x29b8 <rprintf+0x29a>
    27b6:	83 34       	cpi	r24, 0x43	; 67
    27b8:	71 f0       	breq	.+28     	; 0x27d6 <rprintf+0xb8>
    27ba:	84 34       	cpi	r24, 0x44	; 68
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <rprintf+0xa2>
    27be:	ac c0       	rjmp	.+344    	; 0x2918 <rprintf+0x1fa>
    27c0:	28 01       	movw	r4, r16
    27c2:	10 c0       	rjmp	.+32     	; 0x27e4 <rprintf+0xc6>
    27c4:	89 36       	cpi	r24, 0x69	; 105
    27c6:	09 f4       	brne	.+2      	; 0x27ca <rprintf+0xac>
    27c8:	a7 c0       	rjmp	.+334    	; 0x2918 <rprintf+0x1fa>
    27ca:	8a 36       	cpi	r24, 0x6A	; 106
    27cc:	08 f0       	brcs	.+2      	; 0x27d0 <rprintf+0xb2>
    27ce:	d5 c0       	rjmp	.+426    	; 0x297a <rprintf+0x25c>
    27d0:	83 36       	cpi	r24, 0x63	; 99
    27d2:	09 f0       	breq	.+2      	; 0x27d6 <rprintf+0xb8>
    27d4:	9e c0       	rjmp	.+316    	; 0x2912 <rprintf+0x1f4>
#ifdef USE_CHAR
    case 'c':
#ifdef USE_UPPER
    case 'C':
#endif
      format_flag = va_arg(ap,int);
    27d6:	f2 e0       	ldi	r31, 0x02	; 2
    27d8:	4f 2e       	mov	r4, r31
    27da:	51 2c       	mov	r5, r1
    27dc:	40 0e       	add	r4, r16
    27de:	51 1e       	adc	r5, r17
    27e0:	f8 01       	movw	r30, r16
    27e2:	80 81       	ld	r24, Z
      // no break -> run into default
#endif

    default:
      myputchar(format_flag);
    27e4:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <myputchar>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    27e8:	82 01       	movw	r16, r4
    27ea:	c6 cf       	rjmp	.-116    	; 0x2778 <rprintf+0x5a>
#else
    if(format_flag=='l') //Long value 
#endif
     {
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
    27ec:	f1 01       	movw	r30, r2
    27ee:	81 91       	ld	r24, Z+
    27f0:	1f 01       	movw	r2, r30
    27f2:	91 e0       	ldi	r25, 0x01	; 1
     }
#endif

    switch (format_flag)
    27f4:	88 35       	cpi	r24, 0x58	; 88
    27f6:	b9 f6       	brne	.-82     	; 0x27a6 <rprintf+0x88>
    27f8:	a0 e1       	ldi	r26, 0x10	; 16
    27fa:	8a 2e       	mov	r8, r26
    27fc:	91 2c       	mov	r9, r1
    27fe:	a1 2c       	mov	r10, r1
    2800:	b1 2c       	mov	r11, r1
        u_val = (unsigned long)s_val;
       }
      else //Unsigned types
       {
#ifdef USE_LONG
        if(islong) { u_val = va_arg(ap,unsigned long); }
    2802:	99 23       	and	r25, r25
    2804:	09 f4       	brne	.+2      	; 0x2808 <rprintf+0xea>
    2806:	e5 c0       	rjmp	.+458    	; 0x29d2 <rprintf+0x2b4>
    2808:	44 e0       	ldi	r20, 0x04	; 4
    280a:	44 2e       	mov	r4, r20
    280c:	51 2c       	mov	r5, r1
    280e:	40 0e       	add	r4, r16
    2810:	51 1e       	adc	r5, r17
    2812:	f8 01       	movw	r30, r16
    2814:	c0 80       	ld	r12, Z
    2816:	d1 80       	ldd	r13, Z+1	; 0x01
    2818:	e2 80       	ldd	r14, Z+2	; 0x02
    281a:	f3 80       	ldd	r15, Z+3	; 0x03
        u_val = va_arg(ap,unsigned int);
#endif
       }
    
      ptr = scratch + SCRATCH;
      *--ptr = 0;
    281c:	8e 01       	movw	r16, r28
    281e:	04 5f       	subi	r16, 0xF4	; 244
    2820:	1f 4f       	sbci	r17, 0xFF	; 255
    2822:	1c 86       	std	Y+12, r1	; 0x0c
      do
       {
        char ch = u_val % base + '0';
    2824:	c7 01       	movw	r24, r14
    2826:	b6 01       	movw	r22, r12
    2828:	a5 01       	movw	r20, r10
    282a:	94 01       	movw	r18, r8
    282c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__udivmodsi4>
    2830:	20 e3       	ldi	r18, 0x30	; 48
    2832:	72 2e       	mov	r7, r18
    2834:	76 0e       	add	r7, r22
#ifdef USE_HEX
        if (ch > '9')
    2836:	f9 e3       	ldi	r31, 0x39	; 57
    2838:	f7 15       	cp	r31, r7
    283a:	18 f4       	brcc	.+6      	; 0x2842 <rprintf+0x124>
         {
          ch += 'a' - '9' - 1;
#ifdef USE_UPPERHEX
          ch-=0x20;
    283c:	97 e3       	ldi	r25, 0x37	; 55
    283e:	79 2e       	mov	r7, r25
    2840:	76 0e       	add	r7, r22
#endif
         }
#endif          
        *--ptr = ch;
    2842:	f8 01       	movw	r30, r16
    2844:	72 92       	st	-Z, r7
    2846:	8f 01       	movw	r16, r30
        u_val /= base;
    2848:	c7 01       	movw	r24, r14
    284a:	b6 01       	movw	r22, r12
    284c:	a5 01       	movw	r20, r10
    284e:	94 01       	movw	r18, r8
    2850:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__udivmodsi4>
    2854:	c9 01       	movw	r24, r18
    2856:	da 01       	movw	r26, r20
    2858:	6c 01       	movw	r12, r24
    285a:	7d 01       	movw	r14, r26

#ifdef PADDING
        if(width) width--; //calculate number of padding chars
    285c:	fd 85       	ldd	r31, Y+13	; 0x0d
    285e:	ff 23       	and	r31, r31
    2860:	11 f0       	breq	.+4      	; 0x2866 <rprintf+0x148>
    2862:	f1 50       	subi	r31, 0x01	; 1
    2864:	fd 87       	std	Y+13, r31	; 0x0d
#endif
      } while (u_val);
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	a1 05       	cpc	r26, r1
    286a:	b1 05       	cpc	r27, r1
    286c:	d9 f6       	brne	.-74     	; 0x2824 <rprintf+0x106>
    286e:	a8 01       	movw	r20, r16

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
    2870:	2d 85       	ldd	r18, Y+13	; 0x0d
    2872:	22 23       	and	r18, r18
    2874:	09 f4       	brne	.+2      	; 0x2878 <rprintf+0x15a>
    2876:	b9 c0       	rjmp	.+370    	; 0x29ea <rprintf+0x2cc>
    2878:	8d 85       	ldd	r24, Y+13	; 0x0d
    287a:	81 50       	subi	r24, 0x01	; 1
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	01 50       	subi	r16, 0x01	; 1
    2882:	10 40       	sbci	r17, 0x00	; 0
    2884:	c8 01       	movw	r24, r16
    2886:	82 1b       	sub	r24, r18
    2888:	93 0b       	sbc	r25, r19
    288a:	0f 5f       	subi	r16, 0xFF	; 255
    288c:	1f 4f       	sbci	r17, 0xFF	; 255
    288e:	f8 01       	movw	r30, r16
    2890:	62 92       	st	-Z, r6
    2892:	8f 01       	movw	r16, r30
    2894:	e8 17       	cp	r30, r24
    2896:	f9 07       	cpc	r31, r25
    2898:	d1 f7       	brne	.-12     	; 0x288e <rprintf+0x170>
    289a:	89 01       	movw	r16, r18
    289c:	00 95       	com	r16
    289e:	10 95       	com	r17
    28a0:	04 0f       	add	r16, r20
    28a2:	15 1f       	adc	r17, r21
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    28a4:	66 20       	and	r6, r6
    28a6:	09 f4       	brne	.+2      	; 0x28aa <rprintf+0x18c>
    28a8:	66 cf       	rjmp	.-308    	; 0x2776 <rprintf+0x58>
    28aa:	86 2d       	mov	r24, r6
    28ac:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <myputchar>
    28b0:	0f 5f       	subi	r16, 0xFF	; 255
    28b2:	1f 4f       	sbci	r17, 0xFF	; 255
    28b4:	f8 01       	movw	r30, r16
    28b6:	60 80       	ld	r6, Z
    28b8:	66 20       	and	r6, r6
    28ba:	b9 f7       	brne	.-18     	; 0x28aa <rprintf+0x18c>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    28bc:	82 01       	movw	r16, r4
    28be:	5c cf       	rjmp	.-328    	; 0x2778 <rprintf+0x5a>
    width=0; //no formatting
    fill=0;  //no formatting
    if(format_flag=='0' || format_flag==' ') //SPACE or ZERO padding  ?
     {
      fill=format_flag;
      format_flag = *format++; //get char after padding char
    28c0:	f1 01       	movw	r30, r2
    28c2:	81 91       	ld	r24, Z+
    28c4:	1f 01       	movw	r2, r30
      if(format_flag>='0' && format_flag<='9')
    28c6:	f8 2f       	mov	r31, r24
    28c8:	f0 53       	subi	r31, 0x30	; 48
    28ca:	fd 87       	std	Y+13, r31	; 0x0d
    28cc:	fa 30       	cpi	r31, 0x0A	; 10
    28ce:	e0 f0       	brcs	.+56     	; 0x2908 <rprintf+0x1ea>
    28d0:	69 2e       	mov	r6, r25
    28d2:	1d 86       	std	Y+13, r1	; 0x0d
    28d4:	61 cf       	rjmp	.-318    	; 0x2798 <rprintf+0x7a>
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    }
  }
}
    28d6:	2d 96       	adiw	r28, 0x0d	; 13
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	cf 91       	pop	r28
    28e4:	df 91       	pop	r29
    28e6:	1f 91       	pop	r17
    28e8:	0f 91       	pop	r16
    28ea:	ff 90       	pop	r15
    28ec:	ef 90       	pop	r14
    28ee:	df 90       	pop	r13
    28f0:	cf 90       	pop	r12
    28f2:	bf 90       	pop	r11
    28f4:	af 90       	pop	r10
    28f6:	9f 90       	pop	r9
    28f8:	8f 90       	pop	r8
    28fa:	7f 90       	pop	r7
    28fc:	6f 90       	pop	r6
    28fe:	5f 90       	pop	r5
    2900:	4f 90       	pop	r4
    2902:	3f 90       	pop	r3
    2904:	2f 90       	pop	r2
    2906:	08 95       	ret
      fill=format_flag;
      format_flag = *format++; //get char after padding char
      if(format_flag>='0' && format_flag<='9')
       {
        width=format_flag-'0';
        format_flag = *format++; //get char after width char
    2908:	f1 01       	movw	r30, r2
    290a:	81 91       	ld	r24, Z+
    290c:	1f 01       	movw	r2, r30
    290e:	69 2e       	mov	r6, r25
    2910:	43 cf       	rjmp	.-378    	; 0x2798 <rprintf+0x7a>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    2912:	84 36       	cpi	r24, 0x64	; 100
    2914:	09 f0       	breq	.+2      	; 0x2918 <rprintf+0x1fa>
    2916:	54 cf       	rjmp	.-344    	; 0x27c0 <rprintf+0xa2>
    CONVERSION_LOOP:

      if(issigned) //Signed types
       {
#ifdef USE_LONG
        if(islong) { s_val = va_arg(ap,long); }
    2918:	99 23       	and	r25, r25
    291a:	b9 f4       	brne	.+46     	; 0x294a <rprintf+0x22c>
        else { s_val = va_arg(ap,int); }
    291c:	62 e0       	ldi	r22, 0x02	; 2
    291e:	46 2e       	mov	r4, r22
    2920:	51 2c       	mov	r5, r1
    2922:	40 0e       	add	r4, r16
    2924:	51 1e       	adc	r5, r17
    2926:	f8 01       	movw	r30, r16
    2928:	80 81       	ld	r24, Z
    292a:	91 81       	ldd	r25, Z+1	; 0x01
    292c:	7c 01       	movw	r14, r24
    292e:	00 27       	eor	r16, r16
    2930:	f7 fc       	sbrc	r15, 7
    2932:	00 95       	com	r16
    2934:	10 2f       	mov	r17, r16
#else
        s_val = va_arg(ap,int);
#endif

        if(s_val < 0) //Value negativ ?
    2936:	17 fd       	sbrc	r17, 7
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <rprintf+0x244>
         {
          s_val = - s_val; //Make it positiv
          myputchar('-');    //Output sign
         }

        u_val = (unsigned long)s_val;
    293a:	67 01       	movw	r12, r14
    293c:	78 01       	movw	r14, r16
    293e:	5a e0       	ldi	r21, 0x0A	; 10
    2940:	85 2e       	mov	r8, r21
    2942:	91 2c       	mov	r9, r1
    2944:	a1 2c       	mov	r10, r1
    2946:	b1 2c       	mov	r11, r1
    2948:	69 cf       	rjmp	.-302    	; 0x281c <rprintf+0xfe>
    CONVERSION_LOOP:

      if(issigned) //Signed types
       {
#ifdef USE_LONG
        if(islong) { s_val = va_arg(ap,long); }
    294a:	74 e0       	ldi	r23, 0x04	; 4
    294c:	47 2e       	mov	r4, r23
    294e:	51 2c       	mov	r5, r1
    2950:	40 0e       	add	r4, r16
    2952:	51 1e       	adc	r5, r17
    2954:	f8 01       	movw	r30, r16
    2956:	e0 80       	ld	r14, Z
    2958:	f1 80       	ldd	r15, Z+1	; 0x01
    295a:	02 81       	ldd	r16, Z+2	; 0x02
    295c:	13 81       	ldd	r17, Z+3	; 0x03
        else { s_val = va_arg(ap,int); }
#else
        s_val = va_arg(ap,int);
#endif

        if(s_val < 0) //Value negativ ?
    295e:	17 ff       	sbrs	r17, 7
    2960:	ec cf       	rjmp	.-40     	; 0x293a <rprintf+0x21c>
         {
          s_val = - s_val; //Make it positiv
    2962:	10 95       	com	r17
    2964:	00 95       	com	r16
    2966:	f0 94       	com	r15
    2968:	e0 94       	com	r14
    296a:	e1 1c       	adc	r14, r1
    296c:	f1 1c       	adc	r15, r1
    296e:	01 1d       	adc	r16, r1
    2970:	11 1d       	adc	r17, r1
          myputchar('-');    //Output sign
    2972:	8d e2       	ldi	r24, 0x2D	; 45
    2974:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <myputchar>
    2978:	e0 cf       	rjmp	.-64     	; 0x293a <rprintf+0x21c>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    297a:	85 37       	cpi	r24, 0x75	; 117
    297c:	11 f1       	breq	.+68     	; 0x29c2 <rprintf+0x2a4>
    297e:	88 37       	cpi	r24, 0x78	; 120
    2980:	09 f4       	brne	.+2      	; 0x2984 <rprintf+0x266>
    2982:	3a cf       	rjmp	.-396    	; 0x27f8 <rprintf+0xda>
    2984:	83 37       	cpi	r24, 0x73	; 115
    2986:	09 f0       	breq	.+2      	; 0x298a <rprintf+0x26c>
    2988:	1b cf       	rjmp	.-458    	; 0x27c0 <rprintf+0xa2>
#ifdef USE_STRING
#ifdef USE_UPPER
    case 'S':
#endif
    case 's':
      ptr = (unsigned char*)va_arg(ap,char *);
    298a:	e2 e0       	ldi	r30, 0x02	; 2
    298c:	4e 2e       	mov	r4, r30
    298e:	51 2c       	mov	r5, r1
    2990:	40 0e       	add	r4, r16
    2992:	51 1e       	adc	r5, r17
    2994:	f8 01       	movw	r30, r16
    2996:	00 81       	ld	r16, Z
    2998:	11 81       	ldd	r17, Z+1	; 0x01
      while(*ptr) { myputchar(*ptr); ptr++; }
    299a:	f8 01       	movw	r30, r16
    299c:	80 81       	ld	r24, Z
    299e:	88 23       	and	r24, r24
    29a0:	09 f4       	brne	.+2      	; 0x29a4 <rprintf+0x286>
    29a2:	e9 ce       	rjmp	.-558    	; 0x2776 <rprintf+0x58>
    29a4:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <myputchar>
    29a8:	0f 5f       	subi	r16, 0xFF	; 255
    29aa:	1f 4f       	sbci	r17, 0xFF	; 255
    29ac:	f8 01       	movw	r30, r16
    29ae:	80 81       	ld	r24, Z
    29b0:	88 23       	and	r24, r24
    29b2:	c1 f7       	brne	.-16     	; 0x29a4 <rprintf+0x286>

  va_start (ap, format);
  for (;;){
    while ((format_flag = *(format++)) != '%'){      // Until '%' or '\0' 
      if (!format_flag){va_end (ap); return;}
      myputchar(format_flag);
    29b4:	82 01       	movw	r16, r4
    29b6:	e0 ce       	rjmp	.-576    	; 0x2778 <rprintf+0x5a>
      islong=1;
      format_flag = *format++; //get char after 'l' or 'L'
     }
#endif

    switch (format_flag)
    29b8:	83 35       	cpi	r24, 0x53	; 83
    29ba:	39 f3       	breq	.-50     	; 0x298a <rprintf+0x26c>
    29bc:	85 35       	cpi	r24, 0x55	; 85
    29be:	09 f0       	breq	.+2      	; 0x29c2 <rprintf+0x2a4>
    29c0:	ff ce       	rjmp	.-514    	; 0x27c0 <rprintf+0xa2>

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
#endif

      while(*ptr) { myputchar(*ptr); ptr++; }
    29c2:	8a e0       	ldi	r24, 0x0A	; 10
    29c4:	88 2e       	mov	r8, r24
    29c6:	91 2c       	mov	r9, r1
    29c8:	a1 2c       	mov	r10, r1
    29ca:	b1 2c       	mov	r11, r1
        u_val = (unsigned long)s_val;
       }
      else //Unsigned types
       {
#ifdef USE_LONG
        if(islong) { u_val = va_arg(ap,unsigned long); }
    29cc:	99 23       	and	r25, r25
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <rprintf+0x2b4>
    29d0:	1b cf       	rjmp	.-458    	; 0x2808 <rprintf+0xea>
        else { u_val = va_arg(ap,unsigned int); }
    29d2:	32 e0       	ldi	r19, 0x02	; 2
    29d4:	43 2e       	mov	r4, r19
    29d6:	51 2c       	mov	r5, r1
    29d8:	40 0e       	add	r4, r16
    29da:	51 1e       	adc	r5, r17
    29dc:	f8 01       	movw	r30, r16
    29de:	80 81       	ld	r24, Z
    29e0:	91 81       	ldd	r25, Z+1	; 0x01
    29e2:	6c 01       	movw	r12, r24
    29e4:	ee 24       	eor	r14, r14
    29e6:	ff 24       	eor	r15, r15
    29e8:	19 cf       	rjmp	.-462    	; 0x281c <rprintf+0xfe>
        if(width) width--; //calculate number of padding chars
#endif
      } while (u_val);

#ifdef PADDING
     while(width--) *--ptr = fill; //insert padding chars		      
    29ea:	67 2c       	mov	r6, r7
    29ec:	5b cf       	rjmp	.-330    	; 0x28a4 <rprintf+0x186>

000029ee <__udivmodqi4>:
    29ee:	99 1b       	sub	r25, r25
    29f0:	79 e0       	ldi	r23, 0x09	; 9
    29f2:	04 c0       	rjmp	.+8      	; 0x29fc <__udivmodqi4_ep>

000029f4 <__udivmodqi4_loop>:
    29f4:	99 1f       	adc	r25, r25
    29f6:	96 17       	cp	r25, r22
    29f8:	08 f0       	brcs	.+2      	; 0x29fc <__udivmodqi4_ep>
    29fa:	96 1b       	sub	r25, r22

000029fc <__udivmodqi4_ep>:
    29fc:	88 1f       	adc	r24, r24
    29fe:	7a 95       	dec	r23
    2a00:	c9 f7       	brne	.-14     	; 0x29f4 <__udivmodqi4_loop>
    2a02:	80 95       	com	r24
    2a04:	08 95       	ret

00002a06 <__divmodhi4>:
    2a06:	97 fb       	bst	r25, 7
    2a08:	09 2e       	mov	r0, r25
    2a0a:	07 26       	eor	r0, r23
    2a0c:	0a d0       	rcall	.+20     	; 0x2a22 <__divmodhi4_neg1>
    2a0e:	77 fd       	sbrc	r23, 7
    2a10:	04 d0       	rcall	.+8      	; 0x2a1a <__divmodhi4_neg2>
    2a12:	2e d0       	rcall	.+92     	; 0x2a70 <__udivmodhi4>
    2a14:	06 d0       	rcall	.+12     	; 0x2a22 <__divmodhi4_neg1>
    2a16:	00 20       	and	r0, r0
    2a18:	1a f4       	brpl	.+6      	; 0x2a20 <__divmodhi4_exit>

00002a1a <__divmodhi4_neg2>:
    2a1a:	70 95       	com	r23
    2a1c:	61 95       	neg	r22
    2a1e:	7f 4f       	sbci	r23, 0xFF	; 255

00002a20 <__divmodhi4_exit>:
    2a20:	08 95       	ret

00002a22 <__divmodhi4_neg1>:
    2a22:	f6 f7       	brtc	.-4      	; 0x2a20 <__divmodhi4_exit>
    2a24:	90 95       	com	r25
    2a26:	81 95       	neg	r24
    2a28:	9f 4f       	sbci	r25, 0xFF	; 255
    2a2a:	08 95       	ret

00002a2c <__udivmodsi4>:
    2a2c:	a1 e2       	ldi	r26, 0x21	; 33
    2a2e:	1a 2e       	mov	r1, r26
    2a30:	aa 1b       	sub	r26, r26
    2a32:	bb 1b       	sub	r27, r27
    2a34:	fd 01       	movw	r30, r26
    2a36:	0d c0       	rjmp	.+26     	; 0x2a52 <__udivmodsi4_ep>

00002a38 <__udivmodsi4_loop>:
    2a38:	aa 1f       	adc	r26, r26
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	ee 1f       	adc	r30, r30
    2a3e:	ff 1f       	adc	r31, r31
    2a40:	a2 17       	cp	r26, r18
    2a42:	b3 07       	cpc	r27, r19
    2a44:	e4 07       	cpc	r30, r20
    2a46:	f5 07       	cpc	r31, r21
    2a48:	20 f0       	brcs	.+8      	; 0x2a52 <__udivmodsi4_ep>
    2a4a:	a2 1b       	sub	r26, r18
    2a4c:	b3 0b       	sbc	r27, r19
    2a4e:	e4 0b       	sbc	r30, r20
    2a50:	f5 0b       	sbc	r31, r21

00002a52 <__udivmodsi4_ep>:
    2a52:	66 1f       	adc	r22, r22
    2a54:	77 1f       	adc	r23, r23
    2a56:	88 1f       	adc	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	1a 94       	dec	r1
    2a5c:	69 f7       	brne	.-38     	; 0x2a38 <__udivmodsi4_loop>
    2a5e:	60 95       	com	r22
    2a60:	70 95       	com	r23
    2a62:	80 95       	com	r24
    2a64:	90 95       	com	r25
    2a66:	9b 01       	movw	r18, r22
    2a68:	ac 01       	movw	r20, r24
    2a6a:	bd 01       	movw	r22, r26
    2a6c:	cf 01       	movw	r24, r30
    2a6e:	08 95       	ret

00002a70 <__udivmodhi4>:
    2a70:	aa 1b       	sub	r26, r26
    2a72:	bb 1b       	sub	r27, r27
    2a74:	51 e1       	ldi	r21, 0x11	; 17
    2a76:	07 c0       	rjmp	.+14     	; 0x2a86 <__udivmodhi4_ep>

00002a78 <__udivmodhi4_loop>:
    2a78:	aa 1f       	adc	r26, r26
    2a7a:	bb 1f       	adc	r27, r27
    2a7c:	a6 17       	cp	r26, r22
    2a7e:	b7 07       	cpc	r27, r23
    2a80:	10 f0       	brcs	.+4      	; 0x2a86 <__udivmodhi4_ep>
    2a82:	a6 1b       	sub	r26, r22
    2a84:	b7 0b       	sbc	r27, r23

00002a86 <__udivmodhi4_ep>:
    2a86:	88 1f       	adc	r24, r24
    2a88:	99 1f       	adc	r25, r25
    2a8a:	5a 95       	dec	r21
    2a8c:	a9 f7       	brne	.-22     	; 0x2a78 <__udivmodhi4_loop>
    2a8e:	80 95       	com	r24
    2a90:	90 95       	com	r25
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	08 95       	ret

00002a98 <_exit>:
    2a98:	f8 94       	cli

00002a9a <__stop_program>:
    2a9a:	ff cf       	rjmp	.-2      	; 0x2a9a <__stop_program>
